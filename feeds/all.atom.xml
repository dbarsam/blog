<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>#Dev</title><link href="https://dbarsam.github.io/blog/" rel="alternate"></link><link href="https://dbarsam.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>https://dbarsam.github.io/blog/</id><updated>2021-02-08T19:13:00-05:00</updated><subtitle>A collection of software development notes</subtitle><entry><title>Quick Start to Python Logging</title><link href="https://dbarsam.github.io/blog/articles/python-logging-quick-start/" rel="alternate"></link><published>2021-02-08T19:13:00-05:00</published><updated>2021-02-08T19:13:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-02-08:/blog/articles/python-logging-quick-start/</id><summary type="html">&lt;p&gt;The bare minimum needed to get started with thePython logging system.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore NOTSET asctime levelname
--&gt;
&lt;p&gt;Logging is pretty important.  It's the primary way to capture the performance of code after it has left the developer's controlled environment.  This means that the more complex a program becomes, the greater the need for a robust and mature logging system.&lt;/p&gt;
&lt;p&gt;Fortunately, Python has a logging service built into its core system libraries that is both powerful and flexible -- so much so that it's slightly intimidating.  This post will introduce the logging system through a collection of basic logging topics.&lt;/p&gt;
&lt;h2 id="replacing-print"&gt;Replacing &lt;code&gt;print&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The most basic way of logging is to write messages to the console using the &lt;code&gt;print&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print('This is an info message')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function writes text to the system's standard output stream.  For small scraps of code this works well because they are small scraps of code.  Scaling this practice up to more complex projects, like applications or system libraries, becomes problematic. In those situations, where a single client is brining in various libraries from multiple developers, all of the &lt;code&gt;print&lt;/code&gt;s would overwhelm the user with information and turn the system console's into a performance bottleneck.&lt;/p&gt;
&lt;p&gt;Library developers could work around this, maybe creating a dev and release mode of their library, but that's adding an extra layer of needless work and responsibility onto each individual library.  Python's logging system has already solved this problem and splits the responsibility between the developer and client.  The developer write the logging messages and the client controls the output.&lt;/p&gt;
&lt;h2 id="using-logger-objects"&gt;Using Logger Objects&lt;/h2&gt;
&lt;p&gt;The developer-facing part of the logging system is the &lt;a href="https://docs.python.org/3/library/logging.html#logger-objects"&gt;logger objects&lt;/a&gt;.  These logger objects are aptly named &lt;code&gt;logger&lt;/code&gt;s and developers request one from the &lt;code&gt;logging&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
import logging
logger = logging.getLogger(__name__)
logger.info('This is an info message')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There are a few things to note with the snippet:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All logging calls must be done through the &lt;code&gt;logging&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;The logging library is a builtin system library and is quite mature, having been with Python standard library from the start.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developers request logging objects from the logging system's &lt;code&gt;getLogger&lt;/code&gt; function with a name, preferable using the &lt;code&gt;__name__&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;The logger object is created on demand and managed by the logging system.  The name parameter is simply a label to refer to the logger object later on.  The name could be any pieces of text, but using the built-in &lt;code&gt;__name__&lt;/code&gt; variable is a good habit to use from the start -- especially as you start developing more complex applications.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;__name__&lt;/code&gt; variable is available in all files and contains the fully qualified module name.  This means that developers get a working naming scheme for free with the line &lt;code&gt;logger = logging.getLogger(__name__)&lt;/code&gt; copied and pasted throughout your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developers send messages through one of the logger's convenience functions.&lt;/p&gt;
&lt;p&gt;While the logger's functions look like it is sending simple strings, each call makes a &lt;a href="https://docs.python.org/3/library/logging.html#logrecord-attributes"&gt;logging record&lt;/a&gt; that contains the text line as an attribute.  The logging system also attaches a severity or logging levels to each record.  The equivalent level of typical &lt;code&gt;print&lt;/code&gt; messages is the &lt;code&gt;info&lt;/code&gt; level and each logger object has a convenience function to send messages on that level.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/logging.html#logrecord-attributes"&gt;logging record&lt;/a&gt; are the internal objects that represent messages and there are additional tools and utilities to work with them, but that's beyond the scope of this article.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="initializing-with-basicconfig"&gt;Initializing with &lt;code&gt;basicConfig&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Printing messages to the console with &lt;code&gt;print&lt;/code&gt; works right out of the box.  Sending logging messages to the console, like in the above snippet, does not.&lt;/p&gt;
&lt;p&gt;The logging system must be initialized and configured to send logging messages to the console.  This configuration step will be custom for larger projects that require more than one output for messages, but smaller projects can initialize the system in a single line using the &lt;code&gt;logging.basicConfig&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicConfig&lt;/code&gt; function allows the user to configure the most frequently used options.  The snippet from the &lt;code&gt;example.py&lt;/code&gt; module below initializes the logging system with a opinionated configuration that works for basic usage.&lt;/p&gt;
&lt;p&gt;```python
import logging&lt;/p&gt;
&lt;p&gt;logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)&lt;/p&gt;
&lt;p&gt;logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
logger.info('This is an info message')
```&lt;/p&gt;
&lt;p&gt;The function takes in multiple parameters, but the bare minimum should include the &lt;code&gt;format&lt;/code&gt; and the &lt;code&gt;level&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;format&lt;/code&gt; text is the template to apply to all messages and in our case we have a simple one that makes a logging message from three logging message properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;asctime&lt;/code&gt;: the time the message was created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;levelname&lt;/code&gt;: the human readable name of the importance level&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: the message itself&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Running the code example above yields the print message, but also the time and the level name as well:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
$ python example.py
2021-02-08 20:02:30,998 : INFO : This is an info message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;level&lt;/code&gt; argument is a filter.  Changing the value from &lt;code&gt;logging.INFO&lt;/code&gt; to a higher level, like &lt;code&gt;logging.WARNING&lt;/code&gt; will blocked the info messages from being displayed.  Similarly, going to a lower level, like &lt;code&gt;logging.DEBUG&lt;/code&gt;, will allow the &lt;code&gt;info&lt;/code&gt; messages, but also include all &lt;code&gt;debug&lt;/code&gt; messages.  But again, with the goal of minimally replacing the print statement, this can be set to &lt;code&gt;logging.INFO&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="how-to-initialize"&gt;How to Initialize&lt;/h2&gt;
&lt;p&gt;Initialization should occur only once in an application's lifespan as each initialization destroyers the previous initialization.  For this reason, initialization should not be done in a library but instead by done in the application's &lt;code&gt;__main__&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;The official &lt;code&gt;__main__&lt;/code&gt; &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;documentation&lt;/a&gt; does a great job explaining what this block is.  But, it's best to use the &lt;code&gt;__main__&lt;/code&gt; block to initialize the logging system because it is the main entry point of the application and executed before anything else.  For example, update the above &lt;code&gt;example.py&lt;/code&gt; by adding a &lt;code&gt;__main__&lt;/code&gt; block:&lt;/p&gt;
&lt;p&gt;```python
import sys
import logging&lt;/p&gt;
&lt;p&gt;def main(args=[]):
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.info('This is an info message')
    return 0&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
    sys.exit(main(sys.argv))
```&lt;/p&gt;
&lt;p&gt;If we execute &lt;code&gt;example.py&lt;/code&gt; directly, we see the logging statement.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
$ python example.py
2021-02-08 20:03:01,900 : INFO : This is an info message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, if we &lt;code&gt;import&lt;/code&gt; the module, the &lt;code&gt;__main__&lt;/code&gt; block (and the initialization) is ignored and the logging statement is skipped:&lt;/p&gt;
&lt;!-- markdownlint-disable MD014 --&gt;
&lt;p&gt;&lt;code&gt;console
$ python -c "from example import main;main([])"
$&lt;/code&gt;&lt;/p&gt;
&lt;!-- markdownlint-enable MD014 --&gt;

&lt;p&gt;The second example doesn't have any logging messages because the &lt;code&gt;__name__&lt;/code&gt; value contains the module name &lt;code&gt;example&lt;/code&gt; instead of the &lt;code&gt;__main__&lt;/code&gt; value.&lt;/p&gt;
&lt;h2 id="a-note-about-loggings-name-and-__name__"&gt;A note about logging's &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;__name__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Remember that using &lt;code&gt;__name__&lt;/code&gt; in &lt;code&gt;logger = logging.getLogger(__name__)&lt;/code&gt; is considered a best practice because it leverages the python module name stored in that variable and simplifies the way to acquire the logger through the code.&lt;/p&gt;
&lt;p&gt;However, when using &lt;code&gt;__name__&lt;/code&gt; in the &lt;code&gt;__main__&lt;/code&gt; block, the value of &lt;code&gt;__name__&lt;/code&gt; changes to &lt;code&gt;__main__&lt;/code&gt;.  If we include the &lt;code&gt;%(name)s&lt;/code&gt; field in our initialization we can see this in practice.&lt;/p&gt;
&lt;p&gt;```python
import sys
import logging&lt;/p&gt;
&lt;p&gt;def main(args=[]):
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.info('This is an info message')
    return 0&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    logging.basicConfig(format='%(asctime)s : %(name)s %(levelname)s : %(message)s', level=logging.INFO)
    sys.exit(main(sys.argv))
```&lt;/p&gt;
&lt;p&gt;Executing the file from the command line includes the &lt;code&gt;__main__&lt;/code&gt; in the logging message.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
$ python example.py
2021-02-08 20:05:02,700 : __main__ - INFO : This is an info message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, executing the code as a module (after we manually initialize the logging system), displays the name of the module &lt;code&gt;example&lt;/code&gt; in the name value:&lt;/p&gt;
&lt;p&gt;```console
$ python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import logging
logging.basicConfig(format='%(asctime)s : %(name)s %(levelname)s : %(message)s', level=logging.INFO)
from example import main
main([])
2021-02-08 20:07:03,600 : example - INFO : This is an info message
0
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is important to know as the client could very well use the &lt;code&gt;name&lt;/code&gt; field to filter in or out logging messages from a particular module.&lt;/p&gt;
&lt;h2 id="using-different-logging-levels"&gt;Using different logging levels&lt;/h2&gt;
&lt;p&gt;The logging system attaches a numerical severity level to each logging message.  These levels are actually customizable, but in practically all cases its best to just use the default levels define in the &lt;code&gt;logging&lt;/code&gt; module: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;critical&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The logger object implements a convenience logging function for each logging level, wrapping around the actual &lt;code&gt;log&lt;/code&gt; function.  The &lt;code&gt;log&lt;/code&gt; function is public to use, and can be used for special handling or for custom levels:&lt;/p&gt;
&lt;p&gt;```python
import sys
import logging&lt;/p&gt;
&lt;p&gt;def main(args=[]):
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.log(5, 'This is a custom message at level 5')
    logger.debug('This is a debug message')
    logger.info('This is an info message')
    logger.warning('This is a warning message')
    logger.error('This is an error message')
    logger.critical('This is a critical message')
    logger.log(100, 'This is a custom message at level 100')
    return 0&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    logging.basicConfig(format='%(asctime)s : %(name)s %(levelname)s : %(message)s', level=logging.INFO)
    sys.exit(main(sys.argv))
```&lt;/p&gt;
&lt;p&gt;The uses all convenience functions and uses custom levels &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;. Execute the above module yields the following results:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
$ python example.py
2021-02-08 20:19:58,867 : __main__ INFO : This is an info message
2021-02-08 20:19:58,867 : __main__ WARNING : This is a warning message
2021-02-08 20:19:58,867 : __main__ ERROR : This is an error message
2021-02-08 20:19:58,867 : __main__ CRITICAL : This is a critical message
2021-02-08 20:19:58,867 : __main__ Level 100 : This is a custom message at level 100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All of the logging messages appear -- except for the &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;debug&lt;/code&gt; messages.  This is because we set the global level parameter to &lt;code&gt;logging.INFO&lt;/code&gt; in our &lt;code&gt;basicConfig&lt;/code&gt; call.  That &lt;code&gt;level&lt;/code&gt; parameter configures the system to filter out all messages with a severity level less than given level.  Changing the value to &lt;code&gt;logging.ERROR&lt;/code&gt; will filter out &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;  &lt;code&gt;warning&lt;/code&gt;, and &lt;code&gt;info&lt;/code&gt; messages:&lt;/p&gt;
&lt;p&gt;```python
import sys
import logging&lt;/p&gt;
&lt;p&gt;def main(args=[]):
    ....
    return 0&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    logging.basicConfig(format='%(asctime)s : %(name)s %(levelname)s : %(message)s', level=logging.ERROR)
    sys.exit(main(sys.argv))
```&lt;/p&gt;
&lt;p&gt;Executing the above module yields the following results:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
$ python example.py
2021-02-08 20:36:05,829 : __main__ ERROR : This is an error message
2021-02-08 20:36:05,829 : __main__ CRITICAL : This is an critical message
2021-02-08 20:36:05,829 : __main__ Level 100 : This is an custom message at level 100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And likewise, setting the value to &lt;code&gt;logging.NOTSET&lt;/code&gt; is the equivalent of setting the filter to &lt;code&gt;0&lt;/code&gt; and letting all messages through:&lt;/p&gt;
&lt;p&gt;```python
import sys
import logging&lt;/p&gt;
&lt;p&gt;def main(args=[]):
    ....
    return 0&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    logging.basicConfig(format='%(asctime)s : %(name)s %(levelname)s : %(message)s', level=logging.NOTSET)
    sys.exit(main(sys.argv))
```&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
$ python example.py
2021-02-08 20:37:34,355 : __main__ Level 5 : This is an custom message at level 5
2021-02-08 20:37:34,355 : __main__ DEBUG : This is an debug message
2021-02-08 20:37:34,355 : __main__ INFO : This is an info message
2021-02-08 20:37:34,355 : __main__ WARNING : This is an warning message
2021-02-08 20:37:34,355 : __main__ ERROR : This is an error message
2021-02-08 20:37:34,355 : __main__ CRITICAL : This is an critical message
2021-02-08 20:37:34,355 : __main__ Level 100 : This is an custom message at level 100&lt;/code&gt;&lt;/p&gt;</content><category term="application development"></category><category term="python"></category><category term="logging"></category></entry><entry><title>How this blog detects broken links - update</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-detects-broken-links-i/" rel="alternate"></link><published>2021-02-01T19:25:00-05:00</published><updated>2021-02-01T19:25:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-02-01:/blog/articles/how-this-blog-detects-broken-links-i/</id><summary type="html">&lt;p&gt;An update to validating local and internet links in markdown files.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;This article is a follow-up to &lt;a href="https://dbarsam.github.io/blog/articles/how-this-blog-detects-broken-links/"&gt;how this blog detects broken links&lt;/a&gt;, describing updated ways to use the &lt;a href="https://github.com/tcort/markdown-link-check"&gt;markdown-link-check&lt;/a&gt; npm package.&lt;/p&gt;
&lt;h2 id="batch-operation"&gt;Batch Operation&lt;/h2&gt;
&lt;p&gt;The previous article used a &lt;code&gt;for&lt;/code&gt; loop and an shortcut or-operator (&lt;code&gt;||&lt;/code&gt;) with an &lt;code&gt;exit&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
for file in  $(find ./content -name \*.md); do markdown-link-check --verbose "$file" || exit 1; done;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That &lt;code&gt;exit&lt;/code&gt; command turned out to exit the shell in some cases and this was not desirable on some machines.  Instead, we switched to &lt;code&gt;xargs&lt;/code&gt; and enforce single parameters with &lt;code&gt;--max-lines&lt;/code&gt; argument:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
find content -name \*.md -print0 | xargs --null --max-lines=1 markdown-link-check --config .markdown-link-check.json --verbose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;xargs&lt;/code&gt; introduces some new changes.  At first &lt;code&gt;xargs&lt;/code&gt; passed all arguments to &lt;code&gt;markdown-link-check&lt;/code&gt;, but the additional flag executes it once per file.  Second, &lt;code&gt;xargs&lt;/code&gt; will return back exit code 123 if any of invocations returns back a non-zero value, which is fine in the ci pipeline.  And lastly, &lt;code&gt;xargs&lt;/code&gt; processes all arguments, regardless if one invocation fails.  This is desirable in our case because we need to check all links and not quit at the first failure.&lt;/p&gt;
&lt;h2 id="ignore-rules"&gt;Ignore Rules&lt;/h2&gt;
&lt;p&gt;We have another update regarding Pelican's shorthand for &lt;a href="https://docs.getpelican.com/en/latest/content.html#linking-to-internal-content"&gt;local links&lt;/a&gt;: &lt;code&gt;{filename}&lt;/code&gt; and &lt;code&gt;{static}&lt;/code&gt;.  These are not valid links but we create a configuration file, &lt;code&gt;.markdown-link-check.json&lt;/code&gt;, and use the &lt;code&gt;ignorePatterns&lt;/code&gt; option to skip those special cases.  Before we could use the raw &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; characters.  Now, it looks like we have to use the html escape codes &lt;code&gt;%7B&lt;/code&gt; and &lt;code&gt;%7D&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "ignorePatterns": [
        {
            "pattern": "^({|%7B)filename(}|%7D)"
        },
        ....
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For backwards compatibility, both characters are in a regex &lt;em&gt;or&lt;/em&gt; (&lt;code&gt;|&lt;/code&gt;) group.&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="travis"></category><category term="bash"></category></entry><entry><title>How this blog manages article assets</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/" rel="alternate"></link><published>2021-01-22T19:13:00-05:00</published><updated>2021-01-22T19:13:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-22:/blog/articles/how-this-blog-manages-article-assets/</id><summary type="html">&lt;p&gt;How to use Autostatic to re-organize Pelican's default article structure to be more article specific.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore autostatic alexandre fonseca's pelly pdfs pelicanconf staticattach
--&gt;
&lt;p&gt;Sooner or later, an article will require an attachment.  These accompanying non-markdown files are usually images, maybe pdfs, or even fully working pieces of code that are referenced by the article.&lt;/p&gt;
&lt;p&gt;How exactly to best manage these extra files is more preference than best practice. This article examines a strategy that makes articles and their respective assets more modular than what's available with the default settings.&lt;/p&gt;
&lt;h2 id="pelican-asset-management"&gt;Pelican Asset Management&lt;/h2&gt;
&lt;p&gt;Pelican treats the articles and assets as two different types of source material.  The article are, of course, &lt;a href="https://docs.getpelican.com/en/latest/content.html#articles-and-pages"&gt;articles&lt;/a&gt;, but to Pelican, the assets are &lt;a href="https://docs.getpelican.com/en/latest/content.html#static-content"&gt;static files&lt;/a&gt;.  And yes, there's the third class of content, pages, but we'll ignore them for now.&lt;/p&gt;
&lt;p&gt;Pelican also splits the discovery and processing of these assets into two distinct operations.  So while the markdown files and the accompanying image files could be stored next to each other, the Pelican build process could move them to different locations.&lt;/p&gt;
&lt;p&gt;If you're used to writing Markdown in VSCode (or any other tool that immediately renders Markdown) this may be a bit jarring. Everything could very well appear to work in the editor only to mysteriously break in the final website update.&lt;/p&gt;
&lt;h2 id="global-assets"&gt;Global Assets&lt;/h2&gt;
&lt;p&gt;Out of the box, Pelican works with the following example structure:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
project/
├── content
│   ├── articles/
│   │   ├── article1.md
│   │   └── article2.md
│   ├── images/
│   │   └── pelly.png
│   ├── pdfs/
│   │   └── pelly.pdf
│   └── pages/
│       └── test.md
└── pelican.conf.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;articles&lt;/code&gt; and &lt;code&gt;pages&lt;/code&gt; are both separate types of content and have their own distinct discovery options, the respective &lt;code&gt;ARTICLE_PATH&lt;/code&gt; and &lt;code&gt;PAGES_PATH&lt;/code&gt; settings.  However, the &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;pdf&lt;/code&gt; are static files and are discovered by the &lt;code&gt;STATIC_PATHS&lt;/code&gt; setting.  These are all documented in the &lt;a href="https://docs.getpelican.com/en/latest/settings.html#url-settings"&gt;url settings&lt;/a&gt; section of the Pelican options page.&lt;/p&gt;
&lt;p&gt;The thing to not here is that both the image and pdf files in that structure are separated from their respective articles.  This makes sense if these assets are meant to be accessible from multiple articles and/or pages in the website.  However, if those assets are article specific, then this layout does not make sense.  As more articles are added to this structure it will be harder to track which asset is referred to by which source.&lt;/p&gt;
&lt;h2 id="article-specific-assets"&gt;Article Specific Assets&lt;/h2&gt;
&lt;p&gt;To make things more modular, we keep the assets specific to the article along side the article.  In our above example, this would transform &lt;code&gt;article1&lt;/code&gt; from a file into a folder containing the image, the pdf, and the respective article:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
project/
├── content
│   ├── articles/
│   │   ├── article1/
│   │   │   ├── images/
│   │   │   │   └── pelly.png
│   │   │   ├── pdfs/
│   │   │   │   └── pelly.pdf
│   │   │   └── article.md
│   │   └── article2.md
│   └── pages/
│       └── test.md
└── pelican.conf.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To make this work, we first configure Pelican to generate slug folders instead of individual pages.  We do this easily enough with the following settings into our &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
ARTICLE_PATHS = [
    'articles'
]
ARTICLE_URL = 'articles/{slug}/'
ARTICLE_SAVE_AS = 'articles/{slug}/index.html'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above settings configure Pelican to discover files in the &lt;code&gt;articles&lt;/code&gt; folder, save them as &lt;code&gt;index.html&lt;/code&gt; files in the pages's &lt;code&gt;slug&lt;/code&gt; folder, and update the url to the cleaner folder style.  The &lt;code&gt;slug&lt;/code&gt; value comes from the article's slug &lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;metadata field&lt;/a&gt;, which we set at the top of each article.&lt;/p&gt;
&lt;p&gt;The next part is to configure Pelican to move the assets to a relative folder inside the slug folder instead of the global folder.  This is done by &lt;a href="https://docs.getpelican.com/en/latest/content.html#attaching-static-files"&gt;attaching&lt;/a&gt; the files to the article with the &lt;code&gt;{attach}&lt;/code&gt; keyword inside our &lt;code&gt;article1\article.md&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="tabbed-set" data-tabs="1:2"&gt;&lt;input checked id="__tabbed_1_1" name="__tabbed_1" type="radio"&gt;&lt;label for="__tabbed_1_1"&gt;Markdown&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;h2 id="markdown"&gt;```markdown&lt;/h2&gt;
&lt;p&gt;Title: Test Article
Category: test
Date: 2014-10-31
Slug: article1&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelly.png" src="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/images/pelly.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a link to a &lt;a href="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/pdfs/pelly.pdf"&gt;pdf&lt;/a&gt; files.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/div&gt;
&lt;input id="__tabbed_1_2" name="__tabbed_1" type="radio"&gt;&lt;label for="__tabbed_1_2"&gt;Result&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;p&gt;This is an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelly.png" src="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/images/pelly.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a link to a &lt;a href="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/pdfs/pelly.pdf"&gt;pdf&lt;/a&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just like the &lt;code&gt;{static}&lt;/code&gt; and &lt;code&gt;{filename}&lt;/code&gt; tag, Pelican uses a &lt;code&gt;{attach}&lt;/code&gt; tag to mark the link for special handling.  Here,Pelican will move the asset relative to the referring file instead of the more global location denoted by &lt;code&gt;{static}&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="the-autostatic-plugin"&gt;The AutoStatic Plugin&lt;/h2&gt;
&lt;p&gt;The attach method works well for assets that are directly linked to the article.  This doesn't work for internal assets,like custom css or javascript files.  Those files are not displayed like an image or a download link so there is no way to &lt;code&gt;{attach}&lt;/code&gt; them to the article.&lt;/p&gt;
&lt;p&gt;Fortunately, Alexandre Fonseca's &lt;a href="https://github.com/AlexJF/pelican-autostatic"&gt;autostatic plugin&lt;/a&gt; handles these internal assets quite nicely.  His plugin creates a new &lt;code&gt;{static}&lt;/code&gt; tag that acts the same as the &lt;code&gt;{attach}&lt;/code&gt; tag while also extending it with additional options.&lt;/p&gt;
&lt;p&gt;There's more info in the project's readme, but one nice feature is it ability to read the tag from anywhere in the article -- including the metadata section.  That allows us to lump all of the assets into a single place and removes any non-markdown tag from the actual article.&lt;/p&gt;
&lt;p&gt;Consider our example from above where we used the &lt;code&gt;{attach}&lt;/code&gt; tag in the links to the png and pdf files.  With &lt;code&gt;autostatic&lt;/code&gt; we can restore those links to &lt;em&gt;pure&lt;/em&gt; markdown links and register all local assets in the metadata:&lt;/p&gt;
&lt;div class="tabbed-set" data-tabs="2:2"&gt;&lt;input checked id="__tabbed_2_1" name="__tabbed_2" type="radio"&gt;&lt;label for="__tabbed_2_1"&gt;Markdown&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;h2 id="markdown_1"&gt;```markdown&lt;/h2&gt;
&lt;p&gt;Title: Test Article
Category: test
Date: 2014-10-31
Slug: article1
Attachments:
    - '{static images/pelly3.png}'
    - '{static pdfs/pelly3.pdf}'&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelly2.png" src="images/pelly2.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a link to a &lt;a href="pdfs/pelly2.pdf"&gt;another pdf&lt;/a&gt; files.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/div&gt;
&lt;input id="__tabbed_2_2" name="__tabbed_2" type="radio"&gt;&lt;label for="__tabbed_2_2"&gt;Result&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;p&gt;This is an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelly2.png" src="images/pelly2.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a link to a &lt;a href="pdfs/pelly2.pdf"&gt;another pdf&lt;/a&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There's a few things to note with our example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We created a new metadata field, &lt;code&gt;Attachment&lt;/code&gt;, but that name is arbitrary and it could be called anything, like &lt;code&gt;Files&lt;/code&gt; or even &lt;code&gt;Assets&lt;/code&gt;.  Pelican allows dynamically created metadata fields, as long as it doesn't conflict with &lt;a href="https://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;existing metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The plugin scans the rendered metadata and the rendered html document, processing any &lt;code&gt;{static}&lt;/code&gt; tag defined by the &lt;code&gt;AUTOSTATIC_REFERENCE_PATTERN&lt;/code&gt; regex expression.  Any matching files are copied to the respective location and any references in the metadata or html is replaced with the qualified url, so as along as the file is referenced at least once, it will be copied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The example's YAML has formatted the metadata as a list of strings. This is to work around some YAML processor which might interpret the raw &lt;code&gt;- { .... }&lt;/code&gt; as a list item referencing a mal-formed dictionary. We work around that by escaping the expression as a string &lt;code&gt;- `{ .... }`&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The plugin is a little too greedy with processing the various &lt;code&gt;{static}&lt;/code&gt; tags in the file.  Out of the box, the plugin  will process everything, including any references in code samples -- even through it should be ignored because the content is rendered in a &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; html block.&lt;/p&gt;
&lt;p&gt;To work around that, this site changes the plugin's  &lt;code&gt;AUTOSTATIC_REFERENCE_PATTERN&lt;/code&gt; setting to explicitly use the metadata's single line usage of &lt;code&gt;- '{static ...}'&lt;/code&gt;.  We do this by changing the regex pattern in the &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
AUTOSTATIC_REFERENCE_PATTERN = r"""^- '{static(?:\s+|\|)((?:"|')?)(?P&amp;lt;path&amp;gt;[^\1=]+?)\1(?:(?:\s+|\|)(?P&amp;lt;extra&amp;gt;.*))?\s*}'$"""&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This works because the plugin processes the rendered html as a single block of text and processes each value in the metadata list as single lines that starts with a &lt;code&gt;-&lt;/code&gt; and ends with the &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a little bit of configuration, the &lt;code&gt;autostatic&lt;/code&gt; plugin does a pretty good job of solving our problem.  Not only does the plugin allow us to use article assets in a more relative way, but it also gives us the ability to link all assets as attachments via the metadata section.  Wether intentional or not, this not only make asset management more modular, but also promotes a similar workflow pattern used by other CMS platforms.&lt;/p&gt;
&lt;!-- Disable MD053 below because the linter reports this as invalid -- but it's unclear how the is invalid. --&gt;
&lt;!-- markdownlint-disable-next-line MD053 --&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="pelican"></category></entry><entry><title>Pelican, Markdown, and Front Matter</title><link href="https://dbarsam.github.io/blog/articles/pelican-markdown-and-front-matter/" rel="alternate"></link><published>2021-01-20T14:10:00-05:00</published><updated>2021-01-20T14:10:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-20:/blog/articles/pelican-markdown-and-front-matter/</id><summary type="html">&lt;p&gt;A probably incomplete introduction to managing markdown front matter in a Pelican powered blog.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore deliminators frontmark jekkyl elio struyf contenttype lastmod
--&gt;
&lt;p&gt;A person with a blog should care about front matter -- and an engineer with a blog should care about making caring about front matter as easy as possible.  This article is the start of that caring, where we dive into concept of front matter, see what's options are available for our Pelican blog, and end with an almost satisfactory workflow.&lt;/p&gt;
&lt;h2 id="pelican-markdown-and-front-matter"&gt;Pelican, Markdown, and Front Matter&lt;/h2&gt;
&lt;p&gt;It's a little unclear if there is a standard for blog post metadata.  Pelican has its own set of metadata fields, defined in the &lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;Pelican help&lt;/a&gt;, but they don't necessarily map to what other system are using.  This is a known issue with the Pelican team and you can track that conversation over at &lt;a href="https://github.com/getpelican/pelican/issues/350"&gt;Issue #350&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But even if we move past Pelican's design decision, there is another level of inconsistency.  Most Markdown based websites are coalescing around a YAML based front matter style, largely championed by the Pelican competitors, like &lt;a href="https://jekyllrb.com/docs/front-matter/"&gt;Jekyll&lt;/a&gt; or &lt;a href="https://gohugo.io/content-management/front-matter/"&gt;Hugo&lt;/a&gt;.  But because Markdown is Pelican's secondary language, after reStructured Text, Pelican doesn't support the language natively.  Instead, it defers to the &lt;a href="https://python-markdown.github.io/extensions/meta_data/"&gt;python-markdown&lt;/a&gt; extension, which doesn't quite follow the crowd:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternatively, You may use YAML style deliminators to mark the start and/or end of your meta-data. When doing so, the first line of your document must be ---. The meta-data ends at the first blank line or the first line containing an end deliminator (either &lt;code&gt;---&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt;), whichever comes first. Even though YAML deliminators are supported, meta-data is not parsed as YAML.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So unfortunately, Pelican's current handling of Markdown front matter is limited to a set of Pelican specific keywords and processed by a YAML-light parser.&lt;/p&gt;
&lt;h2 id="the-broken-pelican-front-matter-plugin"&gt;The Broken Pelican Front Matter Plugin&lt;/h2&gt;
&lt;p&gt;Fortunately, Axle H. has developed the &lt;a href="https://github.com/noirbizarre/pelican-frontmark/"&gt;pelican-frontmark&lt;/a&gt; Python library, which is a Pelican plugin that adds the missing YAML support via the &lt;a href="https://pyyaml.org/"&gt;PyYAML&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;Unfortunately, it looks like development on it has stopped.  It's suffering from a deprecation problem, introduced in this &lt;a href="https://github.com/getpelican/pelican/pull/2644#issuecomment-548304256"&gt;pull request&lt;/a&gt; from Pelican.  It was fixed in &lt;a href="https://github.com/noirbizarre/pelican-frontmark/pull/2"&gt;PR #2&lt;/a&gt;, but it has yet to be reviewed and accepted.&lt;/p&gt;
&lt;p&gt;There's another bug in &lt;code&gt;pelican-frontmark&lt;/code&gt;, openly discussed in its &lt;a href="https://github.com/noirbizarre/pelican-frontmark/issues/1"&gt;Issue #1&lt;/a&gt;.  The &lt;a href="https://pyyaml.org/"&gt;PyYAML&lt;/a&gt; parser is too good and automatically converts recognizable text chunks to known Python types before Pelican processes the metadata.  This means that when &lt;code&gt;PyYAML&lt;/code&gt; comes across a date, it will convert the value from text to the Python native &lt;code&gt;datetime&lt;/code&gt; object and store that type.  However Pelican expects &lt;code&gt;str&lt;/code&gt; and not &lt;code&gt;datetime&lt;/code&gt; objects, so you may see the following exception:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
ERROR    Could not process articles\2020-12-20-dummy.md       log.py:96
    an integer is required (got type str)
    Traceback (most recent call last):
        File "....\pelican\generators.py", line 633, in generate_context
            context_sender=self)
        File "....\pelican\readers.py", line 573, in read_file
            content, reader_metadata = reader.read(path)
        File "....\pelican-frontmark\frontmark\reader.py", line 138, in read
            return content, self._parse_metadata(metadata)
        File "....\pelican-frontmark\frontmark\reader.py", line 184, in _parse_metadata
            output[name] = self.process_metadata(name, value)
        File "....\pelican\readers.py", line 124, in process_metadata
            return METADATA_PROCESSORS[name](value, self.settings)
        File "....\pelican\readers.py", line 51, in &amp;lt;lambda&amp;gt;
            'date': lambda x, y: get_date(x.replace('_', ' ')),
        TypeError: an integer is required (got type str)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There is a work around that does not require any code modification.  You need to configure your Pelican system to use &lt;em&gt;unrecognizable&lt;/em&gt; date formats like &lt;code&gt;2020-12-20 10:04&lt;/code&gt; instead of &lt;code&gt;datetime&lt;/code&gt;-parsable ones, like &lt;code&gt;2020-12-20T10:04:07.000Z&lt;/code&gt;.  The &lt;code&gt;PyYAML&lt;/code&gt; parser will simply skip over the unrecognizable dates and leave it as text, which is what Pelican's &lt;code&gt;get_date&lt;/code&gt; function expects.&lt;/p&gt;
&lt;p&gt;However, that work around does not fix the deprecation problem so we're still stuck with a broken plugin.  We could fix the plugin and get YAML style front matter working, but that's a task for another day.&lt;/p&gt;
&lt;h2 id="category-vs-categories"&gt;Category vs Categories&lt;/h2&gt;
&lt;p&gt;Before we move onto something that is actually working, we first need to reconcile the design difference outlined in Pelican's &lt;a href="https://github.com/getpelican/pelican/issues/350"&gt;issue #350&lt;/a&gt;.  To begin, we need to talk about the the three different ways to assign search engine friendly labels to an article:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Keywords&lt;/li&gt;
&lt;li&gt;Categories&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="tags-keywords-categories"&gt;Tags, Keywords, Categories&lt;/h3&gt;
&lt;p&gt;Tags and keywords seem to be used interchangeably depending on which publishing system you're using.&lt;/p&gt;
&lt;p&gt;Traditionally, keywords are words that exist in the content itself, probably in the title or important paragraphs.  They are the shorthand way to describe the article's topic and lend themselves to creating traditional indexes, you know, where all the pages referencing a topic are organized in an listing in the back of a book.&lt;/p&gt;
&lt;p&gt;There's not an equivalent for tags.  Instead, it appears that tags are built from a collection of keywords and are specific to the system displaying the content.  It's easy to get confused when you see the case of tags that only contain single keywords.&lt;/p&gt;
&lt;p&gt;And then there are categories, which seem to operate at a higher level than keywords or tags.  They are more like themes that group one or more articles together.  These articles may have different topics (i.e. keywords and tags), but still be part of a user-defined collection collection.&lt;/p&gt;
&lt;p&gt;Pelican supports multiple tags and keywords, but it only support a single category per article.  This conflicts with other system that support multiple catagories -- or even nested categories.  Again, see Pelican's &lt;a href="https://github.com/getpelican/pelican/issues/350"&gt;Issue #350&lt;/a&gt; for the final word on this.&lt;/p&gt;
&lt;h3 id="front-matter-fields"&gt;Front Matter Fields&lt;/h3&gt;
&lt;p&gt;When it comes to front matter then, most systems prefer the multiple categories stored in the &lt;code&gt;categories&lt;/code&gt; metadata field.  However, Pelican sticks to the single category with the &lt;code&gt;category&lt;/code&gt; metadata field.  This is frustrating to somebody that likes agnostic systems as neither system has been design with that compatibility in mind (well, maybe [Jekkyl]).&lt;/p&gt;
&lt;p&gt;For example, a system processing the &lt;code&gt;category&lt;/code&gt; field will not recognize the equivalent of a single value in the &lt;code&gt;categories&lt;/code&gt; field.  Like wise, a system processing the &lt;code&gt;categories&lt;/code&gt; field will not read in the equivalent 'list of size 1' value from the &lt;code&gt;category&lt;/code&gt; field.  The user is forced to pick a side between camps &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;categories&lt;/code&gt;, which is unfortunate because the content should be free of any platform specific manipulation.  Content that is platform agnostic is open to be processed by other platforms and -- more importantly -- accessed by universal tools that make writing articles easier.&lt;/p&gt;
&lt;h2 id="vscodes-front-matter-extension"&gt;VSCode's 'Front Matter' Extension&lt;/h2&gt;
&lt;p&gt;VSCode is already the daily driver for work so it was a pleasant surprise to find that Elio Struyf and friends have created &lt;a href="https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-front-matter"&gt;Front Matter&lt;/a&gt;, an extension that turns the editor in a content management system.  The extension is in active development and really leverages the plugin framework of Visual Studio Code to deliver a nice user experience.&lt;/p&gt;
&lt;h3 id="pelican-specific-settings"&gt;Pelican Specific Settings&lt;/h3&gt;
&lt;p&gt;In the context of our Pelican blog, the plugin adapts quite well.  We're able to configure Front Matter it for Pelican via the following settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Configure the date format to the expected format:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.taxonomy.dateFormat": "YYYY-MM-DD H:mm",
    ....
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the draft field from the &lt;code&gt;boolean&lt;/code&gt; to a Pelican enum &lt;code&gt;choice&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.content.draftField": {
        "name": "draft",
        "type": "choice",
        "choices": ["draft", "hidden", "published"]
    },
    ....
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify the modified field from &lt;code&gt;lastmod&lt;/code&gt; to &lt;code&gt;modified&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.taxonomy.modifiedField": "modified",
    ....
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the description field from &lt;code&gt;description&lt;/code&gt; to &lt;code&gt;summary&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.taxonomy.seoDescriptionField": "summary",
    ....
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the arrays from YAML lists to comma separated fields:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.taxonomy.commaSeparatedFields": [
        "tags",
        "categories",
        "keywords"
    ],
    ....
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the YAML quoting from all respective fields:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.taxonomy.noPropertyValueQuotes": [
        "tags",
        "categories",
        "modified",
        "date",
        "title"
    ],
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-content-panel"&gt;The Content Panel&lt;/h3&gt;
&lt;p&gt;FrontMatter also provides a new VSCode &lt;a href="https://frontmatter.codes/docs/panel#metadata"&gt;side panel&lt;/a&gt; that acts as a metadata editor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="default-contenttype.png" class="center-image" src="images/front-matter-panel.png"&gt;&lt;/p&gt;
&lt;p&gt;What's great about this, is that it can also be completely customized by specifying the fields in the project's &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The panel can have multiple configurations depending on documentation types.  This Pelican blog only have one type, &lt;code&gt;article&lt;/code&gt;, so we add a new view that matches an article's &lt;code&gt;type&lt;/code&gt; metadata.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    ....
    "frontMatter.taxonomy.contentTypes": [
        {
            "name": "article",
            "fields": [
                {
                    "title": "Title",
                    "name": "title",
                    "type": "string"
                },
                {
                    "title": "Description",
                    "name": "summary",
                    "type": "string"
                },
                {
                    "title": "Publishing date",
                    "name": "date",
                    "type": "datetime"
                },
                {
                    "title": "Last modified date",
                    "name": "modified",
                    "type": "datetime"
                },
                {
                    "title": "Status",
                    "name": "status",
                    "type": "draft"
                },
                {
                    "title": "Tags",
                    "name": "tags",
                    "type": "tags"
                },
                {
                    "title": "Category",
                    "name": "category",
                    "type": "string",
                },
                {
                    "title": "Categories",
                    "name": "categories",
                    "type": "categories",
                },
                {
                    "title": "Header Image",
                    "name": "header_cover",
                    "type": "choice",
                    "choices": [
                        {
                            "id": "/images/article-bg.png",  "title": "Article Header"
                        },
                    ]
                }
            ]
        }
    ]
    ....&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It works great, except for one small hitch.  The extension provides a nice tag selection UI for tags, keywords, and categories, and binds to a &lt;a href="https://frontmatter.codes/docs/content-types#how-it-works"&gt;known type&lt;/a&gt; but it doesn't allow us to remap that type to a different field.&lt;/p&gt;
&lt;p&gt;For example, we can use the Front Matter UI for YAML &lt;code&gt;categories&lt;/code&gt; field but we can't remap it to the Pelican's &lt;code&gt;category&lt;/code&gt; field.  We can do this with other fields, like &lt;code&gt;drafts&lt;/code&gt;, but &lt;code&gt;categories&lt;/code&gt; looks like it is hard coded at this point.  So, as a work around, we specify the Pelican field &lt;code&gt;category&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt; field and keep the &lt;code&gt;categories&lt;/code&gt; field around, well, for fun until a solution is found:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "title": "Category",
    "name": "category",
    "type": "string",
},
{
    "title": "Categories",
    "name": "categories",
    "type": "categories",
},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After jumping through all the hoops, Front Matter is a pretty good extension.  It's pretty powerful too, probably designed for something more complicated than a simple blog.  However, it really nails down the front matter management and is only hampered by an awkward user request to work with an incomplete Markdown implementation provided by Pelican.&lt;/p&gt;</content><category term="about the blog"></category><category term="front matter"></category><category term="markdown"></category><category term="pelican"></category><category term="vscode"></category></entry><entry><title>How this blog centers images</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-centers-images/" rel="alternate"></link><published>2021-01-15T18:45:00-05:00</published><updated>2021-01-15T18:45:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-15:/blog/articles/how-this-blog-centers-images/</id><summary type="html">&lt;p&gt;One of the many ways to center an image with Markdown and CSS in a Pelican blog.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;Here is a common question that has almost an infinite number of answers:  &lt;a href="https://stackoverflow.com/questions/3912694/using-markdown-how-do-i-center-an-image-and-its-caption"&gt;How do I center an image in Markdown&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;The solution (for this blog, at least) comes in two parts:  CSS and Markdown Attributes.&lt;/p&gt;
&lt;h2 id="css-classes"&gt;CSS Classes&lt;/h2&gt;
&lt;p&gt;We skip over any embedded HTML shenanigans and go for the CSS option.  There, we define two new CSS classes.  One will handle images and another one to handle text:&lt;/p&gt;
&lt;p&gt;```css
.center-image
{
    margin: 0 auto;
    display: block;
}&lt;/p&gt;
&lt;p&gt;.center-text
{
    text-align: center;
}
```&lt;/p&gt;
&lt;p&gt;We write them in the site's &lt;code&gt;custom.css&lt;/code&gt; file (&lt;code&gt;extra/css/custom.css&lt;/code&gt;) and we inject that into the current &lt;a href="https://github.com/gilsondev/pelican-clean-blog"&gt;theme&lt;/a&gt; via its &lt;a href="https://github.com/gilsondev/pelican-clean-blog#user-defined-css"&gt;CSS_OVERRIDE&lt;/a&gt; setting:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
CSS_OVERRIDE = 'extra/css/custom.css'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This configuration expose the CSS class names for the Markdown parser to later manipulate.&lt;/p&gt;
&lt;h2 id="attributes"&gt;Attributes&lt;/h2&gt;
&lt;p&gt;With the classes defined, we link them to the Markdown element via attributes.  Attributes are a non-standard feature, provided by Python Markdown's &lt;a href="https://python-markdown.github.io/extensions/attr_list"&gt;attr_list&lt;/a&gt; extension, that makes CSS attributes accessible in Markdown syntax.  Without attributes, we would have to resort to embedding raw HTML in the Markdown files.  But with them, we have a cleaner syntax to add HTML style and class names to the Markdown content.&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;We first install the Python package into Pelican's Python environment:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
pip install markdown&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;And then we enable it in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file, in the &lt;code&gt;MARKDOWN&lt;/code&gt; variable:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="extra-configuration-settings-for-the-markdown-processor"&gt;Extra configuration settings for the Markdown processor.&lt;/h1&gt;
&lt;p&gt;MARKDOWN = {
    "extension_configs": {
        ....
         "markdown.extensions.attr_list": {},
        ....
    },
    'output_format': 'html5'
}
```&lt;/p&gt;
&lt;p&gt;The extension is also bundled with the &lt;a href="https://python-markdown.github.io/extensions/extra/"&gt;extra&lt;/a&gt; extension, so enabling that extension will have the same effect -- but watch out for the conflict if you're also going to use &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/extra/"&gt;PyMdown Extensions&lt;/a&gt;' own version of &lt;code&gt;extra&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="no-attributes"&gt;No Attributes&lt;/h3&gt;
&lt;p&gt;The vanilla version of our content consists of a simple image and paragraph:&lt;/p&gt;
&lt;p&gt;```markdown
&lt;img alt="pelican-logo" src="https://raw.githubusercontent.com/getpelican/pelican-blog/main/content/logo/pelican-logo-small.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a logo.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;And that renders out as this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-logo" src="https://raw.githubusercontent.com/getpelican/pelican-blog/main/content/logo/pelican-logo-small.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a logo.&lt;/p&gt;
&lt;h3 id="centered-attributes"&gt;Centered Attributes&lt;/h3&gt;
&lt;p&gt;We now update the content with our image and text attributes:&lt;/p&gt;
&lt;p&gt;```markdown
&lt;img alt="pelican-logo" class="center-image" src="https://raw.githubusercontent.com/getpelican/pelican-blog/main/content/logo/pelican-logo-small.png"&gt;&lt;/p&gt;
&lt;p class="center-text"&gt;This is a logo.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Note: The &lt;code&gt;{: .center-text}&lt;/code&gt; attribute goes at the end of the element because the text paragraph is a &lt;em&gt;block level element&lt;/em&gt;.  More information is available from the official &lt;a href="https://python-markdown.github.io/extensions/attr_list/#block-level"&gt;Python-Markdown help&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The above renders out as this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-logo" class="center-image" src="https://raw.githubusercontent.com/getpelican/pelican-blog/main/content/logo/pelican-logo-small.png"&gt;&lt;/p&gt;
&lt;p class="center-text"&gt;This is a logo.&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="pelican"></category><category term="python"></category><category term="css"></category><category term="pymdown extensions"></category></entry><entry><title>How this blog styles keyboard keys</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-renders-keyboard-keys/" rel="alternate"></link><published>2021-01-14T17:48:00-05:00</published><updated>2021-01-14T17:48:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-14:/blog/articles/how-this-blog-renders-keyboard-keys/</id><summary type="html">&lt;p&gt;An quick example of one of how this blog uses PyMdown Extensions' 'keys' feature to render keyboard keys&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;One of the features this blog uses from the &lt;a href="https://facelessuser.github.io/pymdown-extensions"&gt;PyMdown Extensions&lt;/a&gt; extension is the &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/keys/"&gt;Keys&lt;/a&gt; option.  That options enables &lt;code&gt;++&lt;/code&gt; as Markdown syntax and converts it to HTML5's &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; html.&lt;/p&gt;
&lt;p&gt;This means that &lt;code&gt;++ctrl+alt+delete++&lt;/code&gt; renders out as &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-alt"&gt;Alt&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-delete"&gt;Del&lt;/kbd&gt;&lt;/span&gt;.  Better information is available on the official &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/keys/"&gt;help&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install the Python package into Pelican's Python environment:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
pip install pymdown-extensions&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Enable it in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file, in the &lt;code&gt;MARKDOWN&lt;/code&gt; variable:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="extra-configuration-settings-for-the-markdown-processor"&gt;Extra configuration settings for the Markdown processor.&lt;/h1&gt;
&lt;p&gt;MARKDOWN = {
    "extension_configs": {
        ....
        'pymdownx.keys' : {},
        ....
    },
    'output_format': 'html5'
}
```&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="pelican"></category><category term="pymdown extensions"></category></entry><entry><title>Set up VSCode to Debug Python in MotionBuilder</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-motionbuilder/" rel="alternate"></link><published>2020-12-22T11:45:00-05:00</published><updated>2020-12-22T11:45:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-22:/blog/articles/python-vscode-motionbuilder/</id><summary type="html">&lt;p&gt;A small tweak to adapt the VSCode auto-attach to work with MotionBuilder&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-11-30-python-vscode-and-max/note.md"&gt;previous series of articles&lt;/a&gt;, we built a quasi auto-attach workflow to debug 3ds Max's Python scripts with VSCode.  We recently tweaked it for Maya and we can easily tweak it again for MotionBuilder.&lt;/p&gt;
&lt;h2 id="updated-launcher"&gt;Updated Launcher&lt;/h2&gt;
&lt;p&gt;Unlike Maya, MotionBuilder provides a native way to launch Python scripts on startup and this makes the workflow easier to migrate from 3ds Max than Maya.  The easiest startup script command is taken directly from the [command line] help:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd
motionbuilder.exe -console -verbosePython script.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With that command line, we can update the &lt;code&gt;launcher.json&lt;/code&gt; file in VSCode accordingly:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "MotionBuilder 2018",
    "type": "cppvsdbg",
    "request": "launch",
    "program": "${env:ProgramW6432}\\Autodesk\\MotionBuilder 2018\\bin\\x64\\motionbuilder.exe",
    "args": [
        "-console",
        "-verbosePython",
        "${workspaceFolder}\\scripts\\bootstrap.py"
    ],
    "stopAtEntry": false,
    "cwd": "",
    "logToFile": true,
    "environment": [
        // PROJECT_SCRIPTS contains a `;` separated list of filenames to run at startup in `bootstrap.py`
        {
            "name": "PROJECT_SCRIPTS",
            "value": "${workspaceRoot}\\.env27\\Scripts\\activate_this.py"
        },
        // PROJECT_DEBUG_PORT / PROJECT_DEBUG_HOST should match 'Remote Attach' below.
        {
            "name": "PROJECT_DEBUG_PORT",
            "value": "5678"
        },
        {
            "name": "PROJECT_DEBUG_HOST",
            "value": "localhost"
        },
        // PROJECT_LOG_LEVEL for the level of `logging` statements
        {
            "name": "PROJECT_LOG_LEVEL",
            "value": "DEBUG"
        },
    ],
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we still need to add the compound job that launches this new companion launch configuration with the generic &lt;code&gt;Python: Remote Attach&lt;/code&gt; auto-attach configuration from the previous article:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "Python MotionBuilder 2018",
    "configurations": [
        "MotionBuilder 2018",
        "Python: Remote Attach"
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="updated-bootstrappy"&gt;Updated &lt;code&gt;bootstrap.py&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;MotionBuilder executes Python scripts &lt;a href="https://forums.autodesk.com/t5/motionbuilder-forum/whats-wrong-with-main/td-p/4254363"&gt;slightly differently&lt;/a&gt; than what is expected.  Instead of executing the file in the scope of &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;main scope&lt;/a&gt; module, the script is executed under the &lt;code&gt;__builtin__&lt;/code&gt; (or &lt;a href="https://docs.python.org/3/library/builtins.html#module-builtins"&gt;builtins&lt;/a&gt; in Python 3) module.&lt;/p&gt;
&lt;p&gt;We can easily fix this by updating the &lt;code&gt;bootstrap.py&lt;/code&gt; script to accept a collection of scopes using a simple tuple:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;p&gt;....&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; in ("&lt;strong&gt;main&lt;/strong&gt;", "&lt;strong&gt;builtin&lt;/strong&gt;", "builtins")
    main()
```&lt;/p&gt;
&lt;p&gt;Like Maya and 3ds Max, we're still following the same model of grafting a side-car environment via the &lt;code&gt;bootstrap.py&lt;/code&gt;.  The only difference is a slight tweak needed to handle the peculiarities of MotionBuilder's embedded Python environment.&lt;/p&gt;</content><category term="developer set-up"></category><category term="python"></category><category term="motionbuilder"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in Maya</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-maya/" rel="alternate"></link><published>2020-12-20T10:04:00-05:00</published><updated>2020-12-20T10:04:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-20:/blog/articles/python-vscode-maya/</id><summary type="html">&lt;p&gt;A small tweak to adapt the VSCode auto-attach to work with Maya&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-11-30-python-vscode-and-max/note.md"&gt;previous series of articles&lt;/a&gt;, we built a quasi auto-attach workflow to debug 3ds Max's Python scripts with VSCode.  Fortunately, that workflow was general enough that trying to apply that to Maya only requires some slight tweaking.&lt;/p&gt;
&lt;h2 id="bootstrapmel"&gt;&lt;code&gt;bootstrap.mel&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The Maya &lt;a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=GUID-2E5D1D43-DC3D-4CB2-9A35-757598220F22"&gt;command line&lt;/a&gt; interface does not expose any way to execute a Python script.  However, it does accept &lt;a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=GUID-60178D44-9990-45B4-8B43-9429D54DF70E"&gt;Mel Scripts&lt;/a&gt; and we can easily create a &lt;code&gt;bootstrap.mel&lt;/code&gt; instead.  Since our goal is to keep the work centralized in the &lt;code&gt;bootstrap.py&lt;/code&gt; script, the resulting MEL script simply executes that file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mel
// Execute the Python bootstrap script
string $python_env = getenv("PROJECT_MAYA_PYTHON_SCRIPT");
string $python_files[] = stringToStringArray($python_env, ";");
for( $python_file in $python_files )
{
    string $filename = fromNativePath($python_file);
    print("Executing " + $filename + " python file\n");
    python("exec(open('" + $filename + "').read())");
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We follow the same model as before and use environment variables to pass parameters into the process.  We use the new &lt;code&gt;PROJECT_MAYA_PYTHON_SCRIPT&lt;/code&gt; environment variable to contain a list of &lt;code&gt;;&lt;/code&gt; separated python files that the MEL script will execute using MEL script's &lt;code&gt;python&lt;/code&gt; command.&lt;/p&gt;
&lt;h2 id="updated-launcher"&gt;Updated Launcher&lt;/h2&gt;
&lt;p&gt;We need to update the &lt;code&gt;launcher.json&lt;/code&gt; file in VSCode to account for the new executable, command line, and our environment variable:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "Maya 2018",
    "type": "cppvsdbg",
    "request": "launch",
    "program": "${env:ProgramW6432}\\Autodesk\\Maya2018\\bin\\maya.exe",
    "args": [
        "-script",
        "${workspaceFolder}\\scripts\\bootstrap.mel"
    ],
    "stopAtEntry": false,
    "cwd": "",
    "environment": [
        // PROJECT_SCRIPTS contains a `;` separated list of filenames to run at startup in `bootstrap.py`
        {
            "name": "PROJECT_SCRIPTS",
            "value": "${workspaceRoot}\\.env27\\Scripts\\activate_this.py"
        },
        // PROJECT_DEBUG_PORT / PROJECT_DEBUG_HOST should match 'Remote Attach' below.
        {
            "name": "PROJECT_DEBUG_PORT",
            "value": "5678"
        },
        {
            "name": "PROJECT_DEBUG_HOST",
            "value": "localhost"
        },
        // PROJECT_LOG_LEVEL for the level of `logging` statements
        {
            "name": "PROJECT_LOG_LEVEL",
            "value": "DEBUG"
        },
        // PROJECT_MAYA_PYTHON_SCRIPT contains a `;` separated list of filenames to run at startup in `bootstrap.mel`
        {
            "name": "PROJECT_MAYA_PYTHON_SCRIPT",
            "value": "${workspaceFolder}\\scripts\\bootstrap.py"
        }
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we still need to add the compound job that launches this new companion launch configuration with the generic &lt;code&gt;Python: Remote Attach&lt;/code&gt; auto-attach configuration from the previous article:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "Python Maya 2018",
    "configurations": [
        "Maya 2018",
        "Python: Remote Attach"
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We're still following the same workflow from our previous 3ds Max example.  The only real difference with Maya is the addition of a &lt;code&gt;bootstrap.mel&lt;/code&gt;, which is only needed as a workaround to Maya's command line interface.&lt;/p&gt;</content><category term="developer set-up"></category><category term="python"></category><category term="maya"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in 3ds Max - V</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-max-5/" rel="alternate"></link><published>2020-12-09T21:02:00-05:00</published><updated>2020-12-09T21:02:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-09:/blog/articles/python-vscode-max-5/</id><summary type="html">&lt;p&gt;Part V&amp;#58; A slight tweak to get us an VSCode auto-attach configuration&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-12-07-python-vscode-and-max-4/note.md"&gt;previous article&lt;/a&gt;, we established an auto-attach workflow with VSCode that was based on a passive sleep delay.  Now we'll refine that process by using the same network strategy used by the remote debugger.&lt;/p&gt;
&lt;h2 id="preliminary-connection"&gt;Preliminary Connection&lt;/h2&gt;
&lt;p&gt;The current solution synchronizes VSCode and &lt;code&gt;ptvsd&lt;/code&gt; by making VSCode sleep before it attempts the connection.  VSCode doesn't provide a native delay so we take advantage of the &lt;code&gt;preLaunchTask&lt;/code&gt; attribute to sleep using a local command.  Otherwise the &lt;code&gt;attach&lt;/code&gt; configuration will timeout because of a misalignment of VSCode's and &lt;code&gt;ptvsd&lt;/code&gt; connection requests.  The sleep works around the misalignment, but it's an adhoc synchronization that needs to be tuned to for each environment.&lt;/p&gt;
&lt;p&gt;Instead, we can replace that passive sleep with a more active, on-demand, pre-connect network handshake.  The remote debugging workflow already synchronizes VSCode and &lt;code&gt;ptvsd&lt;/code&gt; with a network connection in the original &lt;code&gt;wait_and_attach&lt;/code&gt; call.  Our plan duplicates that same approach and uses another connection request as a waiting mechanism.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;preliminary&lt;/em&gt; connection is a very simple &lt;a href="https://docs.python.org/3/howto/sockets.html"&gt;socket&lt;/a&gt; connection.  The server socket waits for a connection and the client socket repeatedly makes connection requests until it succeeds.  After the connection has been established, we can assumed some level of synchronization between the server and client and simply close the connection.  The execution continues and, shortly afterwards, VSCode makes the &lt;em&gt;real&lt;/em&gt; connection to &lt;code&gt;ptvsd&lt;/code&gt; the same as before.&lt;/p&gt;
&lt;h2 id="the-listen-socket"&gt;The 'Listen' Socket&lt;/h2&gt;
&lt;p&gt;We wrap the server socket logic into a &lt;code&gt;_listen&lt;/code&gt; function with host and port parameters.&lt;/p&gt;
&lt;p&gt;```python
import logging
import socket
import time&lt;/p&gt;
&lt;p&gt;def _listen(host, port):
    """Launches a very simple server socket on &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; to wait for a socket connection&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ss.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    ss.settimeout(60)
    ss.bind((host, port))
    ss.listen(1)&lt;/p&gt;
&lt;p&gt;logger.debug("Listening on %s:%s", host, port)
    cs, _ = ss.accept()
    logger.debug("Connected to %s:%s", host, port)&lt;/p&gt;
&lt;p&gt;cs.close()
    ss.close()
    time.sleep(1)
```&lt;/p&gt;
&lt;p&gt;There are a few things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The main part of this function is the &lt;code&gt;socket.accept&lt;/code&gt; function, which will wait for the incoming connection from our client socket.  Everything else is just setting up socket to manage the connection as cleaning as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We're using the same host and port in both the preliminary and real connections so we also enable the &lt;code&gt;socket.SO_REUSEADDR&lt;/code&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After we close the connection, we &lt;code&gt;time.sleep&lt;/code&gt; for an additional 1 second.  This is a basic safety measure taken so that the system can close the socket.  Otherwise the socket may remains in a &lt;code&gt;TIME_WAIT&lt;/code&gt; state that prevents its re-use by the same host, which is what we want to do later on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-connect-socket"&gt;The 'Connect' Socket&lt;/h2&gt;
&lt;p&gt;We wrap the request logic into a &lt;code&gt;_connect&lt;/code&gt; function with a pair of host and port parameters:&lt;/p&gt;
&lt;p&gt;```python
import logging
import socket
import time&lt;/p&gt;
&lt;p&gt;def _connect(host, port):
    """Launches a very simple client socket on &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; to repeatedly try a connection.&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR , 1)
    s.settimeout(60)
    connected = False
    while not connected:
        logger.debug("Polling %s:%s for connection.", host, port)
        try:
            s.connect((host, port))
            connected = True
        except Exception:
            time.sleep(1)
    s.close()
    time.sleep(1)
    logger.debug("Connected to %s:%s", host, port)&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Unlike the listen function, the client socket has no blocking &lt;code&gt;accept&lt;/code&gt; function.  Instead we enter into a perpetual loop where we repeatedly connect to the host and port.  If the connection fails, it will raise an exception which we handle by sleeping a little bit and then trying again.  However, if the connection is successful then it sets the connected flag to &lt;code&gt;True&lt;/code&gt; and exits the loop.&lt;/p&gt;
&lt;p&gt;After we've exited the loop, we close the socket and sleep for one more time to allow the socket to move from &lt;code&gt;TIME_WAIT&lt;/code&gt; to the proper closed state.&lt;/p&gt;
&lt;h2 id="connect-then-wait-for-attach"&gt;Connect then Wait For Attach&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;_connect&lt;/code&gt; function is added to the same &lt;code&gt;bootstrap.py&lt;/code&gt; file that we've been using and specifically to the &lt;code&gt;_attach&lt;/code&gt; function. Inside that function, the &lt;code&gt;_connect&lt;/code&gt; is called before we run &lt;code&gt;ptvsd.wait_for_attach()&lt;/code&gt;.  We use the same host and port for both the preliminary and real connections, which we can do because we're careful with closing the socket connection after using it for the first time.&lt;/p&gt;
&lt;p&gt;```python
def _attach(host, port):
    """Attaches to a remote debugger on a host and port&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    try:
        import ptvsd
    except ImportError:
        logger.exception("Could not import module &lt;code&gt;ptvsd&lt;/code&gt;.  Is installed?")
        return&lt;/p&gt;
&lt;p&gt;logger.info("Notifying IDE for auto-attach on %s:%s", host, port)
    _connect(host, port)&lt;/p&gt;
&lt;p&gt;logger.info("Waiting for debug client to connect on %s:%s", host, port)
    ptvsd.enable_attach(address=(host, port), redirect_output=True)
    ptvsd.wait_for_attach()
```&lt;/p&gt;
&lt;p&gt;Because the call to &lt;code&gt;ptvsd&lt;/code&gt; is part of the application's start-up sequence we don't know exactly when it will be called.  The new &lt;code&gt;_connect&lt;/code&gt; function loops until it makes connection to the respective &lt;code&gt;_listen&lt;/code&gt; function called by the &lt;code&gt;preTaskFunction&lt;/code&gt; attribute.  Since this function is part of the application's startup sequence, chances are the &lt;code&gt;listen&lt;/code&gt; will be already waiting and the initial &lt;code&gt;connect&lt;/code&gt; function will be the only connection attempted.&lt;/p&gt;
&lt;h2 id="listen-script"&gt;Listen Script&lt;/h2&gt;
&lt;p&gt;Because we've added &lt;code&gt;_connect&lt;/code&gt; to the bootstrap script, we keep things self contained and also add the &lt;code&gt;_listen&lt;/code&gt; function to the script.  However, that means that we need to update the main entry point to have two modes:  One for the new Python &lt;code&gt;attach&lt;/code&gt; configuration and one for the current C++ &lt;code&gt;launch&lt;/code&gt; configuration.&lt;/p&gt;
&lt;p&gt;```python
import logging
import os
import socket
import time&lt;/p&gt;
&lt;p&gt;def main():
    """Main entry point for the bootstrap script"""&lt;/p&gt;
&lt;p&gt;debug_port = os.getenv("PROJECT_DEBUG_PORT", "")
    debug_host = os.getenv("PROJECT_DEBUG_HOST", "")
    debug_attach = os.getenv("PROJECT_AUTOATTACH", "")
    scripts = os.getenv("PROJECT_SCRIPTS", "").split(";")
    log_level = os.getenv("PROJECT_LOG_LEVEL", logging.DEBUG)&lt;/p&gt;
&lt;p&gt;logging.basicConfig(level=log_level, format="%(message)s")
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.info("Python Bootstrap script - start -")
    logger.info('Initialized logging to "%s"', log_level)&lt;/p&gt;
&lt;p&gt;if debug_attach:
        _listen(debug_host, int(debug_port))
    else:
        if scripts:
            _exec(scripts)
        else:
            logger.warning("Could not find variable PROJECT_SCRIPTS does not exist or is empty.  Skipping script execution.")&lt;/p&gt;
&lt;p&gt;if debug_port and debug_host:
            _attach(debug_host, int(debug_port))
        else:
            logger.warning("Environment variable PROJECT_DEBUG_HOST/PROJECT_DEBUG_PORT do not exist or are empty.  Python debugging disabled.")&lt;/p&gt;
&lt;p&gt;logger.info("Python Bootstrap script - stop -")&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()
```&lt;/p&gt;
&lt;p&gt;We've updated the bootstrap script with a new parameter: &lt;code&gt;PROJECT_AUTOATTACH&lt;/code&gt;.  If that value exists, the logic goes straight into the &lt;code&gt;_listen&lt;/code&gt; function, where it will call the &lt;code&gt;socket.accept()&lt;/code&gt; and wait for the first connection request.  However, if that variable doesn't exist, then the logic goes through the same logic as before.&lt;/p&gt;
&lt;p&gt;We could have created a second script to handle this new mode implementation instead of putting it into our existing &lt;code&gt;bootstrap.py&lt;/code&gt; script.  That's perfectly valid and would be strictly adhering to the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;, but because we're putting the mode toggle on the module instead of the module's functions, it's less egregious and somewhat acceptable -- especially give how small our &lt;code&gt;bootstrap.py&lt;/code&gt; still is.&lt;/p&gt;
&lt;h2 id="the-auto-attach-task"&gt;The Auto-Attach Task&lt;/h2&gt;
&lt;p&gt;With our &lt;code&gt;bootstrap.py&lt;/code&gt; modified, we can now create a new VSCode task to replace the &lt;code&gt;sleep&lt;/code&gt; task.  Because we've engineered this auto-attach with Python, we swap out the &lt;code&gt;COMSPEC&lt;/code&gt; process with the local &lt;code&gt;python.exe&lt;/code&gt; from our virtual environment and use that to call our &lt;code&gt;bootstrap.py&lt;/code&gt; file.  We toggle the mode with by defining a &lt;code&gt;PROJECT_AUTOATTACH&lt;/code&gt; and specify the &lt;code&gt;PROJECT_DEBUG_PORT&lt;/code&gt; and &lt;code&gt;PROJECT_DEBUG_HOST&lt;/code&gt; which will be passed onto the &lt;code&gt;_listen&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "label": "auto-attach",
    "type": "process",
    "command": "${workspaceFolder}\\.env27\\Scripts\\python.exe",
    "args": [
        "${workspaceFolder}\\scripts\\bootstrap.py",
    ],
    "options": {
        "env": {
            "PROJECT_DEBUG_PORT": "5678",
            "PROJECT_DEBUG_HOST": "localhost",
            "PROJECT_AUTOATTACH": "1"
        }
    },
    "group": "none",
    "presentation": {
        "reveal": "never",
        "showReuseMessage": false
    }
},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And change the &lt;code&gt;attach&lt;/code&gt; configuration's &lt;code&gt;preLaunchTask&lt;/code&gt; value from &lt;code&gt;sleep&lt;/code&gt; to &lt;code&gt;auto-attach&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "Python: Remote Attach",
    "type": "python",
    "request": "attach",
    "justMyCode": true,
    "processName": "3dsmax.exe",
    "host": "localhost",
    "port": 5678,
    "pathMappings": [
        {
            "localRoot": "${workspaceFolder}",
            "remoteRoot": "${workspaceFolder}"
        }
    ],
    "preLaunchTask": "auto-attach",
},&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="auto-attach-vs-sleep"&gt;Auto-Attach vs Sleep&lt;/h2&gt;
&lt;p&gt;This socket auto-attach task is a refinement that makes the overall workflow more flexible in exchange for a more complicated workflow.&lt;/p&gt;
&lt;p&gt;The choice to use it will matter on the complexity of the project.  For example, if the project is accessed by multiple people, across different environments, then the sleep value is a developer specific personal choice, one that will most likely be tuned and re-tuned. Values that are personal choices should not be checked into source control.  Otherwise, the project will have a (hopefully, cordial) fight between developers that will result in a series of meaningless back-and-forth commits or a weird ignore rule.&lt;/p&gt;
&lt;p&gt;The socket auto-attach adds a little bit of engineering for an adaptable sleep that's great for that kind of situation.  However, if the project is less complex, like a script written by one person, then the sleep attach is probably good enough.&lt;/p&gt;
&lt;h2 id="the-final-hodge-podge-solution"&gt;The Final Hodge Podge Solution&lt;/h2&gt;
&lt;p&gt;Finally, we now have a collection of components, assembled into something resembling a seamless debugging workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a fresh virtual environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the project as an editable package into that virtual environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a startup script for the application that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Grafts the virtual environment onto the application's Python installation with the &lt;code&gt;activate_this.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configures the Python logging as needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invokes &lt;code&gt;ptvsd&lt;/code&gt;'s attach functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure a VSCode C++ &lt;code&gt;launch&lt;/code&gt; configuration that runs the application with the start-up script without changing any global application state (e.g. use the application's command line).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure a VSCode Python &lt;code&gt;attach&lt;/code&gt; configuration that attaches to the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;sleep&lt;/code&gt; / &lt;code&gt;auto-attach&lt;/code&gt; task for the &lt;code&gt;attach&lt;/code&gt;'s &lt;code&gt;preLaunchTask&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a compound configuration that launches both the &lt;code&gt;launch&lt;/code&gt; and the &lt;code&gt;auto-attach&lt;/code&gt; configuration at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This infrastructure yields a quasi &lt;code&gt;auto-attach&lt;/code&gt; workflow that delivers a equivalent &lt;code&gt;launch&lt;/code&gt; experience with the ++F5++ key.&lt;/p&gt;
&lt;h3 id="the-final-bootstrappy-file"&gt;The final &lt;code&gt;bootstrap.py&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;```python
"""
Standalone script to attach to a remote debugging.&lt;/p&gt;
&lt;p&gt;The script will inject various sites and execute startup files in
order to set-up the Python environment for development.&lt;/p&gt;
&lt;p&gt;In addition the script will also use &lt;code&gt;ptvsd&lt;/code&gt; to remotely attach to
a remote debugger to the current process.  In some applications this
is the only way to debug Python code.&lt;/p&gt;
&lt;p&gt;This script expects the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_SCRIPTS&lt;/code&gt; A semi-colon separated list of files to execute with
  &lt;code&gt;exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_DEBUG_HOST&lt;/code&gt; The host name of the remote debugger to attach to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_DEBUG_PORT&lt;/code&gt; The port number of the remote debugger to attach to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_LOG_LEVEL&lt;/code&gt; The initial logging level this script will use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_AUTOATTACH&lt;/code&gt; Flag to toggle auto-attach mode.  Enable when used pre-launch task.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. note::&lt;/p&gt;
&lt;p&gt;This script does not install ptvsd and expects the module to be already installed,
    or installed during the site injection or exec execution step.&lt;/p&gt;
&lt;p&gt;"""
import logging
import os
import socket
import time
import sys&lt;/p&gt;
&lt;p&gt;def _connect(host, port):
    """Launches a very simple client socket on &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; to repeatedly try a connection.&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR , 1)
    s.settimeout(60)
    connected = False
    while not connected:
        logger.debug("Polling %s:%s for connection.", host, port)
        try:
            s.connect((host, port))
            connected = True
        except Exception:
            time.sleep(1)
    s.close()
    time.sleep(1)
    logger.debug("Connected to %s:%s", host, port)&lt;/p&gt;
&lt;p&gt;def _listen(host, port):
    """Launches a very simple server socket on &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; to wait for a socket connection&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ss.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    ss.settimeout(60)
    ss.bind((host, port))
    ss.listen(1)&lt;/p&gt;
&lt;p&gt;logger.debug("Listening on %s:%s", host, port)
    cs, _ = ss.accept()
    logger.debug("Connected to %s:%s", host, port)&lt;/p&gt;
&lt;p&gt;cs.close()
    ss.close()
    time.sleep(1)&lt;/p&gt;
&lt;p&gt;def _exec(filenames):
    """Execute a collection of Python files in the current environment&lt;/p&gt;
&lt;p&gt;Args:
        scripts (list): A list of filename.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;script_paths = [sf for sf in filenames if os.path.exists(sf)]
    if not script_paths:
        logger.warning("User provided not scripts to execute.  Skipping script execution.")&lt;/p&gt;
&lt;p&gt;for script_path in script_paths:
        logger.info("Executing Script: %s", script_path)
        with open(script_path) as f:
            contents = f.read()
        try:
            exec(contents, {"&lt;strong&gt;file&lt;/strong&gt;": script_path})
        except Exception as e:
            logger.exception("   ! %s failed to execute", script_path)&lt;/p&gt;
&lt;p&gt;def _attach(host, port):
    """Attaches to a remote debugger on a host and port&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    try:
        import ptvsd
    except ImportError:
        logger.exception("Could not import module &lt;code&gt;ptvsd&lt;/code&gt;.  Is installed?")
        return&lt;/p&gt;
&lt;p&gt;logger.info("Notifying IDE for auto-attach on %s:%s", host, port)
    _connect(host, port)&lt;/p&gt;
&lt;p&gt;logger.info("Waiting for debug client to connect on %s:%s", host, port)
    ptvsd.enable_attach(address=(host, port), redirect_output=True)
    ptvsd.wait_for_attach()&lt;/p&gt;
&lt;p&gt;def main():
    """Main entry point for the bootstrap script"""&lt;/p&gt;
&lt;p&gt;debug_port = os.getenv("PROJECT_DEBUG_PORT", "")
    debug_host = os.getenv("PROJECT_DEBUG_HOST", "")
    debug_attach = os.getenv("PROJECT_AUTOATTACH", "")
    scripts = os.getenv("PROJECT_SCRIPTS", "").split(";")
    log_level = os.getenv("PROJECT_LOG_LEVEL", logging.DEBUG)&lt;/p&gt;
&lt;p&gt;logging.basicConfig(level=log_level, format="%(message)s")
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.info("Python Bootstrap script - start -")
    logger.info('Initialized logging to "%s"', log_level)&lt;/p&gt;
&lt;p&gt;if debug_attach:
        _listen(debug_host, int(debug_port))
    else:
        if scripts:
            _exec(scripts)
        else:
            logger.warning("Could not find variable PROJECT_SCRIPTS does not exist or is empty.  Skipping script execution.")&lt;/p&gt;
&lt;p&gt;if debug_port and debug_host:
            _attach(debug_host, int(debug_port))
        else:
            logger.warning("Environment variable PROJECT_DEBUG_HOST/PROJECT_DEBUG_PORT do not exist or are empty.  Python debugging disabled.")&lt;/p&gt;
&lt;p&gt;logger.info("Python Bootstrap script - stop -")&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()
```&lt;/p&gt;
&lt;h3 id="the-final-launchjson-file"&gt;The final &lt;code&gt;launch.json&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;json
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Max 2018",
            "type": "cppvsdbg",
            "request": "launch",
            "program": "${env:ProgramW6432}\\Autodesk\\3ds Max 2018\\3dsmax.exe",
            "args": [
                "-U",
                "PythonHost",
                "${workspaceFolder}\\scripts\\bootstrap.py"
            ],
            "stopAtEntry": false,
            "cwd": "",
            "environment": [
                // Ensure that 3ds Max is ahead of any other Qt based application.
                {
                    "name": "PATH",
                    "value": "C:\\Program Files\\Autodesk\\3ds Max 2018;${env:PATH}"
                },
                // PROJECT_SCRIPTS contains a `;` separated list of filenames to run at startup
                {
                    "name": "PROJECT_SCRIPTS",
                    "value": "${workspaceRoot}\\.env27\\Scripts\\activate_this.py"
                },
                // PROJECT_DEBUG_PORT / PROJECT_DEBUG_HOST should match 'Remote Attach' below.
                {
                    "name": "PROJECT_DEBUG_PORT",
                    "value": "5678"
                },
                {
                    "name": "PROJECT_DEBUG_HOST",
                    "value": "localhost"
                },
                // PROJECT_LOG_LEVEL for the level of `logging` statements
                {
                    "name": "PROJECT_LOG_LEVEL",
                    "value": "DEBUG"
                }
            ]
        },
        {
            "name": "Python: Remote Attach",
            "type": "python",
            "request": "attach",
            "justMyCode": true,
            "host": "localhost",
            "port": 5678,
            "pathMappings": [
                {
                    "localRoot": "${workspaceFolder}",
                    "remoteRoot": "${workspaceFolder}"
                }
            ],
            "preLaunchTask": "auto-attach"
        }
    ],
    "compounds": [
        {
            "name": "Python Max 2018",
            "configurations": [
                "Max 2018",
                "Python: Remote Attach"
            ]
        }
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="the-final-tasksjson-file"&gt;The final &lt;code&gt;tasks.json&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;json
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [{
            "label": "sleep",
            "type": "process",
            "command": "${env:COMSPEC}",
            "args": [
                "/c",
                "timeout",
                "/t",
                "30",
                "/nobreak"
            ],
            "group": "none",
            "presentation": {
                "reveal": "never",
                "showReuseMessage": false
            }
        },
        {
            "label": "auto-attach",
            "type": "process",
            "command": "${workspaceFolder}\\.env27\\Scripts\\python.exe",
            "args": [
                "${workspaceFolder}\\.vscode\\bootstrap.py"
            ],
            "options": {
                "env": {
                    "PROJECT_DEBUG_PORT": "5678",
                    "PROJECT_DEBUG_HOST": "localhost",
                    "PROJECT_AUTOATTACH": "1"
                }
            },
            "group": "none",
            "presentation": {
                "reveal": "never",
                "showReuseMessage": false
            }
        }
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="potential-next-steps"&gt;Potential Next Steps&lt;/h2&gt;
&lt;p&gt;This has been a particularly exhaustive tour of a rather specific Python development workflow.  We could go on as there's always room for improvements or slight tweaks.&lt;/p&gt;
&lt;h3 id="pythonpath"&gt;PYTHONPATH&lt;/h3&gt;
&lt;p&gt;If you're working on a single Python script with no external package, you could skip the grafting and just configuration the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable to include your Python script.&lt;/p&gt;
&lt;h3 id="pip-virtualenv-alternatives"&gt;&lt;code&gt;pip&lt;/code&gt; / &lt;code&gt;virtualenv&lt;/code&gt; alternatives&lt;/h3&gt;
&lt;p&gt;We chose &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; as they were the default Python development tools.  There's nothing preventing the project from taking advantage of the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable and use a &lt;code&gt;vendor&lt;/code&gt; folder or some other manual process to create an equivalent &lt;code&gt;site-packages&lt;/code&gt; folder.  Just be sure to include &lt;code&gt;ptvsd&lt;/code&gt; in your solution.&lt;/p&gt;
&lt;h3 id="ptvsd-vs-debugpy"&gt;&lt;code&gt;ptvsd&lt;/code&gt; vs &lt;code&gt;debugpy&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;It has to be noted that &lt;code&gt;ptvsd&lt;/code&gt; has been deprecated in favour of the newer &lt;a href="https://pypi.org/project/debugpy/"&gt;debugpy&lt;/a&gt;.  This tutorial did not make that switch because it's a swap-able component and, embarrassingly enough, it didn't work right out of the box.  Follow &lt;code&gt;debugpy&lt;/code&gt;'s &lt;a href="https://github.com/microsoft/debugpy/issues/262]"&gt;#262&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3 id="scalability"&gt;Scalability&lt;/h3&gt;
&lt;p&gt;This set-up seems like a tediously manual process.  That's not wrong, but it was done that way to learn about the process instead of providing a readily available solution.  There are definitely ways to streamline the process if you need this for multiple projects. For instance, it could be incorporated into a project template, like a &lt;a href="https://cookiecutter.readthedocs.io/"&gt;cookiecutter&lt;/a&gt;, or made into an VSCode extension.&lt;/p&gt;
&lt;h3 id="other-vscode-plugins"&gt;Other VSCode plugins&lt;/h3&gt;
&lt;p&gt;While our example used 3ds Max, it should be general enough to adapt to another application.  These are already extensions out there solving similar problems, most notably &lt;a href="https://marketplace.visualstudio.com/items?itemName=JacquesLucke.blender-development"&gt;Blender Development&lt;/a&gt; for Blender, &lt;a href="https://marketplace.visualstudio.com/items?itemName=saviof.mayacode"&gt;MayaCode&lt;/a&gt; for Maya, and the more general &lt;a href="https://marketplace.visualstudio.com/items?itemName=benjamin-simmonds.pythoncpp-debug"&gt;Python C++ Debugger&lt;/a&gt;.  In fact, a quick survey suggests that Blender and Maya are the hot topics these days.  See &lt;a href="https://github.com/Barbarbarbarian/Blender-VScode-Debugger"&gt;Blender-VSCode-Debugger&lt;/a&gt;, &lt;a href="https://github.com/AlansCodeLog/blender-debugger-for-vscode"&gt;Blender Debugger for VS Code (and Visual Studio)&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=FXTD-Odyssey.mayapy"&gt;MayaPy&lt;/a&gt;, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=JonMacey.mayaport"&gt;MayaPort&lt;/a&gt; extensions and the vast collection &lt;a href="https://googlethatforyou.com?q=vscode%20blender%20tutorial"&gt;How To VSCode and Blender&lt;/a&gt; and &lt;a href="https://googlethatforyou.com?q=vscode%20maya%20tutorial"&gt;How To VSCode and Maya&lt;/a&gt; tutorials for more examples.&lt;/p&gt;
&lt;h3 id="pycharm"&gt;PyCharm?&lt;/h3&gt;
&lt;p&gt;We do see you &lt;a href="https://knowledge.autodesk.com/support/3ds-max/troubleshooting/caas/screencast/Main/Details/34ab44e0-5702-473e-850c-a6b7a86b45f2.html"&gt;PyCharm&lt;/a&gt;. Maybe next time.&lt;/p&gt;</content><category term="developer set-up"></category><category term="3ds max"></category><category term="python"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in 3ds Max - IV</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-max-4/" rel="alternate"></link><published>2020-12-07T21:08:00-05:00</published><updated>2020-12-07T21:08:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-07:/blog/articles/python-vscode-max-4/</id><summary type="html">&lt;p&gt;Part IV&amp;#58; VSCode's compound launch configuration'&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore cppvsdg
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-12-05-python-vscode-and-max-3/note.md"&gt;previous article&lt;/a&gt;, we successful created a debugging session from connecting various pieces of our infrastructure.  We created a Python virtual environment via &lt;code&gt;virtualenv&lt;/code&gt;, built a &lt;code&gt;bootstrap.py&lt;/code&gt; to graft it into the application, executed &lt;code&gt;ptvsd&lt;/code&gt; at startup, and successfully made the whole contraption work, via VSCode's &lt;code&gt;Attach to Process&lt;/code&gt; remote debugging configuration. In this article, we'll look up at couple of tweaks to automate that manual process.&lt;/p&gt;
&lt;h2 id="attach-vs-launch"&gt;Attach vs Launch&lt;/h2&gt;
&lt;p&gt;VSCode has two main workflows for debugging: &lt;code&gt;launch&lt;/code&gt; and &lt;code&gt;attach&lt;/code&gt;.  While we want to use the &lt;code&gt;launch&lt;/code&gt; configuration, it requires a very specific set up that needs to point to a &lt;code&gt;python.exe&lt;/code&gt; (or equivalent).  That doesn't work in our case because the Python interpreter is buried inside a Windows application.  So we're left with an &lt;code&gt;attach&lt;/code&gt; workflow where we manually launch the application, switch to VSCode and execute the &lt;code&gt;attach&lt;/code&gt; configuration.&lt;/p&gt;
&lt;p&gt;While this launch-and-attach workflow does its job, it can become tedious after a while -- especially if unhandled exceptions or crashes destabilizes the application so much that the only recourse is to restart the session.  There is, however, some automation tricks that we can incorporate to our current set-up that could remove that friction and make the &lt;code&gt;attach&lt;/code&gt; into a &lt;code&gt;auto-attach&lt;/code&gt; configuration.&lt;/p&gt;
&lt;h2 id="companion-launch-configuration"&gt;Companion Launch Configuration&lt;/h2&gt;
&lt;p&gt;The first trick is to create a &lt;code&gt;launch&lt;/code&gt; configuration, but not for Python.  Instead we're going to create a &lt;em&gt;companion&lt;/em&gt; launch configuration for our application, which should use a debugger native to the application.&lt;/p&gt;
&lt;p&gt;Since we're targeting Windows &lt;code&gt;exe&lt;/code&gt; files, we configure the new configuration with the [cppvsdg] debugger (from VSCode's &lt;a href="https://code.visualstudio.com/docs/cpp/launch-json-reference"&gt;C/C++ debugging&lt;/a&gt; documentation) and include all the settings from our &lt;code&gt;launch.cmd&lt;/code&gt; script.  Thankfully, this is pretty straight forward:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "3ds Max 2018",
    "type": "cppvsdbg",
    "request": "launch",
    "program": "C:\\Program Files\\Autodesk\\3ds Max 2018\\3dsmax.exe",
    "args": [
        "-U",
        "PythonHost",
        "${workspaceFolder}\\scripts\\bootstrap.py"
    ],
    "stopAtEntry": false,
    "environment": [
        // Ensure that 3ds Max is ahead of any other Qt based application.
        {
            "name": "PATH",
            "value": "C:\\Program Files\\Autodesk\\3ds Max 2018;${env:PATH}"
        },
        // PROJECT_LOG_LEVEL is the logging levele we need for development
        {
            "name": "PROJECT_LOG_LEVEL",
            "value": "DEBUG"
        }
        // PROJECT_DEBUG_PORT / PROJECT_DEBUG_HOST should match 'Remote Attach'.
        {
            "name": "PROJECT_DEBUG_PORT",
            "value": "5678"
        },
        {
            "name": "PROJECT_DEBUG_HOST",
            "value": "localhost"
        },
        // PROJECT_SCRIPTS contains a ';' delimeter list of Python script to run at startup.
        {
            "name": "PROJECT_SCRIPTS",
            "value": "${workspaceRoot}\\.env27\\Scripts\\activate_this.py"
        },
    ],
},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This configuration replaces our &lt;code&gt;launch.cmd&lt;/code&gt; script.  It incorporate the same command line to load the &lt;code&gt;bootstrap.py&lt;/code&gt; as a start-up script while also specifying the needed environment variables for our workflow.&lt;/p&gt;
&lt;p&gt;As a bonus, we're also addressing &lt;a href="{filename}../2020-10-29-qt-dll-mismatch/note.md"&gt;another problem&lt;/a&gt; by updating the &lt;code&gt;PATH&lt;/code&gt; environment to ensure that 3ds Max's executable and libraries are given the top most priority.&lt;/p&gt;
&lt;h2 id="compound-configuration"&gt;Compound Configuration&lt;/h2&gt;
&lt;p&gt;We now have an &lt;code&gt;attach&lt;/code&gt; and &lt;code&gt;launch&lt;/code&gt; configuration and we can execute them at the same time using a &lt;a href="https://code.visualstudio.com/Docs/editor/debugging#_compound-launch-configurations"&gt;compound configuration&lt;/a&gt;.  The compound configuration is the VSCode mechanism to execute multi-target sessions, which is what we have now:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "compounds": [
        {
            "name": "Python 3ds Max 2018",
            "configurations": [
                "3ds Max 2018",
                "Python: Remote Attach"
            ]
        }
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, selecting &lt;code&gt;Python 3ds Max 2018&lt;/code&gt; and hitting ++F5++ will launch both the &lt;code&gt;3ds Max 2018&lt;/code&gt; and &lt;code&gt;Python: Remote Attach&lt;/code&gt;.  We would be done here, except for one last thing:  3ds Max takes a good 10-20 seconds before it gets to processing &lt;code&gt;bootstrap.py&lt;/code&gt; script and calling the &lt;code&gt;ptvsd.wait_for_attach()&lt;/code&gt; line.  The compound configuration launches all configurations at the same time, so the loading delay cascades into the &lt;code&gt;attach&lt;/code&gt; call timing out before 3ds Max is ready.&lt;/p&gt;
&lt;p&gt;We need to delay the &lt;code&gt;attach&lt;/code&gt; until our application is ready to establish the debugger connection.  There is no native delay mechanism in VSCode's launch configurations, but we can take advantage of the &lt;a href="https://code.visualstudio.com/Docs/editor/debugging#_launchjson-attributes"&gt;preLaunchTask&lt;/a&gt; attribute and add an artificial delay to the &lt;code&gt;attach&lt;/code&gt; configuration.&lt;/p&gt;
&lt;h2 id="delayed-attach-configuration"&gt;'Delayed' Attach Configuration&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;preLaunchTask&lt;/code&gt; is a generic enough to take in any &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;Task&lt;/a&gt;, so we create one:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "label": "sleep",
    "type": "process",
    "command": "${env:COMSPEC}",
    "args": [
        "/c",
        "timeout",
        "/t",
        "30",
        "/nobreak"
    ],
    "group": "none",
    "presentation": {
        "reveal": "never",
        "showReuseMessage": false,
    },
},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sleep&lt;/code&gt; task is a custom VSCode Task in our project's &lt;code&gt;tasks.json&lt;/code&gt; file that wraps around the &lt;code&gt;cmd.exe&lt;/code&gt; command &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/timeout"&gt;timeout&lt;/a&gt;.  We try to avoid any conflicts with shell settings by making this a &lt;code&gt;process&lt;/code&gt; task instead of a &lt;code&gt;shell&lt;/code&gt; task.  We explicitly name the &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd"&gt;cmd.exe&lt;/a&gt; executable, which is usually available &lt;code&gt;COMSPEC&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;For our 3ds Max example we anecdotally select use a hardcoded a time of 30 seconds.  That time will vary on how a collection of factors, like how 3ds max is configured, what's the current system specs, and even if you've launched the application for the first time.  Even with everything the same, multiple iterations will keep the application available in memory so subsequent launches will appear shorter.&lt;/p&gt;
&lt;p&gt;The implementation of &lt;code&gt;sleep&lt;/code&gt; is a personal choice and it could be re-written to use any command.  Our only requirement is that the command delays the original &lt;code&gt;Remote Attach&lt;/code&gt; task by desired amount.  After the command is written, it is then plugged into the &lt;code&gt;preLaunchTask&lt;/code&gt; attribute:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "name": "Python: Remote Attach",
    "type": "python",
    "request": "attach",
    "justMyCode": true,
    "processName": "3dsmax.exe",
    "host": "localhost",
    "port": 5678,
    "pathMappings": [
        {
            "localRoot": "${workspaceFolder}",
            "remoteRoot": "${workspaceFolder}"
        }
    ],
    "preLaunchTask": "sleep",
},&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="next-step"&gt;Next Step&lt;/h2&gt;
&lt;p&gt;We now have a collection of components assembled into something that delivers a seamless debugging workflow.  In fact the workflow is good enough that we could start using it right now.  However, in the &lt;a href="{filename}../2020-12-09-python-vscode-and-max-5/note.md"&gt;Part V&lt;/a&gt;, we'll look at an alternative to the sleep command that adds a little more precision to our delay, effectively making our &lt;code&gt;sleep-attach&lt;/code&gt; workflow into an &lt;code&gt;auto-attach&lt;/code&gt; workflow.&lt;/p&gt;</content><category term="developer set-up"></category><category term="python"></category><category term="3ds max"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in 3ds Max - III</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-max-3/" rel="alternate"></link><published>2020-12-05T19:10:00-05:00</published><updated>2020-12-05T19:10:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-05:/blog/articles/python-vscode-max-3/</id><summary type="html">&lt;p&gt;Part III&amp;#58; VSCode's attach to process workflow'&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-12-03-python-vscode-and-max-2/note.md"&gt;previous article&lt;/a&gt;, we had created a Python virtual environment via &lt;code&gt;virtualenv&lt;/code&gt;'s and built a &lt;code&gt;bootstrap.py&lt;/code&gt; to graft it into the application.  In this article, we'll take a first pass at incorporating VSCode into our workflow.&lt;/p&gt;
&lt;h2 id="attach-to-process"&gt;Attach to Process&lt;/h2&gt;
&lt;p&gt;Developing Python packages for use in external application is a very special edge case.  The &lt;a href="https://code.visualstudio.com/docs/python/debugging"&gt;Python debug configurations in Visual Studio Code&lt;/a&gt; only covers the most common Python debugging scenarios and we'll be incorporating the &lt;em&gt;Attach To Process&lt;/em&gt; one, where we attach the debugger to the already-running application.&lt;/p&gt;
&lt;p&gt;That workflow is represented as a &lt;code&gt;attach&lt;/code&gt; configuration request in the &lt;code&gt;launch.json&lt;/code&gt;, which is different than the more workflow-friendly &lt;code&gt;launch&lt;/code&gt; configuration, which launches the process and immediately attaches to it.  The VSCode Python plugin provides an auto-generated &lt;code&gt;attach&lt;/code&gt; configuration under the &lt;code&gt;Python: Remote Attach&lt;/code&gt; template:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
{
    "name": "Python: Remote Attach",
    "type": "python",
    "request": "attach",
    "justMyCode": true,
    "host": "localhost",
    "port": 5678,
    "pathMappings": [
        {
            "localRoot": "${workspaceFolder}",
            "remoteRoot": "${workspaceFolder}"
        }
    ],
},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;attach&lt;/code&gt; configuration is the same configuration used for &lt;em&gt;Remote Debugging&lt;/em&gt;.  The only real difference here is that instead of making a connection to another machine, we'll be making a network connection to the same machine that we're running on.  That means a few different things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The loopback connection is denoted by using the &lt;code&gt;localhost&lt;/code&gt; host name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The loopback connection will communicate to another VSCode-compatible debugger on the local &lt;code&gt;5678&lt;/code&gt; port.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the value VSCode chose as its default port.  A port is a single use communication channel, so if you're planning on doing anything more complex, like maybe debugging multiple applications side by side, you'll need to select a different port to avoid port-in-use conflicts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We've toggled &lt;code&gt;justMyCode&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; so we're not debugging the standard lib.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We've configured &lt;code&gt;pathMapping&lt;/code&gt; to make &lt;code&gt;localRoot&lt;/code&gt; and &lt;code&gt;remoteRoot&lt;/code&gt; point to the same path.  Other remote workflows will have different values in that mapping, but because we're on the same machine and debugging the same project, we simply use use project's root path, stored in the &lt;code&gt;${workspaceFolder}&lt;/code&gt; variable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-ptvsd-package"&gt;The &lt;code&gt;ptvsd&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;attach&lt;/code&gt; configuration expects to connect with VSCode-compatible debugger running inside the application.  That means for the attach process to work, we need to activate that software component and have that component start a connection to VSCode after the application has start.&lt;/p&gt;
&lt;p&gt;Unfortunately, there's nothing in 3ds Max (and most applications) that will do this out of the box.  To work around this, we'll need to install a 3&lt;sup&gt;rd&lt;/sup&gt; party library, like the &lt;code&gt;ptvsd&lt;/code&gt; Python package, and activate it at start-up.&lt;/p&gt;
&lt;p&gt;The activation is straight forward.  Sometime after the application has loaded, the user needs to execute the following commands:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
import ptvsd
ptvsd.enable_attach(address=('localhost', 5678), redirect_output=True)
ptvsd.wait_for_attach()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;enable_attach&lt;/code&gt; function will enable the port at the same &lt;code&gt;localhost:5678&lt;/code&gt; address our &lt;code&gt;attach&lt;/code&gt; configuration is using.  And the &lt;code&gt;wait_for_attach&lt;/code&gt; function will wait forever, freezing the application in a busy loop, until VSCode completes the connection.  After the connection is made, VSCode is now attached and the application continues on its way.&lt;/p&gt;
&lt;h2 id="install-ptvsd-into-the-side-car-environment"&gt;Install &lt;code&gt;ptvsd&lt;/code&gt; into the side-car environment&lt;/h2&gt;
&lt;p&gt;There are different ways to handle installing the &lt;code&gt;ptvsd&lt;/code&gt; package.  But because it is available as a standalone Python package on PyPI, we can leverage our existing workflow that we put into place in &lt;a href="{filename}../2020-12-01-python-vscode-and-max-1/note.md"&gt;Part I&lt;/a&gt;.  There, we created a virtual environment to be grafted into the application, which we set-up by using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
$ D:\project\.env27\script\activate.bat
(.env27) $ python -m pip install -r D:\project\requirements.txt
(.env27) $ python -m pip install -e D:\project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This means that the simplest way to instal ptvsd is to add it to the &lt;code&gt;requirements.txt&lt;/code&gt; file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text
ptvsd==4.3.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note:  Do not add it as a package dependency to your project, be it in setup.py's &lt;code&gt;install_requires&lt;/code&gt; or some other mechanism.  It is not a dependency to be installed on the user's machine when the user installs your project; it is a development tool that only has value to the development team.  There's more information about the difference in the PyPA's &lt;a href="https://packaging.python.org/discussions/install-requires-vs-requirements/"&gt;install_requires vs requirements files&lt;/a&gt; guidelines.&lt;/p&gt;
&lt;h2 id="call-ptvsd-from-the-bootstrappy-script"&gt;Call &lt;code&gt;ptvsd&lt;/code&gt; from the &lt;code&gt;bootstrap.py&lt;/code&gt; script&lt;/h2&gt;
&lt;p&gt;We can also leverage the components we created in &lt;a href="{filename}../2020-12-03-python-vscode-and-max-2/note.md"&gt;Part II&lt;/a&gt; and add the &lt;code&gt;ptvsd&lt;/code&gt; connection call to our &lt;code&gt;bootstrap.py&lt;/code&gt;. This will make the connection at startup, but we have to be careful to add it &lt;em&gt;after&lt;/em&gt; the grafting of the side-car environment, as that's where the Python package lives.&lt;/p&gt;
&lt;p&gt;```python
"""
Standalone script to attach to a remote debugging.&lt;/p&gt;
&lt;p&gt;The script will inject various sites and execute startup files in
order to set-up the Python environment for development.&lt;/p&gt;
&lt;p&gt;In addition the script will also use &lt;code&gt;ptvsd&lt;/code&gt; to remotely attach to
a remote debugger to the current process.  In some applications this
is the only way to debug Python code.&lt;/p&gt;
&lt;p&gt;This script expects the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_SCRIPTS&lt;/code&gt; A semi-colon separated list of files to execute with
  &lt;code&gt;exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_DEBUG_HOST&lt;/code&gt; The host name of the remote debugger to attach to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_DEBUG_PORT&lt;/code&gt; The port number of the remote debugger to attach to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_LOG_LEVEL&lt;/code&gt; The initial logging level this script will use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. note::&lt;/p&gt;
&lt;p&gt;This script does not install ptvsd and expects the module to be already installed,
    or installed during the site injection or exec execution step.&lt;/p&gt;
&lt;p&gt;"""
import logging
import os&lt;/p&gt;
&lt;p&gt;def main():
    """Main entry point for the bootstrap script"""&lt;/p&gt;
&lt;p&gt;debug_port = os.getenv("PROJECT_DEBUG_PORT", "")
    debug_host = os.getenv("PROJECT_DEBUG_HOST", "")
    scripts = os.getenv("PROJECT_SCRIPTS", "").split(";")
    log_level = os.getenv("PROJECT_LOG_LEVEL", logging.DEBUG)&lt;/p&gt;
&lt;p&gt;logging.basicConfig(level=log_level, format="%(message)s")
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.info("Python Bootstrap script - start -")
    logger.info('Initialized logging to "%s"', log_level)&lt;/p&gt;
&lt;p&gt;if scripts:
        script_paths = [sf for sf in filenames if os.path.exists(sf)]
        if not script_paths:
            logger.warning("No scripts to execute.  Skipping script execution.")&lt;/p&gt;
&lt;p&gt;for script_path in script_paths:
            logger.info("Executing Script: %s", script_path)
            with open(script_path) as f:
                contents = f.read()
            try:
                exec(contents, {"&lt;strong&gt;file&lt;/strong&gt;": script_path})
            except Exception as e:
                logger.exception("   ! %s failed to execute", script_path)
    else:
        logger.warning("Could not find variable PROJECT_SCRIPTS does not exist or is empty.  Skipping Python script execution.")&lt;/p&gt;
&lt;p&gt;if debug_host and debug_port:
        try:
            import ptvsd
            logger.info("Waiting for PTVSD debug client to connect on %s:%s", debug_host, debug_port)
            ptvsd.enable_attach(address=(debug_host, int(debug_port)), redirect_output=True)
            ptvsd.wait_for_attach()
        except ImportError:
            logger.exception("Could not import module &lt;code&gt;ptvsd&lt;/code&gt;.  Is installed?")
    else:
        logger.warning("Environment variable PROJECT_DEBUG_HOST/PROJECT_DEBUG_PORT do not exist or are empty.  Skipping Python remote debugging.")&lt;/p&gt;
&lt;p&gt;logger.info("Python Bootstrap script - stop -")&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;In this iteration we've made a few changes things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We've added &lt;code&gt;PROJECT_DEBUG_PORT&lt;/code&gt; and &lt;code&gt;PROJECT_DEBUG_HOST&lt;/code&gt; environment variables to contain the respective parameters for &lt;code&gt;ptvsd&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We've add a little of extra error handling in case the &lt;code&gt;ptvsd&lt;/code&gt; module is not importable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="code-complexity"&gt;Code Complexity&lt;/h2&gt;
&lt;p&gt;Unfortunately, we've triggered a code complexity warning in the single &lt;code&gt;main&lt;/code&gt; function.  We'll do that by splitting up the function into &lt;code&gt;main&lt;/code&gt; and two internal function &lt;code&gt;_exec&lt;/code&gt; and &lt;code&gt;_attach&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;```python
"""
Standalone script to attach to a remote debugging.&lt;/p&gt;
&lt;p&gt;The script will inject various sites and execute startup files in
order to set-up the Python environment for development.&lt;/p&gt;
&lt;p&gt;In addition the script will also use &lt;code&gt;ptvsd&lt;/code&gt; to remotely attach to
a remote debugger to the current process.  In some applications this
is the only way to debug Python code.&lt;/p&gt;
&lt;p&gt;This script expects the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_SCRIPTS&lt;/code&gt; A semi-colon separated list of files to execute with
  &lt;code&gt;exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_DEBUG_HOST&lt;/code&gt; The host name of the remote debugger to attach to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_DEBUG_PORT&lt;/code&gt; The port number of the remote debugger to attach to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_LOG_LEVEL&lt;/code&gt; The initial logging level this script will use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. note::&lt;/p&gt;
&lt;p&gt;This script does not install ptvsd and expects the module to be already installed,
    or installed during the site injection or exec execution step.&lt;/p&gt;
&lt;p&gt;"""
import logging
import os&lt;/p&gt;
&lt;p&gt;def _exec(filenames):
    """Execute a collection of Python files in the current environment&lt;/p&gt;
&lt;p&gt;Args:
        scripts (list): A list of filename.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;script_paths = [sf for sf in filenames if os.path.exists(sf)]
    if not script_paths:
        logger.warning("No scripts to execute.  Skipping script execution.")&lt;/p&gt;
&lt;p&gt;for script_path in script_paths:
        logger.info("Executing Script: %s", script_path)
        with open(script_path) as f:
            contents = f.read()
        try:
            exec(contents, {"&lt;strong&gt;file&lt;/strong&gt;": script_path})
        except Exception as e:
            logger.exception("   ! %s failed to execute", script_path)&lt;/p&gt;
&lt;p&gt;def _attach(host, port):
    """Attaches to a remote debugger on a host and port&lt;/p&gt;
&lt;p&gt;Args:
        host (str): The host name.
        port (int): The host port.
    """
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    try:
        import ptvsd
    except ImportError:
        logger.exception("Could not import module &lt;code&gt;ptvsd&lt;/code&gt;.  Is installed?")
        return&lt;/p&gt;
&lt;p&gt;logger.info("Waiting for PTVSD debug client to connect on %s:%s", host, port)
    ptvsd.enable_attach(address=(host, port), redirect_output=True)
    ptvsd.wait_for_attach()&lt;/p&gt;
&lt;p&gt;def main():
    """Main entry point for the bootstrap script"""&lt;/p&gt;
&lt;p&gt;debug_port = os.getenv("PROJECT_DEBUG_PORT", "")
    debug_host = os.getenv("PROJECT_DEBUG_HOST", "")
    scripts = os.getenv("PROJECT_SCRIPTS", "").split(";")
    log_level = os.getenv("PROJECT_LOG_LEVEL", logging.DEBUG)&lt;/p&gt;
&lt;p&gt;logging.basicConfig(level=log_level, format="%(message)s")
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
    logger.info("Python Bootstrap script - start -")
    logger.info('Initialized logging to "%s"', log_level)&lt;/p&gt;
&lt;p&gt;if scripts:
        _exec(scripts)
    else:
        logger.warning("Could not find variable PROJECT_SCRIPTS does not exist or is empty.  Skipping script execution.")&lt;/p&gt;
&lt;p&gt;if debug_port and debug_host:
        _attach(debug_host, int(debug_port))
    else:
        logger.warning("Environment variable PROJECT_DEBUG_HOST/PROJECT_DEBUG_PORT do not exist or are empty.  Python debugging disabled.")&lt;/p&gt;
&lt;p&gt;logger.info("Python Bootstrap script - stop -")&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h2 id="attach-to-process-manually"&gt;Attach to Process (Manually)&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;ptvsd&lt;/code&gt; installed in the side-car environment and configured to run on startup via &lt;code&gt;bootstrap.py&lt;/code&gt;, we now have the minimum amount of pieces in place to start a debugging session.&lt;/p&gt;
&lt;p&gt;First we update our launch script to include to host and the port:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
@echo off
setlocal
cd %~dp0
set "PROJECT_LOG_LEVEL=DEBUG"
set "PROJECT_SCRIPTS=%CD%\.env27\Scripts\activate_this.py"
set "PROJECT_HOST=locahost"
set "PROJECT_PORT=5678"
3dsmax.exe -u PythonHost bootstrap.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And second, we execute the VSCode's [remote debugging manual steps] to connect the &lt;code&gt;ptvsd&lt;/code&gt; instance running in the application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Launch the application with &lt;code&gt;launch.cmd&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait for the application to display &lt;code&gt;Waiting for debug client to connect on localhost:5678&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch to VSCode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the &lt;code&gt;Python: Attach&lt;/code&gt; launch configuration from above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should see the application resume its start sequence and VSCode should be in &lt;a href="https://code.visualstudio.com/Docs/editor/debugging"&gt;debugger mode&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="next-step"&gt;Next Step&lt;/h2&gt;
&lt;p&gt;The updated &lt;code&gt;bootstrap.py&lt;/code&gt; and &lt;code&gt;launcher.cmd&lt;/code&gt; scripts completes the third part of the tutorial and we now have a complete workflow (even if it is somewhat clunky) to debug our Python package while it's running inside an embedded Python environment.  In the &lt;a href="{filename}../2020-12-07-python-vscode-and-max-4/note.md"&gt;Part IV&lt;/a&gt;, we'll start the refinement phase and start looking at different way to make this manual process an automatic one.&lt;/p&gt;</content><category term="developer set-up"></category><category term="python"></category><category term="3ds max"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in 3ds Max - II</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-max-2/" rel="alternate"></link><published>2020-12-03T20:23:00-05:00</published><updated>2020-12-03T20:23:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-03:/blog/articles/python-vscode-max-2/</id><summary type="html">&lt;p&gt;Part II&amp;#58; The bootstrap script&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-12-01-python-vscode-and-max-1/note.md"&gt;previous article&lt;/a&gt;, we set up a conventional Python development environment with a Python virtual environment and our Python plugin as an editable package.  In this article, we'll make that virtual environment a side-car environment by grafting it onto the external application.&lt;/p&gt;
&lt;h2 id="python-activator"&gt;Python Activator&lt;/h2&gt;
&lt;p&gt;The virtual environment that we've created is linked to the &lt;em&gt;system&lt;/em&gt; Python environment that created it.  In order to graft that environment onto the application's Python installation, we're going to play around with that relationship by activating that virtual environment not in the original Python installation, but in the application's Python environment.&lt;/p&gt;
&lt;p&gt;We can do that in a non-destructible way via a bootstrap script that is launched at application start-up.  We're really emphasizing the non-destructive nature of this because we don't want to make any permanent changes to the application.  In fact, everything should be isolated to the current executing session.  The goal here is that the user should be able to launch the application without the start-up script and have the new instance co-exist without any side effects.&lt;/p&gt;
&lt;p&gt;Fortunately, the &lt;code&gt;virtualenv&lt;/code&gt;'s Python activator option has done most of the work for us in its &lt;a href="https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/python/activate_this.py"&gt;activate_this.py&lt;/a&gt; Python script.  You can see this script online at GitHub.  The snapshot used for this article is available below:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="-coding-utf-8-"&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;"""Activate virtualenv for current interpreter:
Use exec(open(this_file).read(), {'&lt;strong&gt;file&lt;/strong&gt;': this_file}).
This can be used when you must use an existing Python interpreter, not the virtualenv bin/python.
"""
import os
import site
import sys&lt;/p&gt;
&lt;p&gt;try:
    abs_file = os.path.abspath(&lt;strong&gt;file&lt;/strong&gt;)
except NameError:
    raise AssertionError("You must use exec(open(this_file).read(), {'&lt;strong&gt;file&lt;/strong&gt;': this_file}))")&lt;/p&gt;
&lt;p&gt;bin_dir = os.path.dirname(abs_file)
base = bin_dir[: -len("&lt;strong&gt;BIN_NAME&lt;/strong&gt;") - 1]  # strip away the bin part from the &lt;strong&gt;file&lt;/strong&gt;, plus the path separator&lt;/p&gt;
&lt;h1 id="prepend-bin-to-path-this-file-is-inside-the-bin-directory"&gt;prepend bin to PATH (this file is inside the bin directory)&lt;/h1&gt;
&lt;p&gt;os.environ["PATH"] = os.pathsep.join([bin_dir] + os.environ.get("PATH", "").split(os.pathsep))
os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory&lt;/p&gt;
&lt;h1 id="add-the-virtual-environments-libraries-to-the-host-python-import-mechanism"&gt;add the virtual environments libraries to the host python import mechanism&lt;/h1&gt;
&lt;p&gt;prev_length = len(sys.path)
for lib in "&lt;strong&gt;LIB_FOLDERS&lt;/strong&gt;".split(os.pathsep):
    path = os.path.realpath(os.path.join(bin_dir, lib))
    site.addsitedir(path.decode("utf-8") if "&lt;strong&gt;DECODE_PATH&lt;/strong&gt;" else path)
sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]&lt;/p&gt;
&lt;p&gt;sys.real_prefix = sys.prefix
sys.prefix = base
```&lt;/p&gt;
&lt;p&gt;The Python activator is designed to be executed from within the application.  When we do that, the &lt;code&gt;activate_this.py&lt;/code&gt; script will be making some low-level changes, so it's important to note the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This is a template file so the the strings &lt;code&gt;__LIB_FOLDERS__&lt;/code&gt;, &lt;code&gt;__BIN_NAME__&lt;/code&gt;, etc. are placeholders and are replaced with resolved values during the creation process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script is updating the &lt;code&gt;PATH&lt;/code&gt; environment variable.  This is important for binary components, usually DLL files on Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script is injecting additional site package locations with the &lt;a href="https://docs.python.org/3/library/site.html#site.addsitedir"&gt;addsitedir&lt;/a&gt;.  This is important, as it not only adds the respective &lt;code&gt;site-packages&lt;/code&gt; path to the &lt;a href="https://docs.python.org/3/library/sys.html#sys.path"&gt;sys.path&lt;/a&gt; but also processes the various &lt;code&gt;.pth&lt;/code&gt; files that may be added by -- but not limited to -- editable package installation.  More information about this is available on the &lt;a href="https://docs.python.org/3/library/site.html"&gt;site&lt;/a&gt; module in the Python standard lib.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-bootstrappy-bootstrap-script"&gt;The &lt;code&gt;bootstrap.py&lt;/code&gt; Bootstrap script&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;virtualenv&lt;/code&gt; module's &lt;code&gt;activate_this.py&lt;/code&gt; provides the core functionality that we need to graft the environment onto our application's Python environment.  The script even gives us instruction on how to execute it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
script_path = r"D:\project\.env27\Scripts\activate_this.py"
exec(open(script_path).read(), {"__file__": script_path})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The problem here is that we need to make the script portable.  If we put that code into a startup file, named &lt;code&gt;bootstrap.py&lt;/code&gt;, then we can use the &lt;code&gt;__file__&lt;/code&gt; attribute to resolve the current path and resolve the location of the &lt;code&gt;activate_this.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
import os
root_path = os.path.dirname(__file__)
script_path = os.path.join(root_path, ".env27", "Scripts", "activate_this.py")
exec(open(script_path).read(), {"__file__": script_path})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's better, but it still not as portable as it needs to be.&lt;/p&gt;
&lt;h2 id="bootstrap-environment-variables"&gt;Bootstrap Environment Variables&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;bootstrap.py&lt;/code&gt;'s &lt;code&gt;script_path&lt;/code&gt; variable is problematic for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The hardcoded path is not portable.&lt;/li&gt;
&lt;li&gt;The hardcoded path is not Python agnostic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can punt that responsibility down the line to the user and have him pass the correct path in as a parameter.  However, the application's design will most definitely limit our ability to pass parameters to the script.  While the application's command line will probably include a way to execute a Python script, chances are good that any subsequence command line arguments will be processed by the application instead of being passed through to the Python script.&lt;/p&gt;
&lt;p&gt;One solution that seems to work around those limitations is environment variables:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
import os
script_path =  os.getenv("ACTIVATE_THIS_SCRIPT", "")
exec(open(script_path).read(), {"__file__": script_path})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Environment variables local to a process are a simple way to pass arguments down through multiple layers of code.  They're the equivalent to global variables and can be made local to the running instance of the application.  The alternative is to either automatically generate the script or a parameter file before launch -- which is not necessarily wrong, but won't work well for our particular task.  In our case it will be easier to set up the script to get it's data from environment variables.&lt;/p&gt;
&lt;h2 id="bootstrap-safety-checks"&gt;Bootstrap Safety Checks&lt;/h2&gt;
&lt;p&gt;We can decorate our &lt;code&gt;bootstrap.py&lt;/code&gt; with a bit more flare.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We change the &lt;code&gt;ACTIVATE_THIS_SCRIPT&lt;/code&gt; into a &lt;code&gt;PROJECT_SCRIPTS&lt;/code&gt; environment variable that's a collection of individual scripts separated by semi-colon &lt;code&gt;;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We add a bit more error handling to make failures easier to debug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since we're executing a startup script via &lt;code&gt;exec&lt;/code&gt;, we're also trapping all exceptions with the base  &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Conventionally, this is frowned upon because it hides &lt;em&gt;all&lt;/em&gt; exceptions as a side effect instead of explicitly dealing known exceptions.  However, there's a case for it here because we're executing generic code and if we do catch an exception, we're sharing the exception info to the logging console.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We wrap the entire script in a &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;main scope&lt;/a&gt; out of good habit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;```python
"""
Standalone set-up script&lt;/p&gt;
&lt;p&gt;The script will inject various sites and execute startup files in
order to set-up the Python environment for development.&lt;/p&gt;
&lt;p&gt;This script expects the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PROJECT_SCRIPTS&lt;/code&gt; A semi-colon separated list of files to execute with
  &lt;code&gt;exec&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"""
import os&lt;/p&gt;
&lt;p&gt;def main():
    # Execute a list of startup scripts
    scripts = os.getenv("PROJECT_SCRIPTS", "").split(";")
    script_paths = [sf for sf in scripts if os.path.exists(sf)]
    if not script_paths:
        print("Environment variable PROJECT_SCRIPTS does not exist or is empty.  Skipping script execution.")
    for script_path in script_paths:
        print("Executing Script: %s" % script_path)
        with open(script_path) as f:
            contents = f.read()
        try:
            exec(contents, {"&lt;strong&gt;file&lt;/strong&gt;": script_path})
        except Exception:
            print("   ! %s failed to execute" % script_path)&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()
```&lt;/p&gt;
&lt;h2 id="bootstrap-logging"&gt;Bootstrap Logging&lt;/h2&gt;
&lt;p&gt;We take our basic premise one step further and replace the &lt;code&gt;prints&lt;/code&gt; with &lt;a href="https://docs.python.org/3/library/logging.html"&gt;logging&lt;/a&gt; statements.  This step is optional, but recommended as your Python tool should already be set-up to use logging instead of &lt;code&gt;print&lt;/code&gt; messages.&lt;/p&gt;
&lt;p&gt;As a convenience we use the logging module's basic set-up function &lt;a href="https://docs.python.org/3/library/logging.html#logging.basicConfig"&gt;logging.basicConfig&lt;/a&gt;.  This can be easily extended to something more advanced with the &lt;a href="https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig"&gt;logging.config.dictConfig&lt;/a&gt; configuration function.  And again, any parameter should be passed in via environment variables:&lt;/p&gt;
&lt;p&gt;```python
"""
Standalone set-up script&lt;/p&gt;
&lt;p&gt;The script will inject various sites and execute startup files in
order to set-up the Python environment for development.&lt;/p&gt;
&lt;p&gt;This script expects the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_SCRIPTS&lt;/code&gt; A semi-colon separated list of files to execute with
  &lt;code&gt;exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PROJECT_LOG_LEVEL&lt;/code&gt; A semi-colon separated list of files to execute with
  &lt;code&gt;exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.. note::&lt;/p&gt;
&lt;p&gt;This script does not install ptvsd and expects the module to be already installed, or installed during the site injection or exec execution step.&lt;/p&gt;
&lt;p&gt;"""
import logging
import os
import site&lt;/p&gt;
&lt;p&gt;def main():
    # Configure the logging for the application
    log_level = os.getenv("PROJECT_LOG_LEVEL", logging.DEBUG)
    logging.basicConfig(level=log_level, format="%(message)s")
    logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;logger.info("Python Bootstrap script - start -")
    logger.info('Initialized logging to "%s"', log_level)&lt;/p&gt;
&lt;p&gt;# Execute a list of startup scripts
    scripts = os.getenv("PROJECT_SCRIPTS", "").split(";")
    script_paths = [sf for sf in scripts if os.path.exists(sf)]
    if not script_paths:
        logger.warning("Environment variable PROJECT_SCRIPTS does not exist or is empty.  Skipping script execution.")
    for script_path in script_paths:
        logger.info("Executing Script: %s", script_path)
        with open(script_path) as f:
            contents = f.read()
        try:
            exec(contents, {"&lt;strong&gt;file&lt;/strong&gt;": script_path})
        except Exception:
            logger.exception("   ! %s failed to execute", script_path)&lt;/p&gt;
&lt;p&gt;logger.info("Python Bootstrap script - stop -")&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h2 id="execute-the-bootstrap"&gt;Execute the Bootstrap&lt;/h2&gt;
&lt;p&gt;With a virtual environment created and a basic bootstrap script in place, we're now ready to launch our application with its side-car environment.  To ensure that we do that the most portable way possible, we look to the application's start-up process and see what methods we have to execute a script an startup.  This will be application-specific, but usually it will involve a command line argument or environment variable.  From the &lt;a href="https://knowledge.autodesk.com/support/3ds-max/getting-started/caas/CloudHelp/cloudhelp/2021/ENU/3DSMax-Basics/files/GUID-BCB04DEC-7967-4091-B980-638CFDFE47EC-htm.html"&gt;3ds Max help&lt;/a&gt;, we're lucky enough that we can execute any Python file using the &lt;code&gt;-u PythonHost&lt;/code&gt; command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
3dsmax.exe -u PythonHost file.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With that information, we can create a very rudimentary &lt;code&gt;launcher.cmd&lt;/code&gt; script to launch 3ds Max with both our project environment variables and the command line configured to launch with our bootstrap script:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
@echo off
setlocal
cd %~dp0
set "PROJECT_LOG_LEVEL=DEBUG"
set "PROJECT_SCRIPTS=%CD%\.env27\Scripts\activate_this.py"
3dsmax.exe -u PythonHost bootstrap.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Running this from the command line should launch 3ds Max and produce the following output in the 3ds Max Listener:&lt;/p&gt;
&lt;p&gt;```text
Welcome to MAXScript.&lt;/p&gt;
&lt;p&gt;Python Bootstrap script - start -
Initialized logging to "DEBUG"
Executing Script: D:\projects.env27\Scripts\activate_this.py
Python Bootstrap script - stop -
```&lt;/p&gt;
&lt;h2 id="next-step"&gt;Next Step&lt;/h2&gt;
&lt;p&gt;The final &lt;code&gt;bootstrap.py&lt;/code&gt;  &lt;code&gt;launcher.cmd&lt;/code&gt; scripts execute all of the necessary steps needed to launch the application with a grafted side-car environment.
The next step, &lt;a href="{filename}../2020-12-05-python-vscode-and-max-3/note.md"&gt;Part III&lt;/a&gt;, will look into how exactly we can incorporate VSCode and extend this workflow with debugging capabilities.&lt;/p&gt;</content><category term="developer set-up"></category><category term="3ds max"></category><category term="python"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in 3ds Max - I</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-max-1/" rel="alternate"></link><published>2020-12-01T19:14:00-05:00</published><updated>2020-12-01T19:14:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-12-01:/blog/articles/python-vscode-max-1/</id><summary type="html">&lt;p&gt;Part I&amp;#58; Python Side Car Environments&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;In the &lt;a href="{filename}../2020-11-30-python-vscode-and-max/note.md"&gt;previous article&lt;/a&gt;, we layed out the overall structure of the workflow.  In this article, we'll take a deep dive into the Python part and talk about set up a &lt;em&gt;side-car&lt;/em&gt; environment for the external application.&lt;/p&gt;
&lt;h2 id="side-car-environments"&gt;'Side Car' Environments&lt;/h2&gt;
&lt;p&gt;While Python-enabled applications usually have some sort of Python scripting support, Python developers looking to deploy their scripts as Python packages -- or create Python scripts that use 3&lt;sup&gt;rd&lt;/sup&gt; party Python packages from a &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; -- should consider setting up an external Python environment.&lt;/p&gt;
&lt;p&gt;This external Python environment will be completely separate from the application.  Its only role is to be the installation location for all of the Python packages we need to support our plugin, which will also be wrapped up as a Python package.  Also, this environment does nothing different and uses all of the established conventions used by the Python community.&lt;/p&gt;
&lt;p&gt;In &lt;a href="{filename}../2020-12-03-python-vscode-and-max-2/note.md"&gt;Part II&lt;/a&gt;, we'll make this external Python environment into a &lt;em&gt;side-car&lt;/em&gt; Python environment by grafting it onto our target application with a little bit of coding glue.  But before we get to that, it's important to talk about this separation.&lt;/p&gt;
&lt;p&gt;Our goal here is to ensure that the local development environment (packages, scripts, settings, etc.) are kept isolated from the application's global environment.  This side-car environment will let us use Python's native packaging features, but in a way that will not modify the global installation of the application.&lt;/p&gt;
&lt;h2 id="keepem-separated"&gt;Keep'em separated&lt;/h2&gt;
&lt;p&gt;There are some benefits to enforcing this barrier.  This separation ensures that the developer has the freedom to reset or even switch projects without having to selectively rollback global changes made to the application.  We can treat the side-car environment as a personal sandbox and mess it up how ever we want; if we make a mistake, we can we can always reset by decoupling the environment from the application and destroying it. The alterative -- especially for those applications that don't have the most modular Python installation -- is to completely reinstall the application.&lt;/p&gt;
&lt;p&gt;Python developers should already recognize this pattern as the concept of a &lt;em&gt;virtual environment&lt;/em&gt;.  The slight difference here for this article is that our side-car environment is created by external Python installation and grafted onto another that does not natively support virtual environments.&lt;/p&gt;
&lt;h2 id="the-virtualenv-module"&gt;The &lt;code&gt;virtualenv&lt;/code&gt; module&lt;/h2&gt;
&lt;p&gt;There are many tools that implement Python virtual environments, but the usual, and maybe mature choice is the &lt;code&gt;virtualenv&lt;/code&gt; module.  Python's &lt;code&gt;virtualenv&lt;/code&gt; module is a tool popular enough to warrant its own tutorials so it won't be covered here.  A good resource to keep around is the &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;official help&lt;/a&gt;, but the the important thing to note is that the &lt;code&gt;virtualenv&lt;/code&gt; module works by spawning a new environment based on its host Python installation.   This brings up a few points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Because the &lt;code&gt;virtualenv&lt;/code&gt; module create virtual environments from a hosting Python environment, you must first install a &lt;em&gt;system&lt;/em&gt; Python environment to host &lt;code&gt;virtualenv&lt;/code&gt;.  This installation is a permanent Python solutions and we only need it to create the temporary side car environments provided by &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the &lt;code&gt;virtualenv&lt;/code&gt; module can only create virtual environments that matches its hosting Python environment, that &lt;em&gt;system&lt;/em&gt; Python should be the same version as the the application's Python installation -- or at least match it as close as possible.  This may be challenging if your application still uses Python 2 environments as that line has been discontinued.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;system&lt;/em&gt; Python installation is usually pre-installed on Linux systems but not on Windows.  On Windows, this achieved simply by installing a Python environment from &lt;a href="https://www.python.org"&gt;https://www.python.org&lt;/a&gt; and then installing the &lt;code&gt;virtualenv&lt;/code&gt; module.  It's possible to use alternative installations methods (like &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;) or even alternative distribution (like &lt;a href="https://docs.conda.io"&gt;Conda&lt;/a&gt;), but that won't be covered here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some vendors have listened to feedback (and learning from their past handling of Python 2) so there is a chance of that the application could already provide all of the necessary support to create user virtual environments.  If that's the case for your specific application, then that makes this section joyfully redundant.&lt;/p&gt;
&lt;p&gt;However, if the application does not provide &lt;code&gt;virtualenv&lt;/code&gt; support directly out of the box, then we should continue with this side-car plan and use a &lt;em&gt;system&lt;/em&gt; Python.  Even if the application's Python installation is accessible, installing &lt;code&gt;virtualenv&lt;/code&gt; into the application's Python environment would still violate our separation policy.&lt;/p&gt;
&lt;h2 id="venv-vs-virtualenv"&gt;&lt;code&gt;venv&lt;/code&gt; vs. &lt;code&gt;virtualenv&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;As a side note, it's probably best to explain the difference between &lt;code&gt;venv&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;, but if you already know the difference, then please skip this section.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;virtualenv&lt;/code&gt; module was not always (and maybe still isn't to some people) the tool of choice for virtual environments. Historically, Python 2 did not contain any virtual environment tool and it wasn't until Python 3.3 that a &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; module became part of the standard library.  During that time, the existing &lt;code&gt;virtualenv&lt;/code&gt; was a third party module that competed with other 3&lt;sup&gt;rd&lt;/sup&gt; party modules to provide the virtual environment functionality.  However, &lt;code&gt;virtualenv&lt;/code&gt; went through a re-write in 2019 and released a second iteration in 2020 that was built upon the same base as &lt;code&gt;venv&lt;/code&gt;.  From the &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;official help&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; is a tool to create isolated Python environments. Since Python &lt;code&gt;3.3&lt;/code&gt;, a subset of it has been integrated into the standard library under the venv module. The &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv module&lt;/a&gt; does not offer all features of this library, to name just a few more prominent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is slower (by not having the app-data seed method),&lt;/li&gt;
&lt;li&gt;is not as extendable,&lt;/li&gt;
&lt;li&gt;cannot create virtual environments for arbitrarily installed python versions (and automatically discover these),&lt;/li&gt;
&lt;li&gt;is not upgrade-able via pip,&lt;/li&gt;
&lt;li&gt;does not have as rich programmatic API (describe virtual environments without creating them).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;But even then it wasn't clear which tool to use, as the &lt;code&gt;venv&lt;/code&gt; help notes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Deprecated since version 3.6&lt;/em&gt;: &lt;code&gt;pyvenv&lt;/code&gt; was the recommended tool for creating virtual environments for Python 3.3 and 3.4, and is &lt;a href="https://docs.python.org/dev/whatsnew/3.6.html#deprecated-features"&gt;deprecated in Python 3.6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Changed in version 3.5&lt;/em&gt;: The use of &lt;code&gt;venv&lt;/code&gt; is now recommended for creating virtual environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So this article is using the shared features of both the &lt;code&gt;venv&lt;/code&gt;/&lt;code&gt;virtualenv&lt;/code&gt; modules but we've selected &lt;code&gt;virtualenv&lt;/code&gt; for its finer grain of control over the virtual environment process.&lt;/p&gt;
&lt;h2 id="creating-virtual-environments"&gt;Creating Virtual Environments&lt;/h2&gt;
&lt;p&gt;For this tutorial, we're assuming that you are able to execute &lt;code&gt;virtualenv&lt;/code&gt; from a vanilla Python environment that matches the Python environment in your applications.  Creating an environment from the command line should be as simple as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
python.exe -m virtualenv env27&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But because we're on creating this as a side car environment on Windows, we can fine-tune the installation to install it within our project folder:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
python.exe -m virtualenv D:\project\.env27 --no-download --no-periodic-update --activators batch,python&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We're doing a few things here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Creating the environment inside out example project folder &lt;code&gt;D:\project&lt;/code&gt; to keep everything local to the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicitly using the &lt;code&gt;--no-download&lt;/code&gt; option (even if it enabled by default) to speed up the creation of the environment by not downloading the &lt;a href="https://virtualenv.pypa.io/en/latest/user_guide.html#seeders"&gt;seed packages&lt;/a&gt; of &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt; packages from the internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicitly using the &lt;code&gt;--no-periodic-update&lt;/code&gt; option to avoid updating the embedded wheels.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a well-intentioned feature, but because we're not installing fresh &lt;a href="https://virtualenv.pypa.io/en/latest/user_guide.html#seeders"&gt;seed packages&lt;/a&gt; with the &lt;code&gt;--no-download&lt;/code&gt;, we don't want &lt;code&gt;virtualenv&lt;/code&gt; to sneak in an update 14 days later.  That will prevent a unnecessary internet download sometime in the future &lt;em&gt;and&lt;/em&gt; keep our versions of &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;wheel&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt; to the same version that was shipped with the version of &lt;code&gt;virtualenv&lt;/code&gt; when we first downloaded it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Explicitly creating the &lt;code&gt;batch&lt;/code&gt; and &lt;code&gt;python&lt;/code&gt; activators instead of the full suite of activators (introduced in version &lt;code&gt;20&lt;/code&gt;).  For more information about activators, check out the &lt;a href="https://virtualenv.pypa.io/en/latest/user_guide.html#activators"&gt;activator section&lt;/a&gt; and the &lt;a href="https://virtualenv.pypa.io/en/latest/cli_interface.html#section-activators"&gt;command line arguments&lt;/a&gt; from the &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;official help&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The batch activator allows us to activate the environment from the &lt;code&gt;cmd&lt;/code&gt; shell which will be the shell of our choice.  If you have a different shell preference, like &lt;code&gt;powershell&lt;/code&gt;, then select that instead of &lt;code&gt;batch&lt;/code&gt;.  The shell activator doesn't really matter as we're more interested in the &lt;code&gt;python&lt;/code&gt; activator.  That's the mechanism that will make this virtual environment a 3ds max side car environment.&lt;/p&gt;
&lt;h2 id="editable-installs"&gt;Editable installs&lt;/h2&gt;
&lt;p&gt;After the virtual environment is created, we now make the first connection in our development puzzle.  Fortunately, this is fairly straight forward and we'll use the standard module &lt;code&gt;pip&lt;/code&gt; &lt;a href="https://pip.pypa.io/en/stable/cli/pip_install/#local-project-installs"&gt;editable install&lt;/a&gt; to install the Python package in the side-car environment:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
$ D:\project\.env27\script\activate.bat
(.env27) $ python -m pip install -r D:\project\requirements.txt
(.env27) $ python -m pip install -e D:\project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We're doing three things here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We activate the virtual environment before executing the pip install command.  Otherwise you might be installing the package into the global installation.  The &lt;code&gt;virtualenv&lt;/code&gt; usually modifies the prompt with the &lt;code&gt;virtualenv&lt;/code&gt;'s name or path on disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then instal our project's &lt;code&gt;requirement.txt&lt;/code&gt; file.  &lt;a href="https://pip.pypa.io/en/latest/reference/requirements-file-format/"&gt;Requirement files&lt;/a&gt; are a feature native to &lt;code&gt;pip&lt;/code&gt; and is pretty much ubiquitous across all Python projects.  If your project has any 3&lt;sup&gt;rd&lt;/sup&gt; party dependencies, then you should store them in the &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's important to not rely on the project's &lt;code&gt;setup.py&lt;/code&gt;'s &lt;code&gt;install_requires&lt;/code&gt; parameter to do this for us.  That serves a slightly different purpose and there's more information about the difference in the PyPA's [install_requires vs requirements files] guidelines.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We then install our own project as an editable install.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last step relies solely on project structure to succeed, so this should still work even if your project imports the application's Python API package (such as &lt;code&gt;pymxs&lt;/code&gt; for 3ds Max).  We're not executing any code here; instead we're simply setting up the various hooks we need to execute the package in the virtual environment in an editable way.&lt;/p&gt;
&lt;p&gt;Behind the scenes, the editable install only modifies the virtual environment by creating a &lt;code&gt;pth&lt;/code&gt; file.  These &lt;code&gt;pth&lt;/code&gt; files contain the paths to locations outside of the environment and are processed by the [site] module during Python initialization.  There's more functionality here, as described by the [site] module's help page, but for the purpose of the editable installs this is what we care about.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This part of the infrastructure has only focused on the Python parts of it.  With the virtual environment complete and our project properly installed for development, it's time to move onto &lt;a href="{filename}../2020-12-03-python-vscode-and-max-2/note.md"&gt;Part II&lt;/a&gt;.  There we'll look into how we'll graft the virtual environment onto the application using the &lt;em&gt;bootstrap&lt;/em&gt; script.&lt;/p&gt;</content><category term="developer set-up"></category><category term="python"></category><category term="3ds max"></category><category term="vscode"></category></entry><entry><title>Set up VSCode to Debug Python in 3ds Max</title><link href="https://dbarsam.github.io/blog/articles/python-vscode-max/" rel="alternate"></link><published>2020-11-30T10:10:00-05:00</published><updated>2020-11-30T10:10:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-30:/blog/articles/python-vscode-max/</id><summary type="html">&lt;p&gt;A multipart article describing how to debug an application's embedded Python environment.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;Unfortunately, not every application embeds Python the same way.  This makes developing Python tools for these applications awkwardly challenging.  Some applications obfuscate the interpreter it by compiling directly it into the application, while others take a more modular approach and ship a complete Python installation -- including an equivalent &lt;code&gt;python.exe&lt;/code&gt; and &lt;code&gt;site-package&lt;/code&gt; folder -- in a easily accessible folder in the application's installation directory.&lt;/p&gt;
&lt;p&gt;But even ignoring the differences between how the applications embed these Python environment, there's usually one or two additional design choices that makes developing these Python plugins even harder than they need to be. It's almost as if the applications' creators embed Python as an afterthought, slating it as an auxillary scripting language that's only there to implement a few automation macros.  Python is infinitely more open, so developing anything more powerful often takes on a journey of connecting mismatched puzzle pieces that ends up with a somewhat unsatisfying solution.&lt;/p&gt;
&lt;p&gt;This is a multipart article that tries to come up with a satisfactory solution.  We work through the various puzzle pieces and come up the necessary glue to make them work together.  In order to keep us focus, we'll develop this solution with a specific goal of using VSCode to debug a local Python package in an application's embedded Python environment.  Most of this workflow is pretty generic, but in the few cases where it isn't, we'll use an example application of 3ds Max 2018, with Python 2.7, and running on Windows, to explain the specificities.&lt;/p&gt;
&lt;h2 id="the-infrastructure"&gt;The Infrastructure&lt;/h2&gt;
&lt;p&gt;Breaking it down, we are going to set-up a workflow with the following components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;side-car&lt;/em&gt; virtual environment.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;bootstrap&lt;/em&gt; script to temporarily graft the side-car virtual environment onto the application.&lt;/li&gt;
&lt;li&gt;A Python &lt;em&gt;debugging library&lt;/em&gt; that can handle remote debugging.&lt;/li&gt;
&lt;li&gt;An &lt;em&gt;auto-attach&lt;/em&gt; workflow that gives the user a seamless debugging experience in VSCode.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-tutorials"&gt;The tutorials&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="{filename}../2020-12-01-python-vscode-and-max-1/note.md"&gt;Part I&lt;/a&gt;: The Python side-car environments&lt;/li&gt;
&lt;li&gt;&lt;a href="{filename}../2020-12-03-python-vscode-and-max-2/note.md"&gt;Part II&lt;/a&gt;: The bootstrap script&lt;/li&gt;
&lt;li&gt;&lt;a href="{filename}../2020-12-05-python-vscode-and-max-3/note.md"&gt;Part III&lt;/a&gt;: The Python debugger library&lt;/li&gt;
&lt;li&gt;&lt;a href="{filename}../2020-12-07-python-vscode-and-max-4/note.md"&gt;Part IV&lt;/a&gt;:  The Attach-To-Process launcher in VSCode&lt;/li&gt;
&lt;li&gt;&lt;a href="{filename}../2020-12-09-python-vscode-and-max-5/note.md"&gt;Part V&lt;/a&gt;: The Auto-Attach-To-Process launcher in VSCode&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This series starts with &lt;a href="{filename}../2020-12-01-python-vscode-and-max-1/note.md"&gt;Part I&lt;/a&gt; by repurposing a very basic component of Python development, the virtual environment.&lt;/p&gt;</content><category term="developer set-up"></category><category term="python"></category><category term="3ds max"></category><category term="vscode"></category></entry><entry><title>VSCode tasks for Pelican blogs</title><link href="https://dbarsam.github.io/blog/articles/vscode-task-pelican/" rel="alternate"></link><published>2020-11-23T03:40:00-05:00</published><updated>2020-11-23T03:40:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-23:/blog/articles/vscode-task-pelican/</id><summary type="html">&lt;p&gt;How to run Pelican commands from within Visual Studio Code.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;tasks feature&lt;/a&gt; is the editor's mechanism to execute building, testing, and other software development actions from the comfort of the IDE.  Most of the common tasks are built-in or provided by plugins, but it's also possible to define workspace tasks in the project's &lt;code&gt;tasks.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;In this Pelican powered project, we can take advantage of that flexibility and add support for two Pelican specific commands:  build and serve.&lt;/p&gt;
&lt;h2 id="the-build-task"&gt;The &lt;code&gt;build&lt;/code&gt; Task&lt;/h2&gt;
&lt;p&gt;The build command is pretty straight forward to adapt.  On the command line it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;batch
python -m pelican .\content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we can turn that into the following json block and add it to the &lt;code&gt;tasks.json&lt;/code&gt; file in the project's &lt;code&gt;.vscode&lt;/code&gt; folder:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
    {
        "label": "pelican-build",
        "type": "process",
        "isBuildCommand": true,
        "command": "${workspaceFolder}\\.conda\\env\\python.exe",
        "args": [
            "-m",
            "pelican",
            "${workspaceFolder}\\content"
        ],
        "problemMatcher": []
    },&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We mark this task as an explicit &lt;em&gt;build&lt;/em&gt; command with the &lt;code&gt;isBuildCommand&lt;/code&gt; flag.  This adds it the list of commands automatically bound to VSCode's &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-shift"&gt;Shift&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-b"&gt;B&lt;/kbd&gt;&lt;/span&gt; keyboard mapping.&lt;/p&gt;
&lt;p&gt;We also add an empty &lt;code&gt;problemMatcher&lt;/code&gt;.  VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher"&gt;problem matching&lt;/a&gt; feature is how the editor converts the text output of the command into the editor's &lt;a href="https://code.visualstudio.com/docs/editor/editingevolved#_errors-warnings"&gt;problems panel&lt;/a&gt;, accessible via &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-shift"&gt;Shift&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-m"&gt;M&lt;/kbd&gt;&lt;/span&gt;.  Unfortunately Pelican does not output its error messages into a compatible format so we add the feature but leave it empty until a future change in either VSCode or Pelican.&lt;/p&gt;
&lt;h2 id="the-serve-task"&gt;The &lt;code&gt;serve&lt;/code&gt; Task&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;serve&lt;/code&gt; command is also fairly simple to adapt.  Like the &lt;code&gt;build&lt;/code&gt; command we take a command line and turn it into a json task entry.&lt;/p&gt;
&lt;p&gt;The serve command line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
python -m pelican --autoreload --listen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The json equivalent of the command line, added it to the &lt;code&gt;tasks.json&lt;/code&gt; file in the &lt;code&gt;.vscode&lt;/code&gt; folder:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
    {
        "label": "pelican-serve",
        "type": "process",
        "isBackground": true,
        "runOptions": {
            "instanceLimit": 1
        },
        "command": "${workspaceFolder}\\.conda\\env\\python.exe",
        "args": [
            "-m",
            "pelican",
            "--autoreload",
            "--listen"
        ],
        "problemMatcher": []
    },&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since this task will be running the internal web server in the background, we mark it with the &lt;code&gt;isBackground&lt;/code&gt; flag and we limit the instances to a single instance in the &lt;code&gt;runOptions&lt;/code&gt;.  This allows us to launch it once from VSCode and any subsequent launch will prompt us to kill it or restart it, avoiding any awkwardness over the single HTTP port.&lt;/p&gt;
&lt;p&gt;We don't bother with a keyboard shortcuts for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike the build task above, there's no support for a global &lt;em&gt;watcher&lt;/em&gt; task that can be overridden; VSCode only supports &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; tasks and nothing else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project specific keyboard shortcuts are not possible.  See &lt;a href="https://github.com/Microsoft/vscode/issues/23757"&gt;Issue #23757&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And of course, we also add an empty &lt;code&gt;problemMatcher&lt;/code&gt; for the same reasons listed above.&lt;/p&gt;</content><category term="about the blog"></category><category term="vscode"></category><category term="pelican"></category></entry><entry><title>How this blog detects broken links</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-detects-broken-links/" rel="alternate"></link><published>2020-11-08T21:25:00-05:00</published><updated>2021-02-01T20:01:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-08:/blog/articles/how-this-blog-detects-broken-links/</id><summary type="html">&lt;p&gt;How to validate local and internet links in markdown files.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;&lt;em&gt;Note: There is a &lt;a href="https://dbarsam.github.io/blog/articles/how-this-blog-detects-broken-links-i/"&gt;follow-up article&lt;/a&gt; updating some outdated information regarding &lt;code&gt;markdown-link-check&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This blog use VSCode's &lt;a href="https://marketplace.visualstudio.com/items?itemName=blackmist.LinkCheckMD"&gt;HTTP/s and relative link checker&lt;/a&gt; extension to check url links in markdown files.  The extension is pretty basic, but it does what it says on the tin and provides a nice shortcut &lt;span class="keys"&gt;&lt;kbd class="key-alt"&gt;Alt&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-l"&gt;L&lt;/kbd&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The blog's pipeline is slightly different and our best option is the &lt;a href="https://github.com/tcort/markdown-link-check"&gt;markdown-link-check&lt;/a&gt; npm package.  However, to make it work with our Pelican based project we'll need to solve a few problems first.&lt;/p&gt;
&lt;h2 id="batch-operation"&gt;Batch Operation&lt;/h2&gt;
&lt;p&gt;The first challenge is that &lt;code&gt;markdown-link-check&lt;/code&gt; only takes one file as a argument.  To handle multiple files, the website recommends using this &lt;code&gt;find&lt;/code&gt; shell command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
find . -name \*.md -exec markdown-link-check {} \;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, that won't work for our Travis-CI powered pipeline.  When Travis is checking the result of that command, it only processes the exit code of the &lt;code&gt;find&lt;/code&gt; command and not the result of &lt;code&gt;markdown-link-check&lt;/code&gt;, which is executed by &lt;code&gt;find&lt;/code&gt;'s &lt;code&gt;exec&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;To fix this, we need to resort to a more basic shell loop -- but even then there are some issues.  First, we need to enable the &lt;code&gt;globstar&lt;/code&gt; shell option, introduced in Bash 4.0:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
shopt -s globstar
for x in **/*.md; do markdown-link-check --verbose "$x"; done&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And second, we need to heed the warnings that the glob &lt;code&gt;**&lt;/code&gt; pattern also traverses symbolic links.  This project is small enough that it doesn't have to worry about that feature, but it's worthwhile to note it and find a safer alternative.&lt;/p&gt;
&lt;p&gt;Fortunately we can combine both solutions.  We'll use &lt;code&gt;find&lt;/code&gt; to generate a list of files, but plug that list into the for loop and submit each file for inspection as a separate shell command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
for file in  $(find ./content -name \*.md); do markdown-link-check --verbose "$file" || exit 1; done;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The extra bit of magic here is that we check the result of &lt;code&gt;markdown-link-check&lt;/code&gt; against the exit command with the short-circuit &lt;em&gt;or&lt;/em&gt; condition (&lt;code&gt;||&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;markdown-link-check&lt;/code&gt; is successful, it returns &lt;code&gt;0&lt;/code&gt; which is the equivalent of True, which then satisfies the &lt;em&gt;or&lt;/em&gt; expressions, so it skips the &lt;code&gt;exit&lt;/code&gt; command, continuing on with the loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;markdown-link-check&lt;/code&gt; is not successful, it returns the equivalent of False, so the shell evaluates the other side of the &lt;em&gt;or&lt;/em&gt; expression and exits the instance with the default error value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ignore-rules"&gt;Ignore Rules&lt;/h2&gt;
&lt;p&gt;We have another problem handling Pelican's shorthand for &lt;a href="https://docs.getpelican.com/en/latest/content.html#linking-to-internal-content"&gt;local links&lt;/a&gt;: &lt;code&gt;{filename}&lt;/code&gt; and &lt;code&gt;{static}&lt;/code&gt;.  These are not valid links but we create a configuration file, &lt;code&gt;.markdown-link-check.json&lt;/code&gt;, and use the &lt;code&gt;ignorePatterns&lt;/code&gt; option to skip those special cases:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "ignorePatterns": [
        {
            "pattern": "^{filename}"
        },
        {
            "pattern": "^{static}"
        }
    ]
}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="travis-ci-integration"&gt;Travis CI Integration&lt;/h2&gt;
&lt;p&gt;We can combine the the batch operation and the configuration into a final command line that makes the job nice and compact:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yaml
- stage: lint
    language: node_js
    node_js:
    - 12
    install:
    - npm install -g npm@latest
    - npm install -g markdown-link-check
    script:
    - for file in  $(find ./content -name \*.md); do markdown-link-check --config .markdown-link-check.json --verbose "$file" || exit 1; done;&lt;/code&gt;&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="travis"></category><category term="bash"></category></entry><entry><title>Qt DLLs in the Windows PATH</title><link href="https://dbarsam.github.io/blog/articles/qt-dll-mismatch/" rel="alternate"></link><published>2020-10-29T11:27:00-04:00</published><updated>2020-10-29T11:27:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-10-29:/blog/articles/qt-dll-mismatch/</id><summary type="html">&lt;p&gt;How to recognize a particular PySide's DLL load failure error in Windows.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;Every couple of months we'll get a report of some Python tool magically failing with a mysterious -- and unhelpful -- &lt;code&gt;DLL load failed&lt;/code&gt; error message.  The error is unfortunately too generic to be helpful, but if the Python tool is a PySide application, then there might be a workaround to solve this problem.&lt;/p&gt;
&lt;h2 id="wrong-dlls"&gt;Wrong DLLs&lt;/h2&gt;
&lt;p&gt;It's easy to validate the problem right away with a simple import from the prompt:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from PySide2 import QtXml
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
ImportError: DLL load failed: The specified module could not be found.
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;QtXml&lt;/code&gt; is just an example module from the &lt;code&gt;PySide2&lt;/code&gt; package, but the above code should work out of the box.  The fact that PySide is failing to load a Qt DLL hints to a common problem with how applications are packaging their Qt DLLs.&lt;/p&gt;
&lt;p&gt;Qt is a 3&lt;sup&gt;rd&lt;/sup&gt; party UI framework and those DLLs are not unique to the application.  If another Qt-using application is installed on the same machine, then what most likely is happening with that failure is that your Qt application is finding the PySide package correctly, but PySide is somehow loading the Qt dlls from the other application instead of its own copies.&lt;/p&gt;
&lt;h2 id="hack-the-windows-dll-search-order"&gt;Hack the Windows DLL Search Order&lt;/h2&gt;
&lt;p&gt;Instead of going into a deep dive about the &lt;a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order"&gt;Windows DLL Search Order&lt;/a&gt;, the easiest workaround is to hack it so that your application's Qt DLL are given the highest priority. One way to do that is to adding the application's folder for Qt DLLs to the front of the &lt;code&gt;PATH&lt;/code&gt; environment variable  You can do this in a permanent or temporary way with a script &lt;code&gt;launcher.cmd&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd
setlocal
set "PATH=C:\Program Files\My Application\bin;%PATH%"
C:\Program Files\My Application\bin\application.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Given that we're working around a conflicts between two (or more) applications, we don't have access to fix it properly.  Instead, it's probably easier to solve this with a launcher script and keep the change local to application.&lt;/p&gt;</content><category term="troubleshooting stories"></category><category term="python"></category><category term="qt"></category><category term="dll"></category></entry><entry><title>VSCode's Word Wrap vs. Preview Sync</title><link href="https://dbarsam.github.io/blog/articles/vscode-editor-preview-sync/" rel="alternate"></link><published>2020-10-15T09:15:00-04:00</published><updated>2020-10-15T09:15:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-10-15:/blog/articles/vscode-editor-preview-sync/</id><summary type="html">&lt;p&gt;VSCode's preview synchronization is a nice feature -- when it works...&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;VSCode has a nice preview engine that allows a side-by-side of text and rendered-text. The feature is best documented in VSCode's native &lt;a href="https://code.visualstudio.com/Docs/languages/markdown"&gt;Markdown&lt;/a&gt; support help, but it's available for other languages and their plugins.&lt;/p&gt;
&lt;p&gt;Within that help page is the section on &lt;a href="https://code.visualstudio.com/Docs/languages/markdown#_editor-and-preview-synchronization"&gt;Editor and Preview Synchronization&lt;/a&gt;.  This is a nice feature but suffers from a locked up, sync-cycle battle between the editor pane and preview pane that leaves the user frustrated and fighting for control of the editor.&lt;/p&gt;
&lt;p&gt;The fun starts when there's a big discrepancy between the screen space  taken by the text editor's monospace text and the previewer's html-looking rendered text.  There are various ways to make this happen, but the one way that seems to be consistent, is to enable the preview and word wrapping at the same time.&lt;/p&gt;
&lt;p&gt;When both options are enabled, the synchronization seems to struggle with the concept of word wrap; after the cursor goes 'below the fold' of the bottom terminal panels, the sync (for some reason) decides to scroll the editor back to top of the file.  But because you're in the middle of typing, the editor then immediately jumps back down to bottom, where the cursor is.  Of course, the synchronization is still active, so the editor jumps back up to the top and the cycle repeats for every keyboard click.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vscode-editor-preview-sync.gif" class="center-image" src="images/vscode-example.gif"&gt;&lt;/p&gt;
&lt;p&gt;This is seems like the same issue described in Visual Code issues #&lt;a href="https://github.com/microsoft/vscode/issues/108582"&gt;108582&lt;/a&gt;, but the comments suggest that people are still suffering from it.  Until it's properly fixed, the best answer is to disable that feature by setting the &lt;code&gt;markdown.preview.scrollEditorWithPreview&lt;/code&gt; setting to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;```json
{
    ....
    "markdown.preview.scrollEditorWithPreview": false,
    ....
}&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;</content><category term="developer set-up"></category><category term="vscode"></category></entry><entry><title>The problem with start-ssh-agent.cmd</title><link href="https://dbarsam.github.io/blog/articles/start-ssh-agent/" rel="alternate"></link><published>2020-10-02T09:44:00-04:00</published><updated>2020-10-02T09:44:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-10-02:/blog/articles/start-ssh-agent/</id><summary type="html">&lt;p&gt;There's a small bit of inconvenience in Git's convenience script.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;When you install Git on Windows, the installer will also install the utility script &lt;code&gt;start-ssh-agent.cmd&lt;/code&gt;.  That script isn't necessarily required to use Git, but if you fall into a narrow category of users who have a particular workflow, you can get tripped up by one of its unfortunate side effects.&lt;/p&gt;
&lt;h2 id="ssh-not-http"&gt;SSH, Not HTTP&lt;/h2&gt;
&lt;p&gt;That workflow starts with command-line Git and 2FA.  2FA is a pretty much the standard security feature for any online service.  Most of the time the 2FA is handled by a web site with a nice UI, but working with it on the Windows command line requires a bit more work.&lt;/p&gt;
&lt;p&gt;Git already provides an authentication layer for connecting to remote repositories.  This is usually a choice between SSH keys or a HTTP username/password prompt.  While SSH is more secure than HTTP, HTTP is easier to understand and requires no set-up.  However, with 2FA enabled, the ease-of-use goes away as 2FA adds an extra handling on top of the HTTP process.  SHH, on the other hand, doesn't required that extra handling as it's already providing the same level of security.  So in the end it's simpler to work with SSH keys -- but SSH security really isn't as easily presentable to the Windows user as it is in Unix system.&lt;/p&gt;
&lt;h2 id="cmd-not-git-bash"&gt;CMD, Not Git Bash&lt;/h2&gt;
&lt;p&gt;After selecting SSH, the next part of the workflow is choosing to use SSH with the Windows command line, aka &lt;code&gt;cmd.exe&lt;/code&gt;.  The challenge there is that &lt;code&gt;cmd.exe&lt;/code&gt; doesn't provide the same functionality that Unix shells do.  Most of the available tutorials that deal Git on Windows will usually use a Git Bash shell because it's bundle with Git and has the same experience as the existing Unix tutorials.&lt;/p&gt;
&lt;p&gt;For example, let's assume that you create a GitHub SSH key using the &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;GitHub docs&lt;/a&gt; and add it to your &lt;code&gt;.ssh&lt;/code&gt; folder.  SSH requires an agent running in the background to handle a persistent connection.  On Bash it's started with the &lt;code&gt;eval `ssh-agent`&lt;/code&gt; command.  The &lt;code&gt;ssh-agent&lt;/code&gt; function returns a collection of environment variables needed by other processes to use the agent:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
db@PC-5559 MINGW64 ~
$ ssh-agent
SSH_AUTH_SOCK=/tmp/ssh-nubDqpgoGDRA/agent.4548; export SSH_AUTH_SOCK;
SSH_AGENT_PID=18568; export SSH_AGENT_PID;
echo Agent pid 18568;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Wrapping this up with the &lt;code&gt;eval&lt;/code&gt; command simply executes that output text as shell script and sets the environment variables.&lt;/p&gt;
&lt;p&gt;There's no equivalent of that in Windows.  Instead, you can use the &lt;code&gt;start-ssh-agent.cmd&lt;/code&gt; script, which is usually installed in &lt;code&gt;C:\Program Files\Git\cmd&lt;/code&gt; and added to the Window's &lt;code&gt;PATH&lt;/code&gt; by the Git installer.  The &lt;code&gt;start-ssh-agent.cmd&lt;/code&gt; is a bit more complex but accomplishes the same thing -- except for a little bit of shenanigans at the end of the script.&lt;/p&gt;
&lt;h2 id="windows-explorer-vs-cmdexe"&gt;Windows Explorer vs cmd.exe&lt;/h2&gt;
&lt;p&gt;The problem with the script is that it misses the mark when it makes a guess about the user's intention.  The script looks at the &lt;code&gt;%cmdcmdline%&lt;/code&gt; environment variable and re-executes the script in a nested call depending on the contents.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd
@ECHO %cmdcmdline% | @FINDSTR /l "\"\"" &amp;gt;NUL
@IF NOT ERRORLEVEL 1 @(
    @CALL cmd %*
)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The variable contains the command line arguments used to launch the &lt;code&gt;cmd.exe&lt;/code&gt; process.  When the script is launched from the command line, it contains &lt;code&gt;"C:\Windows\system32\cmd.exe"&lt;/code&gt;, but when the script is executed from a double click in Windows Explorer, that value is &lt;code&gt;C:\WINDOWS\system32\cmd.exe /c ""C:\Program Files\Git\cmd\start-ssh-agent.cmd" "&lt;/code&gt;.  When the &lt;code&gt;start-ssh-cmd.exe&lt;/code&gt; sees the &lt;code&gt;""&lt;/code&gt; it will launch an interactive child session to keep the command prompt open.&lt;/p&gt;
&lt;p&gt;By itself this isn't really isn't a problem. If the check wasn't there, then the session would naturally terminate as soon as the script ended.  This is useless because any ssh environment variables created would have been local to that short-lived session.&lt;/p&gt;
&lt;h2 id="session-managers"&gt;Session Managers&lt;/h2&gt;
&lt;p&gt;The problem comes in the last stage of the workflow, where you're using a customized Windows shell tool, like with &lt;a href="https://cmder.net"&gt;cmder&lt;/a&gt; or &lt;a href="https://conemu.github.io"&gt;ConeEmu&lt;/a&gt;.  Both tools provide a way to customize and manage multiple shell sessions, which is useful when you need to juggle shells like &lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell?view=vs-2019"&gt;Visual Studio developer shell&lt;/a&gt; or &lt;a href="https://docs.anaconda.com/ae-notebooks/user-guide/basic-tasks/apps/use-terminal/"&gt;Anaconda&lt;/a&gt; in a tab manager.&lt;/p&gt;
&lt;p&gt;If you want to add &lt;code&gt;start-ssh-agent.cmd&lt;/code&gt; to one of those shells, you'll need to pay close attention to the tool's start script.  If it contain the same &lt;code&gt;""&lt;/code&gt; pattern, it will spawn a new, nested session within the original session as it was launched from Windows Explorer.  It won't be readily apparent, but the quickest way to identify this new symptom is if exiting the shell somehow requires two &lt;code&gt;exit&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;The work around (from this &lt;a href="https://github.com/cmderdev/cmder/issues/1807#issuecomment-400504725"&gt;post&lt;/a&gt;) is to supply the &lt;code&gt;/k exit&lt;/code&gt; args to immediately kill the nested session:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd
call "%GIT_INSTALL_ROOT%\cmd\start-ssh-agent.cmd" /k exit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;/k exit&lt;/code&gt; will be passed through to the nested session and quick exit it, leaving the original parent session that your session manager is managing.&lt;/p&gt;</content><category term="developer set-up"></category><category term="ssh"></category><category term="git"></category><category term="cmd"></category></entry><entry><title>How this blog renders code samples</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-renders-code-sample/" rel="alternate"></link><published>2020-09-11T05:15:00-04:00</published><updated>2020-09-11T05:15:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-11:/blog/articles/how-this-blog-renders-code-sample/</id><summary type="html">&lt;p&gt;Notes from trying to get Pelican's code formatting feature properly configured.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore colour colouring
--&gt;
&lt;p&gt;Pelican doesn't handle syntax highlighting out of the box.  You need to add that functionality, which means extending the blog with a collection of configurations, plugins, and Markdown extensions.&lt;/p&gt;
&lt;p&gt;This post is mainly a collection of notes taken from the first pass at enabling the feature.  And while that first pass really didn't conclude in a satisfying way, it did end up with this blog getting some basic code formatting functionality.  The whole exercise could be broken down into 4 different sub-topics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Markdown syntax to denote text as code blocks.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;codehilite&lt;/a&gt; extension to render the html with the correct colour.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; to extend Markdown with additional Markdown syntax features.&lt;/li&gt;
&lt;li&gt;Use the correct configuration to render line numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="handling-code-with-markdown"&gt;Handling Code with Markdown&lt;/h2&gt;
&lt;p&gt;The first part is to use the correct Markdown syntax.  The problem here is that most examples explaining how to do this are written for different flavours of Markdown and may not be applicable to our Pelican powered blog.&lt;/p&gt;
&lt;p&gt;Starting with the basics, Markdown handles code blocks with code fences, denoted by the 3 backticks (&lt;code&gt;```&lt;/code&gt;).  For example, consider the below Markdown:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown
```
This is a monospace code block
```&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This gets rendered as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown
This is a monospace code block&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However that's the basic case and unfortunately, there's more needed to take that and make it display code sample in a Pelican blog.&lt;/p&gt;
&lt;h2 id="syntax-highlighting"&gt;Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;Markdown doesn't handle syntax highlighting.  Instead it passes the code-fence's attributes to the renderer and it interprets in some way.  In most cases, it adds it to the resulting html as a css class.  Consider this bit of Markdown describing Python code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown
```python
print("Hello world")
```&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;python&lt;/code&gt; text there is just an text attribute is passed through to the html as a interpreted as css class for that particular scope.  &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; has a much better explanation about attributes and syntax highlighting in its &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Fenced Code&lt;/a&gt; section, so please refer to that for more information.&lt;/p&gt;
&lt;p&gt;The important thing to note is that in &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; it's actually the &lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;codehilite&lt;/a&gt; extension that is responsible for the syntax highlighting and the actual rendering of the text is controlled by its &lt;code&gt;css_class&lt;/code&gt; option, which by default is also set to &lt;code&gt;codehilite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The basic code fence and the syntax highlighting work pretty much out of the box so there's no need to tinker with the settings.  However, this blog does tinker with the settings because of requiring more specialized way of rendering code blocks.&lt;/p&gt;
&lt;h2 id="nested-code-blocks"&gt;Nested Code Blocks&lt;/h2&gt;
&lt;p&gt;Instructional steps are nice and having those steps point to fully rendered code blocks is even nicer.  This is one part where the standard Markdown specification doesn't really provide a definition and &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; doesn't seem to support it, so this a case where it's up to other groups provide a solution and implement this feature in their Markdown 'flavour'.&lt;/p&gt;
&lt;p&gt;Consider this this bit of Markdown:&lt;/p&gt;
&lt;p&gt;```markdown
1. Step 1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Step 2, but with Python code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print("Hello world")&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3, but with syntax highlighted Python code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print("Hello world")&lt;/code&gt;
```&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This Markdown sample lists a series of steps and, in Step 2 and 3, adds a bit of sample Python code.  The code in Step 2 should render as monospace text, but the code in Step 3 should be rendered with syntax colouring appropriate for Python.  Unfortunately, this is somewhat fragile and only works in a very specific scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Indent your fenced block by an indent at your level (i.e. add extra 4 spaces).&lt;/li&gt;
&lt;li&gt;The fence requires a newline above and below the fenced block, so to be consistent, make the whole list double spaced.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And even then, this is only made possible by some behind the scenes work in our Pelican configuration file.  By default, Pelican is being powered by &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; and that will not render our example correctly.  Instead, we need to first install another package, &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt; and then enable its &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;superfences&lt;/a&gt; extension in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
MARKDOWN = {
    "extension_configs": {
        ....
        'pymdownx.superfences' : {}
        ....
    },
    'output_format': 'html5'
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After that, the aboves renders as expected with the &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt;'s default settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2, but with Python code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text
print("Hello world")&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3, but with syntax highlighted Python code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
print("Hello world")&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="adding-line-numbering"&gt;Adding line numbering&lt;/h2&gt;
&lt;p&gt;Line numbering is handles by &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;superfences&lt;/a&gt; and its help page is great at answering questions.  For this blog, it's important to note that out of the box, there are two options to rendering line numbers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Embedded&lt;/li&gt;
&lt;li&gt;Separate Table Column&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:  &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt; does add third option, &lt;code&gt;pymdownx-inline&lt;/code&gt;, but that's not working with this current theme. Incidentally, this seems to be part of a larger problem of non-working extensions, like &lt;code&gt;markdown.extensions.admonition&lt;/code&gt; and &lt;code&gt;pymdownx.tabbed&lt;/code&gt;, and it's not clear if the fault lies with the theme, Pelican, or something on the blog's configuration side.  As a result, this blog uses the separate table column as configured in thr &lt;code&gt;pelicanconf.py&lt;/code&gt;, under the &lt;code&gt;pymdownx.highlight&lt;/code&gt; extension:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
MARKDOWN = {
    "extension_configs": {
        ....
        'pymdownx.highlight' : {
            ....
            'linenums_style': 'table',
            ....
        }
        ....
    },
    'output_format': 'html5'
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pelicanconf.py&lt;/code&gt; configuration has line number disabled by default. Line numbers are enabled by adding the &lt;code&gt;linenums&lt;/code&gt; attribute to each individual code block with the starting line number as its argument.&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown
```python linenums="3"
for i in range(10):
    print("Hello world!")
print("Goodbye")
```&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Renders this code, with line number starting on line 3.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python linenums="3"
for i in range(10):
    print("Hello world!")
print("Goodbye")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To highlight a specific lines use the &lt;code&gt;hl_lines&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown
```python linenums="5" hl_lines="2-3"
for i in range(10):
    print("Hello world!")
print("Goodbye")
```&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Renders this code, with line number starting on line 5, but highlighted code block lines 2 and 3:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python linenums="5" hl_lines="2-3"
for i in range(10):
    print("Hello world!")
print("Goodbye")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;hl_lines&lt;/code&gt; refers to lines in the code block, not the lines as numbered by &lt;code&gt;linenums&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="line-numbering-and-line-wrapping"&gt;Line Numbering And Line Wrapping&lt;/h2&gt;
&lt;p&gt;There's one small problem with the theme and &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt;.  If a line of code is too long, the theme will wrap the code but not update the line numbering accordingly.  The ends up with mis-aligned line numbering and breaks the feature.&lt;/p&gt;
&lt;p&gt;To work around this, this blog disables word wrapping for code blocks in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file with the &lt;code&gt;legacy_no_wrap_code&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
MARKDOWN = {
    "extension_configs": {
        ....
        'legacy_no_wrap_code' : True,
        'pymdownx.highlight' : {
            ....
            'linenums_style': 'table',
            ....
        }
        ....
    },
    'output_format': 'html5'
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown
```python linenums="5"
for i in range(10):
    print("ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ")
print("Goodbye")
```&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Renders the long line at line &lt;code&gt;6&lt;/code&gt; un-wrapped and preserves the alignment with the table columns:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python linenums="5"
for i in range(10):
    print("ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ")
print("Goodbye")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It's important to also note that this is behaving differently if there were no line numbering at all. For example, the above code block with the &lt;code&gt;linenums&lt;/code&gt; attribute removed renders this code block:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
for i in range(10):
    print("ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ")
print("Goodbye")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above code block is not wrapped, but embedded in a scroll box to work around that.  The problem lies with the table mechanism used for the table column line numbering. Underneath the hood, the code block with &lt;code&gt;linenums&lt;/code&gt; renders this html:&lt;/p&gt;
&lt;p&gt;```html&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;While the one without, renders this html (which is the same as the table cell containing the code in the above example):&lt;/p&gt;
&lt;p&gt;```html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="codehilite"></category><category term="pelican"></category></entry><entry><title>How this blog is themed</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-themes/" rel="alternate"></link><published>2020-09-10T03:19:00-04:00</published><updated>2020-09-10T03:19:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-10:/blog/articles/how-this-blog-themes/</id><summary type="html">&lt;p&gt;The set-up of this blog's theme.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore
--&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; is the tool that makes this static website from the markdown files in the repository.  But, while it has the power to theme the website out of the box, it's not that clear exactly how that is supposed to work.&lt;/p&gt;
&lt;h2 id="getting-the-theme"&gt;Getting the Theme&lt;/h2&gt;
&lt;p&gt;Pelican themes are packaged as a raw bundle of files, but if you're used to CI workflows this concept is rather challenging.  Instead of installing a theme through the Python package managed &lt;code&gt;pip&lt;/code&gt;, Pelican expects the files to be available somewhere on disk first and accesses them at run-time, either via a copy or symlink done with the Pelican utility &lt;a href="https://docs.getpelican.com/en/stable/pelican-themes.html"&gt;pelican-themes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up to this point in the blog set-up, we've been installing Pelican and its components as Python packages pinned at specific versions -- and pinning dependencies is such a basic requirement of pipeline automation that not having it feels like something is missing.  While some developers have made their theme available as packages (e.g. &lt;a href="https://pypi.org/project/plumage/"&gt;Plumage&lt;/a&gt;) most themes are collected as submodules of files in the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes GitHub Project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="embedding-the-theme"&gt;Embedding the Theme&lt;/h2&gt;
&lt;p&gt;There's different strategies to 'embedding' a theme.  This project has added it to the repo as a git submodule.  A git submodule is a git-specific way to embed one repo into another repo at a specific commit.  So instead of specifying a released version of the theme, the git submodule points to a specific code change in the repository.&lt;/p&gt;
&lt;p&gt;Using the [pelican-clean-blog] as an example, we first add the submodule through git:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
git submodule add https://github.com/gilsondev/pelican-clean-blog pelican/themes/pelican-clean-blog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you're working on window you'll need to watch out for file paths with slashes.  If you have any error that's like this,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
fatal: No url found for submodule path 'pelican/themes/pelican-clean-blog' in .gitmodules&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Change the slashes from the escaped window slashes &lt;code&gt;pelican\\themes\\pelican-clean-blog&lt;/code&gt; to the unix slashes &lt;code&gt;pelican/themes/pelican-clean-blog&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="enabling-the-theme"&gt;Enabling the Theme&lt;/h2&gt;
&lt;p&gt;After the files are on disk Pelican expects the theme to be enabled in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file.  First you set the theme's relative path with the &lt;code&gt;THEME&lt;/code&gt; variable and then set any other auxillary theme setting with more variables:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1 id="_1"&gt;&lt;/h1&gt;
&lt;h1 id="the-theme"&gt;The Theme&lt;/h1&gt;
&lt;h1 id="_2"&gt;&lt;/h1&gt;
&lt;p&gt;THEME = 'pelican/themes.pelican-clean-blog'&lt;/p&gt;
&lt;h1 id="_3"&gt;&lt;/h1&gt;
&lt;h1 id="the-theme-specific-settings"&gt;The Theme Specific Settings&lt;/h1&gt;
&lt;h1 id="_4"&gt;&lt;/h1&gt;
&lt;p&gt;HEADER_COVER = 'images/home-bg.png'
HEADER_COLOR = '#004a59'
COLOR_SCHEME_CSS = 'tomorrow_night.css'
EXTRA_PATH_METADATA = {
    'extra/favicon.ico': {'path': 'favicon.ico'}
}
CSS_OVERRIDE = 'extra/css/custom.css'
```&lt;/p&gt;
&lt;p&gt;This should now be visible if the build or run the live local server:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console
python -m pelican --autoreload --listen&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="theme-as-submodule"&gt;Theme as Submodule&lt;/h2&gt;
&lt;p&gt;Like a rug, a good theme really ties the whole website together.  So I appreciate the work that goes into making one; however, the one point I can't get over is use of copying and pasting files to install the theme.  While using submodules to embed the theme is a good step towards being modular, it feels dated and the wrong tool -- especially when we're already using Python packages.   Hopefully, this is just a transition.  It looks like Pelican 4.0 did start to push for better extension organization, but the current focus is on &lt;a href="https://github.com/pelican-plugins"&gt;Pelican Plugins&lt;/a&gt;.  Most of development for the themes in the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes GitHub Project&lt;/a&gt; appears to be stagnant, and only a few talk about supporting Pelican 4.0, and of those even fewer publish their themes as Python package.&lt;/p&gt;</content><category term="about the blog"></category><category term="github"></category><category term="pelican"></category><category term="pipeline"></category><category term="python"></category><category term="travis"></category></entry><entry><title>How this blog works</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-works/" rel="alternate"></link><published>2020-09-08T01:29:00-04:00</published><updated>2020-09-08T01:29:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-08:/blog/articles/how-this-blog-works/</id><summary type="html">&lt;p&gt;The pieces that make up this blog's backend.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore publishconf
--&gt;
&lt;p&gt;This project is a blog with a pipeline.  The pipeline compiles the project's text files into static html pages and pushes them to a host which then displays it as a website.  The whole process is split along these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All content for this blog is stored as files in a project on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Articles (written in &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, a plain text mark up language) are submitted as files into the project via Git, the source control of the project.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.com"&gt;Travis-CI&lt;/a&gt;, which has been watching the source control, reacts to any change by Git by creating and launching a build pipeline on one of its servers.&lt;/li&gt;
&lt;li&gt;Part of the build pipeline launches &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and generates all html pages from the project markdown files.&lt;/li&gt;
&lt;li&gt;Another part &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;submits the html files&lt;/a&gt; to the &lt;code&gt;gh-pages&lt;/code&gt; branch back on GitHub, where Github displays anything on the &lt;code&gt;gh-pages&lt;/code&gt; branch a static web site.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="github"&gt;GitHub&lt;/h2&gt;
&lt;p&gt;This project and all of its content is stored and hosted on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.  There's already too much information about getting started with GitHub so this article assumes that that information is already known.  However, it is important to note that this project is using GitHub in a relatively simple way -- as a &lt;em&gt;static html site&lt;/em&gt;, hosted by &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;GitHub Pages&lt;/a&gt; -- and does not use any of the other features that it offers.  For example, this project does not use Jekyll so any mention of that can be ignored.&lt;/p&gt;
&lt;h2 id="markdown"&gt;Markdown&lt;/h2&gt;
&lt;p&gt;The actual content of the files is stored as &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; files all in the &lt;code&gt;content/&lt;/code&gt; folder in a flat listing.  Markdown is a markup language that is easy to read in plain text form and is popular enough that it just makes sense to use it instead of something else.&lt;/p&gt;
&lt;p&gt;However, the blog converts markdown to html with the &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; library and uses some custom features provided by &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;PyMdown Extensions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="travis-ci"&gt;Travis CI&lt;/h2&gt;
&lt;p&gt;This project's automated actions are executed on &lt;a href="https://travis-ci.com"&gt;Travis-CI&lt;/a&gt;.  Like GitHub, there are almost too many tutorials about how to get started with Travis; services.  This project is using Travis in a relatively simple way and most of the work is handled by the built-in &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;support of GitHub Pages&lt;/a&gt;.  The &lt;code&gt;.travis-ci.yml&lt;/code&gt; file in this project defines two jobs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Markdown Linting with &lt;a href="https://github.com/DavidAnson/markdownlint"&gt;MarkdownLint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yaml
- stage: lint
  language: node_js
  node_js:
    - 12
  install:
    - npm install -g npm@latest
    - npm install -g markdownlint-cli
  script:
    - markdownlint **/*.md&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build with &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and publish to &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yaml
- stage: build
  language: python
  python:
    - 3.6
  install:
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
  script:
    - make publish
  deploy:
    provider: pages
    skip_cleanup: true
    strategy: git
    token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable
    keep_history: true
    local_dir: output
    on:
      branch: master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pelican"&gt;Pelican&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; is the tool that generates the static website from the markdown files.  Pelican is a Python package and is installed by Python's package manager, &lt;code&gt;pip&lt;/code&gt;.  All dependency and their respective versions are listed in the project's &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pelican's configuration files are also written in Python and Pelican's default set-up splits the configuration into two files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; for local development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt; for publishing (which imports &lt;code&gt;pelicanconf.py&lt;/code&gt; and overrides any setting needed for publishing a website).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pelican's default set-up also simplifies the execution by providing a convenience &lt;code&gt;Makefile&lt;/code&gt;.  The &lt;code&gt;Makefile&lt;/code&gt; is an standard convention that contains pre-configured commands for various tasks.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.travis-ci.yml&lt;/code&gt; files executes all of the set-up and Pelican steps during the build and publish step.&lt;/p&gt;
&lt;h2 id="the-gh-pages-branch"&gt;The &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/h2&gt;
&lt;p&gt;GitHub Pages is one of the features that comes with every project and its only job is to display a collection of html files as a website.  Even with that scope, there's still a lot of the different ways to use that feature; a quick search on GitHub Pages will find tutorials that seem contradictory or mention seemly irrelevant or confusing configurations.  This project is creating a &lt;em&gt;project site&lt;/em&gt; (not a &lt;em&gt;user site&lt;/em&gt; or &lt;em&gt;organization&lt;/em&gt;) where the final url will be something like  &lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt;.  More information is available from the &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites"&gt;GitHub Pages Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gh-pages&lt;/code&gt; branch is a git branch named &lt;code&gt;gh-pages&lt;/code&gt;.  There is nothing special about the branch, except that &lt;code&gt;gh-pages&lt;/code&gt; is the default value for that branch that GitHub uses for as a &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites"&gt;publishing source&lt;/a&gt;.  Travis-Ci follows GitHub's lead and its publish commanded uses &lt;code&gt;gh-pages&lt;/code&gt; as a default value its &lt;code&gt;target_branch&lt;/code&gt; setting.&lt;/p&gt;</content><category term="about the blog"></category><category term="github"></category><category term="markdown"></category><category term="pelican"></category><category term="pipeline"></category><category term="python"></category><category term="travis"></category></entry></feed>