<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>#Dev - about the blog</title><link href="https://dbarsam.github.io/blog/" rel="alternate"></link><link href="https://dbarsam.github.io/blog/feeds/about-the-blog.atom.xml" rel="self"></link><id>https://dbarsam.github.io/blog/</id><updated>2021-01-22T19:13:00-05:00</updated><subtitle>A collection of software development notes</subtitle><entry><title>How this blog manages article assets</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/" rel="alternate"></link><published>2021-01-22T19:13:00-05:00</published><updated>2021-01-22T19:13:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-22:/blog/articles/how-this-blog-manages-article-assets/</id><summary type="html">&lt;p&gt;How to use Autostatic to re-organize Pelican's default article structure to be more article specific.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore autostatic alexandre fonseca's pelly pdfs pelicanconf staticattach
--&gt;
&lt;p&gt;Sooner or later, an article will require an attachment.  These accompanying non-markdown files are usually images, maybe pdfs, or even fully working pieces of code that are referenced by the article.&lt;/p&gt;
&lt;p&gt;How exactly to best manage these extra files is more preference than best practice. This article examines a strategy that makes articles and their respective assets more modular than what's available with the default settings.&lt;/p&gt;
&lt;h2 id="pelican-asset-management"&gt;Pelican Asset Management&lt;/h2&gt;
&lt;p&gt;Pelican treats the articles and assets as two different types of source material.  The article are, of course, &lt;a href="https://docs.getpelican.com/en/latest/content.html#articles-and-pages"&gt;articles&lt;/a&gt;, but to Pelican, the assets are &lt;a href="https://docs.getpelican.com/en/latest/content.html#static-content"&gt;static files&lt;/a&gt;.  And yes, there's the third class of content, pages, but we'll ignore them for now.&lt;/p&gt;
&lt;p&gt;Pelican also splits the discovery and processing of these assets into two distinct operations.  So while the markdown files and the accompanying image files could be stored next to each other, the Pelican build process could move them to different locations.&lt;/p&gt;
&lt;p&gt;If you're used to writing Markdown in VSCode (or any other tool that immediately renders Markdown) this may be a bit jarring. Everything could very well appear to work in the editor only to mysteriously break in the final website update.&lt;/p&gt;
&lt;h2 id="global-assets"&gt;Global Assets&lt;/h2&gt;
&lt;p&gt;Out of the box, Pelican works with the following example structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;project/&lt;/span&gt;
&lt;span class="go"&gt;├── content&lt;/span&gt;
&lt;span class="go"&gt;│   ├── articles/&lt;/span&gt;
&lt;span class="go"&gt;│   │   ├── article1.md&lt;/span&gt;
&lt;span class="go"&gt;│   │   └── article2.md&lt;/span&gt;
&lt;span class="go"&gt;│   ├── images/&lt;/span&gt;
&lt;span class="go"&gt;│   │   └── pelly.png&lt;/span&gt;
&lt;span class="go"&gt;│   ├── pdfs/&lt;/span&gt;
&lt;span class="go"&gt;│   │   └── pelly.pdf&lt;/span&gt;
&lt;span class="go"&gt;│   └── pages/&lt;/span&gt;
&lt;span class="go"&gt;│       └── test.md&lt;/span&gt;
&lt;span class="go"&gt;└── pelican.conf.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;articles&lt;/code&gt; and &lt;code&gt;pages&lt;/code&gt; are both separate types of content and have their own distinct discovery options, the respective &lt;code&gt;ARTICLE_PATH&lt;/code&gt; and &lt;code&gt;PAGES_PATH&lt;/code&gt; settings.  However, the &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;pdf&lt;/code&gt; are static files and are discovered by the &lt;code&gt;STATIC_PATHS&lt;/code&gt; setting.  These are all documented in the &lt;a href="https://docs.getpelican.com/en/latest/settings.html#url-settings"&gt;url settings&lt;/a&gt; section of the Pelican options page.&lt;/p&gt;
&lt;p&gt;The thing to not here is that both the image and pdf files in that structure are separated from their respective articles.  This makes sense if these assets are meant to be accessible from multiple articles and/or pages in the website.  However, if those assets are article specific, then this layout does not make sense.  As more articles are added to this structure it will be harder to track which asset is referred to by which source.&lt;/p&gt;
&lt;h2 id="article-specific-assets"&gt;Article Specific Assets&lt;/h2&gt;
&lt;p&gt;To make things more modular, we keep the assets specific to the article along side the article.  In our above example, this would transform &lt;code&gt;article1&lt;/code&gt; from a file into a folder containing the image, the pdf, and the respective article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;project/&lt;/span&gt;
&lt;span class="go"&gt;├── content&lt;/span&gt;
&lt;span class="go"&gt;│   ├── articles/&lt;/span&gt;
&lt;span class="go"&gt;│   │   ├── article1/&lt;/span&gt;
&lt;span class="go"&gt;│   │   │   ├── images/&lt;/span&gt;
&lt;span class="go"&gt;│   │   │   │   └── pelly.png&lt;/span&gt;
&lt;span class="go"&gt;│   │   │   ├── pdfs/&lt;/span&gt;
&lt;span class="go"&gt;│   │   │   │   └── pelly.pdf&lt;/span&gt;
&lt;span class="go"&gt;│   │   │   └── article.md&lt;/span&gt;
&lt;span class="go"&gt;│   │   └── article2.md&lt;/span&gt;
&lt;span class="go"&gt;│   └── pages/&lt;/span&gt;
&lt;span class="go"&gt;│       └── test.md&lt;/span&gt;
&lt;span class="go"&gt;└── pelican.conf.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this work, we first configure Pelican to generate slug folders instead of individual pages.  We do this easily enough with the following settings into our &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above settings configure Pelican to discover files in the &lt;code&gt;articles&lt;/code&gt; folder, save them as &lt;code&gt;index.html&lt;/code&gt; files in the pages's &lt;code&gt;slug&lt;/code&gt; folder, and update the url to the cleaner folder style.  The &lt;code&gt;slug&lt;/code&gt; value comes from the article's slug &lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;metadata field&lt;/a&gt;, which we set at the top of each article.&lt;/p&gt;
&lt;p&gt;The next part is to configure Pelican to move the assets to a relative folder inside the slug folder instead of the global folder.  This is done by &lt;a href="https://docs.getpelican.com/en/latest/content.html#attaching-static-files"&gt;attaching&lt;/a&gt; the files to the article with the &lt;code&gt;{attach}&lt;/code&gt; keyword inside our &lt;code&gt;article1\article.md&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="tabbed-set" data-tabs="1:2"&gt;&lt;input checked id="__tabbed_1_1" name="__tabbed_1" type="radio"&gt;&lt;label for="__tabbed_1_1"&gt;Markdown&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;---
Title: Test Article
Category: test
Date: 2014-10-31
&lt;span class="gu"&gt;Slug: article1&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

This is an image:

![&lt;span class="nt"&gt;pelly.png&lt;/span&gt;](&lt;span class="na"&gt;{attach}images/pelly.png&lt;/span&gt;)

This is a link to a [pdf] files.

[&lt;span class="nl"&gt;pdf&lt;/span&gt;]: &lt;span class="na"&gt;{attach}pdfs/pelly.pdf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;input id="__tabbed_1_2" name="__tabbed_1" type="radio"&gt;&lt;label for="__tabbed_1_2"&gt;Result&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;p&gt;This is an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelly.png" src="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/images/pelly.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a link to a &lt;a href="https://dbarsam.github.io/blog/articles/how-this-blog-manages-article-assets/pdfs/pelly.pdf"&gt;pdf&lt;/a&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just like the &lt;code&gt;{static}&lt;/code&gt; and &lt;code&gt;{filename}&lt;/code&gt; tag, Pelican uses a &lt;code&gt;{attach}&lt;/code&gt; tag to mark the link for special handling.  Here,Pelican will move the asset relative to the referring file instead of the more global location denoted by &lt;code&gt;{static}&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="the-autostatic-plugin"&gt;The AutoStatic Plugin&lt;/h2&gt;
&lt;p&gt;The attach method works well for assets that are directly linked to the article.  This doesn't work for internal assets,like custom css or javascript files.  Those files are not displayed like an image or a download link so there is no way to &lt;code&gt;{attach}&lt;/code&gt; them to the article.&lt;/p&gt;
&lt;p&gt;Fortunately, Alexandre Fonseca's &lt;a href="https://github.com/AlexJF/pelican-autostatic"&gt;autostatic plugin&lt;/a&gt; handles these internal assets quite nicely.  His plugin creates a new &lt;code&gt;{static}&lt;/code&gt; tag that acts the same as the &lt;code&gt;{attach}&lt;/code&gt; tag while also extending it with additional options.&lt;/p&gt;
&lt;p&gt;There's more info in the project's readme, but one nice feature is it ability to read the tag from anywhere in the article -- including the metadata section.  That allows us to lump all of the assets into a single place and removes any non-markdown tag from the actual article.&lt;/p&gt;
&lt;p&gt;Consider our example from above where we used the &lt;code&gt;{attach}&lt;/code&gt; tag in the links to the png and pdf files.  With &lt;code&gt;autostatic&lt;/code&gt; we can restore those links to &lt;em&gt;pure&lt;/em&gt; markdown links and register all local assets in the metadata:&lt;/p&gt;
&lt;div class="tabbed-set" data-tabs="2:2"&gt;&lt;input checked id="__tabbed_2_1" name="__tabbed_2" type="radio"&gt;&lt;label for="__tabbed_2_1"&gt;Markdown&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;---
Title: Test Article
Category: test
Date: 2014-10-31
Slug: article1
Attachments:
    &lt;span class="k"&gt;-&lt;/span&gt; &amp;#39;{static images/pelly3.png}&amp;#39;
&lt;span class="gu"&gt;    - &amp;#39;{static pdfs/pelly3.pdf}&amp;#39;&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

This is an image:

![&lt;span class="nt"&gt;pelly2.png&lt;/span&gt;](&lt;span class="na"&gt;images/pelly2.png&lt;/span&gt;)

This is a link to a [another pdf] files.

[&lt;span class="nl"&gt;another pdf&lt;/span&gt;]: &lt;span class="na"&gt;pdfs/pelly2.pdf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;input id="__tabbed_2_2" name="__tabbed_2" type="radio"&gt;&lt;label for="__tabbed_2_2"&gt;Result&lt;/label&gt;&lt;div class="tabbed-content"&gt;
&lt;p&gt;This is an image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelly2.png" src="images/pelly2.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a link to a &lt;a href="pdfs/pelly2.pdf"&gt;another pdf&lt;/a&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There's a few things to note with our example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We created a new metadata field, &lt;code&gt;Attachment&lt;/code&gt;, but that name is arbitrary and it could be called anything, like &lt;code&gt;Files&lt;/code&gt; or even &lt;code&gt;Assets&lt;/code&gt;.  Pelican allows dynamically created metadata fields, as long as it doesn't conflict with &lt;a href="https://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;existing metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The plugin scans the rendered metadata and the rendered html document, processing any &lt;code&gt;{static}&lt;/code&gt; tag defined by the &lt;code&gt;AUTOSTATIC_REFERENCE_PATTERN&lt;/code&gt; regex expression.  Any matching files are copied to the respective location and any references in the metadata or html is replaced with the qualified url, so as along as the file is referenced at least once, it will be copied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The example's YAML has formatted the metadata as a list of strings. This is to work around some YAML processor which might interpret the raw &lt;code&gt;- { .... }&lt;/code&gt; as a list item referencing a mal-formed dictionary. We work around that by escaping the expression as a string &lt;code&gt;- `{ .... }`&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The plugin is a little too greedy with processing the various &lt;code&gt;{static}&lt;/code&gt; tags in the file.  Out of the box, the plugin  will process everything, including any references in code samples -- even through it should be ignored because the content is rendered in a &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; html block.&lt;/p&gt;
&lt;p&gt;To work around that, this site changes the plugin's  &lt;code&gt;AUTOSTATIC_REFERENCE_PATTERN&lt;/code&gt; setting to explicitly use the metadata's single line usage of &lt;code&gt;- '{static ...}'&lt;/code&gt;.  We do this by changing the regex pattern in the &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AUTOSTATIC_REFERENCE_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;^- &amp;#39;{static(?:\s+|\|)((?:&amp;quot;|&amp;#39;)?)(?P&amp;lt;path&amp;gt;[^\1=]+?)\1(?:(?:\s+|\|)(?P&amp;lt;extra&amp;gt;.*))?\s*}&amp;#39;$&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works because the plugin processes the rendered html as a single block of text and processes each value in the metadata list as single lines that starts with a &lt;code&gt;-&lt;/code&gt; and ends with the &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a little bit of configuration, the &lt;code&gt;autostatic&lt;/code&gt; plugin does a pretty good job of solving our problem.  Not only does the plugin allow us to use article assets in a more relative way, but it also gives us the ability to link all assets as attachments via the metadata section.  Wether intentional or not, this not only make asset management more modular, but also promotes a similar workflow pattern used by other CMS platforms.&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="pelican"></category></entry><entry><title>Pelican, Markdown, and Front Matter</title><link href="https://dbarsam.github.io/blog/articles/pelican-markdown-and-front-matter/" rel="alternate"></link><published>2021-01-20T14:10:00-05:00</published><updated>2021-01-20T14:10:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-20:/blog/articles/pelican-markdown-and-front-matter/</id><summary type="html">&lt;p&gt;A probably incomplete introduction to managing markdown front matter in a Pelican powered blog.&lt;/p&gt;</summary><content type="html">&lt;!--
spell-checker:ignore deliminators frontmark jekkyl elio struyf contenttype lastmod
--&gt;

&lt;p&gt;A person with a blog should care about front matter -- and an engineer with a blog should care about making caring about front matter as easy as possible.  This article is the start of that caring, where we dive into concept of front matter, see what's options are available for our Pelican blog, and end with an almost satisfactory workflow.&lt;/p&gt;
&lt;h2 id="pelican-markdown-and-front-matter"&gt;Pelican, Markdown, and Front Matter&lt;/h2&gt;
&lt;p&gt;It's a little unclear if there is a standard for blog post metadata.  Pelican has its own set of metadata fields, defined in the &lt;a href="https://docs.getpelican.com/en/latest/content.html#file-metadata"&gt;Pelican help&lt;/a&gt;, but they don't necessarily map to what other system are using.  This is a known issue with the Pelican team and you can track that conversation over at &lt;a href="https://github.com/getpelican/pelican/issues/350"&gt;Issue #350&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But even if we move past Pelican's design decision, there is another level of inconsistency.  Most Markdown based websites are coalescing around a YAML based front matter style, largely championed by the Pelican competitors, like &lt;a href="https://jekyllrb.com/docs/front-matter/"&gt;Jekyll&lt;/a&gt; or &lt;a href="https://gohugo.io/content-management/front-matter/"&gt;Hugo&lt;/a&gt;.  But because Markdown is Pelican's secondary language, after reStructured Text, Pelican doesn't support the language natively.  Instead, it defers to the &lt;a href="https://python-markdown.github.io/extensions/meta_data/"&gt;python-markdown&lt;/a&gt; extension, which doesn't quite follow the crowd:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternatively, You may use YAML style deliminators to mark the start and/or end of your meta-data. When doing so, the first line of your document must be ---. The meta-data ends at the first blank line or the first line containing an end deliminator (either &lt;code&gt;---&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt;), whichever comes first. Even though YAML deliminators are supported, meta-data is not parsed as YAML.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So unfortunately, Pelican's current handling of Markdown front matter is limited to a set of Pelican specific keywords and processed by a YAML-light parser.&lt;/p&gt;
&lt;h2 id="the-broken-pelican-front-matter-plugin"&gt;The Broken Pelican Front Matter Plugin&lt;/h2&gt;
&lt;p&gt;Fortunately, Axle H. has developed the &lt;a href="https://github.com/noirbizarre/pelican-frontmark/"&gt;pelican-frontmark&lt;/a&gt; Python library, which is a Pelican plugin that adds the missing YAML support via the &lt;a href="https://pyyaml.org/"&gt;PyYAML&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;Unfortunately, it looks like development on it has stopped.  It's suffering from a deprecation problem, introduced in this &lt;a href="https://github.com/getpelican/pelican/pull/2644#issuecomment-548304256"&gt;pull request&lt;/a&gt; from Pelican.  It was fixed in &lt;a href="https://github.com/noirbizarre/pelican-frontmark/pull/2"&gt;PR #2&lt;/a&gt;, but it has yet to be reviewed and accepted.&lt;/p&gt;
&lt;p&gt;There's another bug in &lt;code&gt;pelican-frontmark&lt;/code&gt;, openly discussed in its &lt;a href="https://github.com/noirbizarre/pelican-frontmark/issues/1"&gt;Issue #1&lt;/a&gt;.  The &lt;a href="https://pyyaml.org/"&gt;PyYAML&lt;/a&gt; parser is too good and automatically converts recognizable text chunks to known Python types before Pelican processes the metadata.  This means that when &lt;code&gt;PyYAML&lt;/code&gt; comes across a date, it will convert the value from text to the Python native &lt;code&gt;datetime&lt;/code&gt; object and store that type.  However Pelican expects &lt;code&gt;str&lt;/code&gt; and not &lt;code&gt;datetime&lt;/code&gt; objects, so you may see the following exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;    &lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;\&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;       &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;
    &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;....\pelican\generators.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;633&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_context&lt;/span&gt;
            &lt;span class="n"&gt;context_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;....\pelican&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;eaders.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;573&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;....\pelican-frontmark&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s2"&gt;rontmark&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;eader.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;138&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_parse_metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;....\pelican-frontmark&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s2"&gt;rontmark&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;eader.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;184&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_parse_metadata&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;....\pelican&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;eaders.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;process_metadata&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;METADATA_PROCESSORS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;....\pelican&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;eaders.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a work around that does not require any code modification.  You need to configure your Pelican system to use &lt;em&gt;unrecognizable&lt;/em&gt; date formats like &lt;code&gt;2020-12-20 10:04&lt;/code&gt; instead of &lt;code&gt;datetime&lt;/code&gt;-parsable ones, like &lt;code&gt;2020-12-20T10:04:07.000Z&lt;/code&gt;.  The &lt;code&gt;PyYAML&lt;/code&gt; parser will simply skip over the unrecognizable dates and leave it as text, which is what Pelican's &lt;code&gt;get_date&lt;/code&gt; function expects.&lt;/p&gt;
&lt;p&gt;However, that work around does not fix the deprecation problem so we're still stuck with a broken plugin.  We could fix the plugin and get YAML style front matter working, but that's a task for another day.&lt;/p&gt;
&lt;h2 id="category-vs-categories"&gt;Category vs Categories&lt;/h2&gt;
&lt;p&gt;Before we move onto something that is actually working, we first need to reconcile the design difference outlined in Pelican's &lt;a href="https://github.com/getpelican/pelican/issues/350"&gt;issue #350&lt;/a&gt;.  To begin, we need to talk about the the three different ways to assign search engine friendly labels to an article:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Keywords&lt;/li&gt;
&lt;li&gt;Categories&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="tags-keywords-categories"&gt;Tags, Keywords, Categories&lt;/h3&gt;
&lt;p&gt;Tags and keywords seem to be used interchangeably depending on which publishing system you're using.&lt;/p&gt;
&lt;p&gt;Traditionally, keywords are words that exist in the content itself, probably in the title or important paragraphs.  They are the shorthand way to describe the article's topic and lend themselves to creating traditional indexes, you know, where all the pages referencing a topic are organized in an listing in the back of a book.&lt;/p&gt;
&lt;p&gt;There's not an equivalent for tags.  Instead, it appears that tags are built from a collection of keywords and are specific to the system displaying the content.  It's easy to get confused when you see the case of tags that only contain single keywords.&lt;/p&gt;
&lt;p&gt;And then there are categories, which seem to operate at a higher level than keywords or tags.  They are more like themes that group one or more articles together.  These articles may have different topics (i.e. keywords and tags), but still be part of a user-defined collection collection.&lt;/p&gt;
&lt;p&gt;Pelican supports multiple tags and keywords, but it only support a single category per article.  This conflicts with other system that support multiple catagories -- or even nested categories.  Again, see Pelican's &lt;a href="https://github.com/getpelican/pelican/issues/350"&gt;Issue #350&lt;/a&gt; for the final word on this.&lt;/p&gt;
&lt;h3 id="front-matter-fields"&gt;Front Matter Fields&lt;/h3&gt;
&lt;p&gt;When it comes to front matter then, most systems prefer the multiple categories stored in the &lt;code&gt;categories&lt;/code&gt; metadata field.  However, Pelican sticks to the single category with the &lt;code&gt;category&lt;/code&gt; metadata field.  This is frustrating to somebody that likes agnostic systems as neither system has been design with that compatibility in mind (well, maybe [Jekkyl]).&lt;/p&gt;
&lt;p&gt;For example, a system processing the &lt;code&gt;category&lt;/code&gt; field will not recognize the equivalent of a single value in the &lt;code&gt;categories&lt;/code&gt; field.  Like wise, a system processing the &lt;code&gt;categories&lt;/code&gt; field will not read in the equivalent 'list of size 1' value from the &lt;code&gt;category&lt;/code&gt; field.  The user is forced to pick a side between camps &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;categories&lt;/code&gt;, which is unfortunate because the content should be free of any platform specific manipulation.  Content that is platform agnostic is open to be processed by other platforms and -- more importantly -- accessed by universal tools that make writing articles easier.&lt;/p&gt;
&lt;h2 id="vscodes-front-matter-extension"&gt;VSCode's 'Front Matter' Extension&lt;/h2&gt;
&lt;p&gt;VSCode is already the daily driver for work so it was a pleasant surprise to find that Elio Struyf and friends have created &lt;a href="https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-front-matter"&gt;Front Matter&lt;/a&gt;, an extension that turns the editor in a content management system.  The extension is in active development and really leverages the plugin framework of Visual Studio Code to deliver a nice user experience.&lt;/p&gt;
&lt;h3 id="pelican-specific-settings"&gt;Pelican Specific Settings&lt;/h3&gt;
&lt;p&gt;In the context of our Pelican blog, the plugin adapts quite well.  We're able to configure Front Matter it for Pelican via the following settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Configure the date format to the expected format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.taxonomy.dateFormat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YYYY-MM-DD H:mm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the draft field from the &lt;code&gt;boolean&lt;/code&gt; to a Pelican enum &lt;code&gt;choice&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.content.draftField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;choice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;choices&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;published&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify the modified field from &lt;code&gt;lastmod&lt;/code&gt; to &lt;code&gt;modified&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.taxonomy.modifiedField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;modified&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the description field from &lt;code&gt;description&lt;/code&gt; to &lt;code&gt;summary&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.taxonomy.seoDescriptionField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the arrays from YAML lists to comma separated fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.taxonomy.commaSeparatedFields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the YAML quoting from all respective fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.taxonomy.noPropertyValueQuotes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;modified&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-content-panel"&gt;The Content Panel&lt;/h3&gt;
&lt;p&gt;FrontMatter also provides a new VSCode &lt;a href="https://frontmatter.codes/docs/panel#metadata"&gt;side panel&lt;/a&gt; that acts as a metadata editor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="default-contenttype.png" class="center-image" src="images/front-matter-panel.png"&gt;&lt;/p&gt;
&lt;p&gt;What's great about this, is that it can also be completely customized by specifying the fields in the project's &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The panel can have multiple configurations depending on documentation types.  This Pelican blog only have one type, &lt;code&gt;article&lt;/code&gt;, so we add a new view that matches an article's &lt;code&gt;type&lt;/code&gt; metadata.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;frontMatter.taxonomy.contentTypes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;article&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Publishing date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;datetime&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Last modified date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;modified&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;datetime&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Header Image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;header_cover&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;choice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;choices&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/images/article-bg.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Article Header&amp;quot;&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="err"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It works great, except for one small hitch.  The extension provides a nice tag selection UI for tags, keywords, and categories, and binds to a &lt;a href="https://frontmatter.codes/docs/content-types#how-it-works"&gt;known type&lt;/a&gt; but it doesn't allow us to remap that type to a different field.&lt;/p&gt;
&lt;p&gt;For example, we can use the Front Matter UI for YAML &lt;code&gt;categories&lt;/code&gt; field but we can't remap it to the Pelican's &lt;code&gt;category&lt;/code&gt; field.  We can do this with other fields, like &lt;code&gt;drafts&lt;/code&gt;, but &lt;code&gt;categories&lt;/code&gt; looks like it is hard coded at this point.  So, as a work around, we specify the Pelican field &lt;code&gt;category&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt; field and keep the &lt;code&gt;categories&lt;/code&gt; field around, well, for fun until a solution is found:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After jumping through all the hoops, Front Matter is a pretty good extension.  It's pretty powerful too, probably designed for something more complicated than a simple blog.  However, it really nails down the front matter management and is only hampered by an awkward user request to work with an incomplete Markdown implementation provided by Pelican.&lt;/p&gt;</content><category term="about the blog"></category><category term="front matter"></category><category term="markdown"></category><category term="pelican"></category><category term="vscode"></category></entry><entry><title>How this blog centers images</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-centers-images/" rel="alternate"></link><published>2021-01-15T18:45:00-05:00</published><updated>2021-01-15T18:45:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-15:/blog/articles/how-this-blog-centers-images/</id><summary type="html">&lt;p&gt;One of the many ways to center an image with Markdown and CSS in a Pelican blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a common question that has almost an infinite number of answers:  &lt;a href="https://stackoverflow.com/questions/3912694/using-markdown-how-do-i-center-an-image-and-its-caption"&gt;How do I center an image in Markdown&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;The solution (for this blog, at least) comes in two parts:  CSS and Markdown Attributes.&lt;/p&gt;
&lt;h2 id="css-classes"&gt;CSS Classes&lt;/h2&gt;
&lt;p&gt;We skip over any embedded HTML shenanigans and go for the CSS option.  There, we define two new CSS classes.  One will handle images and another one to handle text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;center-image&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;center-text&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We write them in the site's &lt;code&gt;custom.css&lt;/code&gt; file (&lt;code&gt;extra/css/custom.css&lt;/code&gt;) and we inject that into the current &lt;a href="https://github.com/gilsondev/pelican-clean-blog"&gt;theme&lt;/a&gt; via its &lt;a href="https://github.com/gilsondev/pelican-clean-blog#user-defined-css"&gt;CSS_OVERRIDE&lt;/a&gt; setting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CSS_OVERRIDE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/css/custom.css&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configuration expose the CSS class names for the Markdown parser to later manipulate.&lt;/p&gt;
&lt;h2 id="attributes"&gt;Attributes&lt;/h2&gt;
&lt;p&gt;With the classes defined, we link them to the Markdown element via attributes.  Attributes are a non-standard feature, provided by Python Markdown's &lt;a href="https://python-markdown.github.io/extensions/attr_list"&gt;attr_list&lt;/a&gt; extension, that makes CSS attributes accessible in Markdown syntax.  Without attributes, we would have to resort to embedding raw HTML in the Markdown files.  But with them, we have a cleaner syntax to add HTML style and class names to the Markdown content.&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;We first install the Python package into Pelican's Python environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;pip install markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;And then we enable it in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file, in the &lt;code&gt;MARKDOWN&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Extra configuration settings for the Markdown processor.&lt;/span&gt;
&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
         &lt;span class="s2"&gt;&amp;quot;markdown.extensions.attr_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The extension is also bundled with the &lt;a href="https://python-markdown.github.io/extensions/extra/"&gt;extra&lt;/a&gt; extension, so enabling that extension will have the same effect -- but watch out for the conflict if you're also going to use &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/extra/"&gt;PyMdown Extensions&lt;/a&gt;' own version of &lt;code&gt;extra&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="no-attributes"&gt;No Attributes&lt;/h3&gt;
&lt;p&gt;The vanilla version of our content consists of a simple image and paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![pelican-logo]

This is a logo.

[&lt;span class="nl"&gt;pelican-logo&lt;/span&gt;]: &lt;span class="na"&gt;https://github.com/getpelican/pelican-blog/raw/master/content/logo/pelican-logo-small.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that renders out as this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-logo" src="https://github.com/getpelican/pelican-blog/raw/master/content/logo/pelican-logo-small.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a logo.&lt;/p&gt;
&lt;h3 id="centered-attributes"&gt;Centered Attributes&lt;/h3&gt;
&lt;p&gt;We now update the content with our image and text attributes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![pelican-logo]{: .center-image}

This is a logo.
{: .center-text}

[&lt;span class="nl"&gt;pelican-logo&lt;/span&gt;]: &lt;span class="na"&gt;https://github.com/getpelican/pelican-blog/raw/master/content/logo/pelican-logo-small.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: The &lt;code&gt;{: .center-text}&lt;/code&gt; attribute goes at the end of the element because the text paragraph is a &lt;em&gt;block level element&lt;/em&gt;.  More information is available from the official &lt;a href="https://python-markdown.github.io/extensions/attr_list/#block-level"&gt;Python-Markdown help&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The above renders out as this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-logo" class="center-image" src="https://github.com/getpelican/pelican-blog/raw/master/content/logo/pelican-logo-small.png"&gt;&lt;/p&gt;
&lt;p class="center-text"&gt;This is a logo.&lt;/p&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="pelican"></category><category term="python"></category><category term="css"></category><category term="pymdown extensions"></category></entry><entry><title>How this blog styles keyboard keys</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-renders-keyboard-keys/" rel="alternate"></link><published>2021-01-14T17:48:00-05:00</published><updated>2021-01-14T17:48:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2021-01-14:/blog/articles/how-this-blog-renders-keyboard-keys/</id><summary type="html">&lt;p&gt;An quick example of one of how this blog uses PyMdown Extensions' 'keys' feature to render keyboard keys&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the features this blog uses from the &lt;a href="https://facelessuser.github.io/pymdown-extensions"&gt;PyMdown Extensions&lt;/a&gt; extension is the &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/keys/"&gt;Keys&lt;/a&gt; option.  That options enables &lt;code&gt;++&lt;/code&gt; as Markdown syntax and converts it to HTML5's &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; html.&lt;/p&gt;
&lt;p&gt;This means that &lt;code&gt;++ctrl+alt+delete++&lt;/code&gt; renders out as &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-alt"&gt;Alt&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-delete"&gt;Del&lt;/kbd&gt;&lt;/span&gt;.  Better information is available on the official &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/keys/"&gt;help&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install the Python package into Pelican's Python environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;pip install pymdown-extensions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Enable it in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file, in the &lt;code&gt;MARKDOWN&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Extra configuration settings for the Markdown processor.&lt;/span&gt;
&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.keys&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="pelican"></category><category term="pymdown extensions"></category></entry><entry><title>VSCode tasks for Pelican blogs</title><link href="https://dbarsam.github.io/blog/articles/vscode-task-pelican/" rel="alternate"></link><published>2020-11-23T03:40:00-05:00</published><updated>2020-11-23T03:40:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-23:/blog/articles/vscode-task-pelican/</id><summary type="html">&lt;p&gt;How to run Pelican commands from within Visual Studio Code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;tasks feature&lt;/a&gt; is the editor's mechanism to execute building, testing, and other software development actions from the comfort of the IDE.  Most of the common tasks are built-in or provided by plugins, but it's also possible to define workspace tasks in the project's &lt;code&gt;tasks.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;In this Pelican powered project, we can take advantage of that flexibility and add support for two Pelican specific commands:  build and serve.&lt;/p&gt;
&lt;h2 id="the-build-task"&gt;The &lt;code&gt;build&lt;/code&gt; Task&lt;/h2&gt;
&lt;p&gt;The build command is pretty straight forward to adapt.  On the command line it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican .\content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can turn that into the following json block and add it to the &lt;code&gt;tasks.json&lt;/code&gt; file in the project's &lt;code&gt;.vscode&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pelican-build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;process&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;isBuildCommand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}\\.conda\\env\\python.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;pelican&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}\\content&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;problemMatcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We mark this task as an explicit &lt;em&gt;build&lt;/em&gt; command with the &lt;code&gt;isBuildCommand&lt;/code&gt; flag.  This adds it the list of commands automatically bound to VSCode's &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-shift"&gt;Shift&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-b"&gt;B&lt;/kbd&gt;&lt;/span&gt; keyboard mapping.&lt;/p&gt;
&lt;p&gt;We also add an empty &lt;code&gt;problemMatcher&lt;/code&gt;.  VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher"&gt;problem matching&lt;/a&gt; feature is how the editor converts the text output of the command into the editor's &lt;a href="https://code.visualstudio.com/docs/editor/editingevolved#_errors-warnings"&gt;problems panel&lt;/a&gt;, accessible via &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-shift"&gt;Shift&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-m"&gt;M&lt;/kbd&gt;&lt;/span&gt;.  Unfortunately Pelican does not output its error messages into a compatible format so we add the feature but leave it empty until a future change in either VSCode or Pelican.&lt;/p&gt;
&lt;h2 id="the-serve-task"&gt;The &lt;code&gt;serve&lt;/code&gt; Task&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;serve&lt;/code&gt; command is also fairly simple to adapt.  Like the &lt;code&gt;build&lt;/code&gt; command we take a command line and turn it into a json task entry.&lt;/p&gt;
&lt;p&gt;The serve command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican --autoreload --listen
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The json equivalent of the command line, added it to the &lt;code&gt;tasks.json&lt;/code&gt; file in the &lt;code&gt;.vscode&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pelican-serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;process&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;isBackground&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;runOptions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;instanceLimit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}\\.conda\\env\\python.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;pelican&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;--autoreload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;--listen&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;problemMatcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this task will be running the internal web server in the background, we mark it with the &lt;code&gt;isBackground&lt;/code&gt; flag and we limit the instances to a single instance in the &lt;code&gt;runOptions&lt;/code&gt;.  This allows us to launch it once from VSCode and any subsequent launch will prompt us to kill it or restart it, avoiding any awkwardness over the single HTTP port.&lt;/p&gt;
&lt;p&gt;We don't bother with a keyboard shortcuts for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike the build task above, there's no support for a global &lt;em&gt;watcher&lt;/em&gt; task that can be overridden; VSCode only supports &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; tasks and nothing else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project specific keyboard shortcuts are not possible.  See &lt;a href="https://github.com/Microsoft/vscode/issues/23757"&gt;Issue #23757&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And of course, we also add an empty &lt;code&gt;problemMatcher&lt;/code&gt; for the same reasons listed above.&lt;/p&gt;</content><category term="about the blog"></category><category term="vscode"></category><category term="pelican"></category></entry><entry><title>How this blog detects broken links</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-detects-broken-links/" rel="alternate"></link><published>2020-11-08T21:25:00-05:00</published><updated>2020-11-08T21:25:00-05:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-08:/blog/articles/how-this-blog-detects-broken-links/</id><summary type="html">&lt;p&gt;How to validate local and internet links in markdown files.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog use VSCode's &lt;a href="https://marketplace.visualstudio.com/items?itemName=blackmist.LinkCheckMD"&gt;HTTP/s and relative link checker&lt;/a&gt; extension to check url links in markdown files.  The extension is pretty basic, but it does what it says on the tin and provides a nice shortcut ++Alt+L++.&lt;/p&gt;
&lt;p&gt;The blog's pipeline is slightly different and our best option is the &lt;a href="https://github.com/tcort/markdown-link-check"&gt;markdown-link-check&lt;/a&gt; npm package.  However, to make it work with our Pelican based project we'll need to solve a few problems first.&lt;/p&gt;
&lt;h2 id="batch-operation"&gt;Batch Operation&lt;/h2&gt;
&lt;p&gt;The first challenge is that &lt;code&gt;markdown-link-check&lt;/code&gt; only takes one file as a argument.  To handle multiple files, the website recommends using this &lt;code&gt;find&lt;/code&gt; shell command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="se"&gt;\*&lt;/span&gt;.md -exec markdown-link-check &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, that won't work for our Travis-CI powered pipeline.  When Travis is checking the result of that command, it only processes the exit code of the &lt;code&gt;find&lt;/code&gt; command and not the result of &lt;code&gt;markdown-link-check&lt;/code&gt;, which is executed by &lt;code&gt;find&lt;/code&gt;'s &lt;code&gt;exec&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;To fix this, we need to resort to a more basic shell loop -- but even then there are some issues.  First, we need to enable the &lt;code&gt;globstar&lt;/code&gt; shell option, introduced in Bash 4.0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;shopt&lt;/span&gt; -s globstar
&lt;span class="k"&gt;for&lt;/span&gt; x &lt;span class="k"&gt;in&lt;/span&gt; **/*.md&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; markdown-link-check --verbose &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And second, we need to heed the warnings that the glob &lt;code&gt;**&lt;/code&gt; pattern also traverses symbolic links.  This project is small enough that it doesn't have to worry about that feature, but it's worthwhile to note it and find a safer alternative.&lt;/p&gt;
&lt;p&gt;Fortunately we can combine both solutions.  We'll use &lt;code&gt;find&lt;/code&gt; to generate a list of files, but plug that list into the for loop and submit each file for inspection as a separate shell command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; file &lt;span class="k"&gt;in&lt;/span&gt;  &lt;span class="k"&gt;$(&lt;/span&gt;find ./content -name &lt;span class="se"&gt;\*&lt;/span&gt;.md&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; markdown-link-check --verbose &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The extra bit of magic here is that we check the result of &lt;code&gt;markdown-link-check&lt;/code&gt; against the exit command with the short-circuit &lt;em&gt;or&lt;/em&gt; condition (&lt;code&gt;||&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;markdown-link-check&lt;/code&gt; is successful, it returns &lt;code&gt;0&lt;/code&gt; which is the equivalent of True, which then satisfies the &lt;em&gt;or&lt;/em&gt; expressions, so it skips the &lt;code&gt;exit&lt;/code&gt; command, continuing on with the loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;markdown-link-check&lt;/code&gt; is not successful, it returns the equivalent of False, so the shell evaluates the other side of the &lt;em&gt;or&lt;/em&gt; expression and exits the instance with the default error value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ignore-rules"&gt;Ignore Rules&lt;/h2&gt;
&lt;p&gt;We have another problem handling Pelican's shorthand for &lt;a href="https://docs.getpelican.com/en/latest/content.html#linking-to-internal-content"&gt;local links&lt;/a&gt;: &lt;code&gt;{filename}&lt;/code&gt; and &lt;code&gt;{static}&lt;/code&gt;.  These are not valid links but we create a configuration file (&lt;code&gt;.markdown-link-check.json&lt;/code&gt;) and use the &lt;code&gt;ignorePatterns&lt;/code&gt; option to skip those special cases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ignorePatterns&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^{filename}&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^{static}&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="travis-ci-integration"&gt;Travis CI Integration&lt;/h2&gt;
&lt;p&gt;We can combine the the batch operation and the configuration into a final command line that makes the job nice and compact:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lint&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
    &lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g npm@latest&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g markdown-link-check&lt;/span&gt;
    &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;for file in  $(find ./content -name \*.md); do markdown-link-check --config .markdown-link-check.json --verbose &amp;quot;$file&amp;quot; || exit 1; done;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="travis"></category><category term="bash"></category></entry><entry><title>How this blog renders code samples</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-renders-code-sample/" rel="alternate"></link><published>2020-09-11T05:15:00-04:00</published><updated>2020-09-11T05:15:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-11:/blog/articles/how-this-blog-renders-code-sample/</id><summary type="html">&lt;p&gt;Notes from trying to get Pelican's code formatting feature properly configured.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican doesn't handle syntax highlighting out of the box.  You need to add that functionality, which means extending the blog with a collection of configurations, plugins, and Markdown extensions.&lt;/p&gt;
&lt;p&gt;This post is mainly a collection of notes taken from the first pass at enabling the feature.  And while that first pass really didn't conclude in a satisfying way, it did end up with this blog getting some basic code formatting functionality.  The whole exercise could be broken down into 4 different sub-topics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Markdown syntax to denote text as code blocks.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;codehilite&lt;/a&gt; extension to render the html with the correct colour.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; to extend Markdown with additional Markdown syntax features.&lt;/li&gt;
&lt;li&gt;Use the correct configuration to render line numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="handling-code-with-markdown"&gt;Handling Code with Markdown&lt;/h2&gt;
&lt;p&gt;The first part is to use the correct Markdown syntax.  The problem here is that most examples explaining how to do this are written for different flavours of Markdown and may not be applicable to our Pelican powered blog.&lt;/p&gt;
&lt;p&gt;Starting with the basics, Markdown handles code blocks with code fences, denoted by the 3 backticks (&lt;code&gt;```&lt;/code&gt;).  For example, consider the below Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="sb"&gt;This is a monospace code block&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gets rendered as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a monospace code block
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However that's the basic case and unfortunately, there's more needed to take that and make it display code sample in a Pelican blog.&lt;/p&gt;
&lt;h2 id="syntax-highlighting"&gt;Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;Markdown doesn't handle syntax highlighting.  Instead it passes the code-fence's attributes to the renderer and it interprets in some way.  In most cases, it adds it to the resulting html as a css class.  Consider this bit of Markdown describing Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;```python&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;python&lt;/code&gt; text there is just an text attribute is passed through to the html as a interpreted as css class for that particular scope.  &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; has a much better explanation about attributes and syntax highlighting in its &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Fenced Code&lt;/a&gt; section, so please refer to that for more information.&lt;/p&gt;
&lt;p&gt;The important thing to note is that in &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; it's actually the &lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;codehilite&lt;/a&gt; extension that is responsible for the syntax highlighting and the actual rendering of the text is controlled by its &lt;code&gt;css_class&lt;/code&gt; option, which by default is also set to &lt;code&gt;codehilite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The basic code fence and the syntax highlighting work pretty much out of the box so there's no need to tinker with the settings.  However, this blog does tinker with the settings because of requiring more specialized way of rendering code blocks.&lt;/p&gt;
&lt;h2 id="nested-code-blocks"&gt;Nested Code Blocks&lt;/h2&gt;
&lt;p&gt;Instructional steps are nice and having those steps point to fully rendered code blocks is even nicer.  This is one part where the standard Markdown specification doesn't really provide a definition and &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; doesn't seem to support it, so this a case where it's up to other groups provide a solution and implement this feature in their Markdown 'flavour'.&lt;/p&gt;
&lt;p&gt;Consider this this bit of Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; Step 1

&lt;span class="k"&gt;2.&lt;/span&gt; Step 2, but with Python code.

&lt;span class="sb"&gt;    ```&lt;/span&gt;
&lt;span class="sb"&gt;    print(&amp;quot;Hello world&amp;quot;)&lt;/span&gt;
&lt;span class="sb"&gt;    ```&lt;/span&gt;

&lt;span class="k"&gt;3.&lt;/span&gt; Step 3, but with syntax highlighted Python code.

&lt;span class="sb"&gt;    ```python&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sb"&gt;    ```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Markdown sample lists a series of steps and, in Step 2 and 3, adds a bit of sample Python code.  The code in Step 2 should render as monospace text, but the code in Step 3 should be rendered with syntax colouring appropriate for Python.  Unfortunately, this is somewhat fragile and only works in a very specific scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Indent your fenced block by an indent at your level (i.e. add extra 4 spaces).&lt;/li&gt;
&lt;li&gt;The fence requires a newline above and below the fenced block, so to be consistent, make the whole list double spaced.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And even then, this is only made possible by some behind the scenes work in our Pelican configuration file.  By default, Pelican is being powered by &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; and that will not render our example correctly.  Instead, we need to first install another package, &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt; and then enable its &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;superfences&lt;/a&gt; extension in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.superfences&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, the aboves renders as expected with the &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt;'s default settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2, but with Python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(&amp;quot;Hello world&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3, but with syntax highlighted Python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="adding-line-numbering"&gt;Adding line numbering&lt;/h2&gt;
&lt;p&gt;Line numbering is handles by &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;superfences&lt;/a&gt; and its help page is great at answering questions.  For this blog, it's important to note that out of the box, there are two options to rendering line numbers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Embedded&lt;/li&gt;
&lt;li&gt;Separate Table Column&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:  &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt; does add third option, &lt;code&gt;pymdownx-inline&lt;/code&gt;, but that's not working with this current theme. Incidentally, this seems to be part of a larger problem of non-working extensions, like &lt;code&gt;markdown.extensions.admonition&lt;/code&gt; and &lt;code&gt;pymdownx.tabbed&lt;/code&gt;, and it's not clear if the fault lies with the theme, Pelican, or something on the blog's configuration side.  As a result, this blog uses the separate table column as configured in thr &lt;code&gt;pelicanconf.py&lt;/code&gt;, under the &lt;code&gt;pymdownx.highlight&lt;/code&gt; extension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.highlight&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;linenums_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;pelicanconf.py&lt;/code&gt; configuration has line number disabled by default. Line numbers are enabled by adding the &lt;code&gt;linenums&lt;/code&gt; attribute to each individual code block with the starting line number as its argument.&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python linenums=&amp;quot;3&amp;quot;
for i in range(10):
    print(&amp;quot;Hello world!&amp;quot;)
print(&amp;quot;Goodbye&amp;quot;)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders this code, with line number starting on line 3.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;To highlight a specific lines use the &lt;code&gt;hl_lines&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python linenums=&amp;quot;5&amp;quot; hl_lines=&amp;quot;2-3&amp;quot;
for i in range(10):
    print(&amp;quot;Hello world!&amp;quot;)
print(&amp;quot;Goodbye&amp;quot;)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders this code, with line number starting on line 5, but highlighted code block lines 2 and 3:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Note that the &lt;code&gt;hl_lines&lt;/code&gt; refers to lines in the code block, not the lines as numbered by &lt;code&gt;linenums&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="line-numbering-and-line-wrapping"&gt;Line Numbering And Line Wrapping&lt;/h2&gt;
&lt;p&gt;There's one small problem with the theme and &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt;.  If a line of code is too long, the theme will wrap the code but not update the line numbering accordingly.  The ends up with mis-aligned line numbering and breaks the feature.&lt;/p&gt;
&lt;p&gt;To work around this, this blog disables word wrapping for code blocks in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file with the &lt;code&gt;legacy_no_wrap_code&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;legacy_no_wrap_code&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.highlight&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;linenums_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python linenums=&amp;quot;5&amp;quot;
for i in range(10):
    print(&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;)
print(&amp;quot;Goodbye&amp;quot;)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders the long line at line &lt;code&gt;6&lt;/code&gt; un-wrapped and preserves the alignment with the table columns:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;It's important to also note that this is behaving differently if there were no line numbering at all. For example, the above code block with the &lt;code&gt;linenums&lt;/code&gt; attribute removed renders this code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code block is not wrapped, but embedded in a scroll box to work around that.  The problem lies with the table mechanism used for the table column line numbering. Underneath the hood, the code block with &lt;code&gt;linenums&lt;/code&gt; renders this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlighttable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;linenos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;linenodiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;for&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;i&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;range&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;):&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;Goodbye&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the one without, renders this html (which is the same as the table cell containing the code in the above example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;for&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;i&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;range&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;):&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;Goodbye&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="about the blog"></category><category term="markdown"></category><category term="codehilite"></category><category term="pelican"></category></entry><entry><title>How this blog is themed</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-themes/" rel="alternate"></link><published>2020-09-10T03:19:00-04:00</published><updated>2020-09-10T03:19:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-10:/blog/articles/how-this-blog-themes/</id><summary type="html">&lt;p&gt;The set-up of this blog's theme.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; is the tool that makes this static website from the markdown files in the repository.  But, while it has the power to theme the website out of the box, it's not that clear exactly how that is supposed to work.&lt;/p&gt;
&lt;h2 id="getting-the-theme"&gt;Getting the Theme&lt;/h2&gt;
&lt;p&gt;Pelican themes are packaged as a raw bundle of files, but if you're used to CI workflows this concept is rather challenging.  Instead of installing a theme through the Python package managed &lt;code&gt;pip&lt;/code&gt;, Pelican expects the files to be available somewhere on disk first and accesses them at run-time, either via a copy or symlink done with the Pelican utility &lt;a href="https://docs.getpelican.com/en/stable/pelican-themes.html"&gt;pelican-themes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up to this point in the blog set-up, we've been installing Pelican and its components as Python packages pinned at specific versions -- and pinning dependencies is such a basic requirement of pipeline automation that not having it feels like something is missing.  While some developers have made their theme available as packages (e.g. &lt;a href="https://pypi.org/project/plumage/"&gt;Plumage&lt;/a&gt;) most themes are collected as submodules of files in the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes GitHub Project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="embedding-the-theme"&gt;Embedding the Theme&lt;/h2&gt;
&lt;p&gt;There's different strategies to 'embedding' a theme.  This project has added it to the repo as a git submodule.  A git submodule is a git-specific way to embed one repo into another repo at a specific commit.  So instead of specifying a released version of the theme, the git submodule points to a specific code change in the repository.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://github.com/gilsondev/pelican-clean-blog"&gt;pelican-clean-blog&lt;/a&gt; as an example, we first add the submodule through git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git submodule add https://github.com/gilsondev/pelican-clean-blog pelican/themes/pelican-clean-blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're working on window you'll need to watch out for file paths with slashes.  If you have any error that's like this,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;fatal: No url found for submodule path &amp;#39;pelican/themes/pelican-clean-blog&amp;#39; in .gitmodules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the slashes from the escaped window slashes &lt;code&gt;pelican\\themes\\pelican-clean-blog&lt;/code&gt; to the unix slashes &lt;code&gt;pelican/themes/pelican-clean-blog&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="enabling-the-theme"&gt;Enabling the Theme&lt;/h2&gt;
&lt;p&gt;After the files are on disk Pelican expects the theme to be enabled in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file.  First you set the theme's relative path with the &lt;code&gt;THEME&lt;/code&gt; variable and then set any other auxillary theme setting with more variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="c1"&gt;# The Theme&lt;/span&gt;
&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pelican/themes.pelican-clean-blog&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="c1"&gt;# The Theme Specific Settings&lt;/span&gt;
&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="n"&gt;HEADER_COVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images/home-bg.png&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;HEADER_COLOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#004a59&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;COLOR_SCHEME_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tomorrow_night.css&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;CSS_OVERRIDE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/css/custom.css&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should now be visible if the build or run the live local server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;python -m pelican --autoreload --listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="theme-as-submodule"&gt;Theme as Submodule&lt;/h2&gt;
&lt;p&gt;Like a rug, a good theme really ties the whole website together.  So I appreciate the work that goes into making one; however, the one point I can't get over is use of copying and pasting files to install the theme.  While using submodules to embed the theme is a good step towards being modular, it feels dated and the wrong tool -- especially when we're already using Python packages.   Hopefully, this is just a transition.  It looks like Pelican 4.0 did start to push for better extension organization, but the current focus is on &lt;a href="https://github.com/pelican-plugins"&gt;Pelican Plugins&lt;/a&gt;.  Most of development for the themes in the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes GitHub Project&lt;/a&gt; appears to be stagnant, and only a few talk about supporting Pelican 4.0, and of those even fewer publish their themes as Python package.&lt;/p&gt;</content><category term="about the blog"></category><category term="github"></category><category term="pelican"></category><category term="pipeline"></category><category term="python"></category><category term="travis"></category></entry><entry><title>How this blog works</title><link href="https://dbarsam.github.io/blog/articles/how-this-blog-works/" rel="alternate"></link><published>2020-09-08T01:29:00-04:00</published><updated>2020-09-08T01:29:00-04:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-08:/blog/articles/how-this-blog-works/</id><summary type="html">&lt;p&gt;The pieces that make up this blog's backend.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This project is a blog with a pipeline.  The pipeline compiles the project's text files into static html pages and pushes them to a host which then displays it as a website.  The whole process is split along these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All content for this blog is stored as files in a project on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Articles (written in &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, a plain text mark up language) are submitted as files into the project via Git, the source control of the project.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.com"&gt;Travis-CI&lt;/a&gt;, which has been watching the source control, reacts to any change by Git by creating and launching a build pipeline on one of its servers.&lt;/li&gt;
&lt;li&gt;Part of the build pipeline launches &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and generates all html pages from the project markdown files.&lt;/li&gt;
&lt;li&gt;Another part &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;submits the html files&lt;/a&gt; to the &lt;code&gt;gh-pages&lt;/code&gt; branch back on GitHub, where Github displays anything on the &lt;code&gt;gh-pages&lt;/code&gt; branch a static web site.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="github"&gt;GitHub&lt;/h2&gt;
&lt;p&gt;This project and all of its content is stored and hosted on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.  There's already too much information about getting started with GitHub so this article assumes that that information is already known.  However, it is important to note that this project is using GitHub in a relatively simple way -- as a &lt;em&gt;static html site&lt;/em&gt;, hosted by &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;GitHub Pages&lt;/a&gt; -- and does not use any of the other features that it offers.  For example, this project does not use Jekyll so any mention of that can be ignored.&lt;/p&gt;
&lt;h2 id="markdown"&gt;Markdown&lt;/h2&gt;
&lt;p&gt;The actual content of the files is stored as &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; files all in the &lt;code&gt;content/&lt;/code&gt; folder in a flat listing.  Markdown is a markup language that is easy to read in plain text form and is popular enough that it just makes sense to use it instead of something else.&lt;/p&gt;
&lt;p&gt;However, the blog converts markdown to html with the &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; library and uses some custom features provided by &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;PyMdown Extensions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="travis-ci"&gt;Travis CI&lt;/h2&gt;
&lt;p&gt;This project's automated actions are executed on &lt;a href="https://travis-ci.com"&gt;Travis-CI&lt;/a&gt;.  Like GitHub, there are almost too many tutorials about how to get started with Travis; services.  This project is using Travis in a relatively simple way and most of the work is handled by the built-in &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;support of GitHub Pages&lt;/a&gt;.  The &lt;code&gt;.travis-ci.yml&lt;/code&gt; file in this project defines two jobs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Markdown Linting with &lt;a href="https://github.com/DavidAnson/markdownlint"&gt;MarkdownLint&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lint&lt;/span&gt;
  &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;
  &lt;span class="nt"&gt;node_js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
  &lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g npm@latest&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g markdownlint-cli&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;markdownlint **/*.md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build with &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and publish to &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;
  &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.6&lt;/span&gt;
  &lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python -m pip install --upgrade pip&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python -m pip install -r requirements.txt&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make publish&lt;/span&gt;
  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pages&lt;/span&gt;
    &lt;span class="nt"&gt;skip_cleanup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git&lt;/span&gt;
    &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$GITHUB_TOKEN&lt;/span&gt;  &lt;span class="c1"&gt;# Set in the settings page of your repository, as a secure variable&lt;/span&gt;
    &lt;span class="nt"&gt;keep_history&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
    &lt;span class="nt"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;
    &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pelican"&gt;Pelican&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; is the tool that generates the static website from the markdown files.  Pelican is a Python package and is installed by Python's package manager, &lt;code&gt;pip&lt;/code&gt;.  All dependency and their respective versions are listed in the project's &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pelican's configuration files are also written in Python and Pelican's default set-up splits the configuration into two files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; for local development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt; for publishing (which imports &lt;code&gt;pelicanconf.py&lt;/code&gt; and overrides any setting needed for publishing a website).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pelican's default set-up also simplifies the execution by providing a convenience &lt;code&gt;Makefile&lt;/code&gt;.  The &lt;code&gt;Makefile&lt;/code&gt; is an standard convention that contains pre-configured commands for various tasks.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.travis-ci.yml&lt;/code&gt; files executes all of the set-up and Pelican steps during the build and publish step.&lt;/p&gt;
&lt;h2 id="the-gh-pages-branch"&gt;The &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/h2&gt;
&lt;p&gt;GitHub Pages is one of the features that comes with every project and its only job is to display a collection of html files as a website.  Even with that scope, there's still a lot of the different ways to use that feature; a quick search on GitHub Pages will find tutorials that seem contradictory or mention seemly irrelevant or confusing configurations.  This project is creating a &lt;em&gt;project site&lt;/em&gt; (not a &lt;em&gt;user site&lt;/em&gt; or &lt;em&gt;organization&lt;/em&gt;) where the final url will be something like  &lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt;.  More information is available from the &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites"&gt;GitHub Pages Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gh-pages&lt;/code&gt; branch is a git branch named &lt;code&gt;gh-pages&lt;/code&gt;.  There is nothing special about the branch, except that &lt;code&gt;gh-pages&lt;/code&gt; is the default value for that branch that GitHub uses for as a &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites"&gt;publishing source&lt;/a&gt;.  Travis-Ci follows GitHub's lead and its publish commanded uses &lt;code&gt;gh-pages&lt;/code&gt; as a default value its &lt;code&gt;target_branch&lt;/code&gt; setting.&lt;/p&gt;</content><category term="about the blog"></category><category term="github"></category><category term="markdown"></category><category term="pelican"></category><category term="pipeline"></category><category term="python"></category><category term="travis"></category></entry></feed>