<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>#Dev - about the blog</title><link href="https://dbarsam.github.io/blog/" rel="alternate"></link><link href="https://dbarsam.github.io/blog/feeds/about-the-blog.atom.xml" rel="self"></link><id>https://dbarsam.github.io/blog/</id><updated>2020-11-23T03:40:27+00:00</updated><subtitle>A collection of software development notes</subtitle><entry><title>VSCode tasks for Pelican blogs</title><link href="https://dbarsam.github.io/blog/vscode-task-pelican.html" rel="alternate"></link><published>2020-11-23T03:40:27+00:00</published><updated>2020-11-23T03:40:27+00:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-23:/blog/vscode-task-pelican.html</id><summary type="html">&lt;p&gt;How to run Pelican commands from within Visual Studio Code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;tasks feature&lt;/a&gt; is the editor's mechanism to execute building, testing, and other software development actions from the comfort of the IDE.  Most of the common tasks are built-in or provided by plugins, but it's also possible to define workspace tasks in the project's &lt;code&gt;tasks.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;In this Pelican powered project, we can take advantage of that flexibility and add support for two Pelican specific commands:  build and serve.&lt;/p&gt;
&lt;h2 id="the-build-task"&gt;The &lt;code&gt;build&lt;/code&gt; Task&lt;/h2&gt;
&lt;p&gt;The build command is pretty straight forward to adapt.  On the command line it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican .\content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can turn that into the following json block and add it to the &lt;code&gt;tasks.json&lt;/code&gt; file in the project's &lt;code&gt;.vscode&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pelican-build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;process&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;isBuildCommand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}\\.conda\\env\\python.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;pelican&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}\\content&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;problemMatcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We mark this task as an explicit &lt;em&gt;build&lt;/em&gt; command with the &lt;code&gt;isBuildCommand&lt;/code&gt; flag.  This adds it the list of commands automatically bound to VSCode's &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;b&lt;/kbd&gt; keyboard mapping.&lt;/p&gt;
&lt;p&gt;We also add an empty &lt;code&gt;problemMatcher&lt;/code&gt;.  VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher"&gt;problem matching&lt;/a&gt; feature is how the editor converts the text output of the command into the editor's &lt;a href="https://code.visualstudio.com/docs/editor/editingevolved#_errors-warnings"&gt;problems panel&lt;/a&gt;, accessible via &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;m&lt;/kbd&gt;.  Unfortunately Pelican does not output its error messages into a compatible format so we add the feature but leave it empty until a future change in either VSCode or Pelican.&lt;/p&gt;
&lt;h2 id="the-serve-task"&gt;The &lt;code&gt;serve&lt;/code&gt; Task&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;serve&lt;/code&gt; command is also fairly simple to adapt.  Like the &lt;code&gt;build&lt;/code&gt; command we take a command line and turn it into a json task entry.&lt;/p&gt;
&lt;p&gt;The serve command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican --autoreload --listen
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The json equivalent of the command line, added it to the &lt;code&gt;tasks.json&lt;/code&gt; file in the &lt;code&gt;.vscode&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pelican-serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;process&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;isBackground&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;runOptions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;instanceLimit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}\\.conda\\env\\python.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;pelican&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;--autoreload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;--listen&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;problemMatcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this task will be running the internal web server in the background, we mark it with the &lt;code&gt;isBackground&lt;/code&gt; flag and we limit the instances to a single instance in the &lt;code&gt;runOptions&lt;/code&gt;.  This allows us to launch it once from VSCode and any subsequent launch will prompt us to kill it or restart it, avoiding any awkwardness over the single HTTP port.&lt;/p&gt;
&lt;p&gt;We don't bother with a keyboard shortcuts for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike the build task above, there's no support for a global &lt;em&gt;watcher&lt;/em&gt; task that can be overridden; VSCode only supports &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; tasks and nothing else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project specific keyboard shortcuts are not possible.  See &lt;a href="https://github.com/Microsoft/vscode/issues/23757"&gt;Issue #23757&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And of course, we also add an empty &lt;code&gt;problemMatcher&lt;/code&gt; for the same reasons listed above.&lt;/p&gt;</content><category term="about the blog"></category><category term="blog"></category><category term="vscode"></category><category term="pelican"></category></entry><entry><title>How this blog detects broken links</title><link href="https://dbarsam.github.io/blog/how-this-blog-detects-broken-links.html" rel="alternate"></link><published>2020-11-08T21:25:04+00:00</published><updated>2020-11-08T21:25:04+00:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-11-08:/blog/how-this-blog-detects-broken-links.html</id><summary type="html">&lt;p&gt;How to validate local and internet links in markdown files.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In VSCode, this blog use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=blackmist.LinkCheckMD"&gt;HTTP/s and relative link checker&lt;/a&gt; extension to check url links in markdown files.  The extension is pretty basic, but it does what it says on the tin.&lt;/p&gt;
&lt;p&gt;The blog's pipeline is slightly different and in there we use the &lt;a href="https://github.com/tcort/markdown-link-check"&gt;markdown-link-check&lt;/a&gt; npm package.  To get started with the &lt;code&gt;markdown-link-check&lt;/code&gt; the site recommends using this &lt;code&gt;find&lt;/code&gt; shell command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="se"&gt;\*&lt;/span&gt;.md -exec markdown-link-check &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, that won't work for our Travis-CI powered pipeline.  When Travis is checking the result of that command, it only processes the exit code of the &lt;code&gt;find&lt;/code&gt; command and not the result of &lt;code&gt;markdown-link-check&lt;/code&gt;, which is executed by &lt;code&gt;find&lt;/code&gt;'s &lt;code&gt;exec&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;To fix this, we need to resort to a more basic shell loop -- but even then there are some issues.  First, we need to enable the &lt;code&gt;globstar&lt;/code&gt; shell option, introduced in Bash 4.0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;shopt&lt;/span&gt; -s globstar
&lt;span class="k"&gt;for&lt;/span&gt; x &lt;span class="k"&gt;in&lt;/span&gt; **/*.md&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; markdown-link-check --verbose &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And second, we need to heed the warnings that the glob &lt;code&gt;**&lt;/code&gt; pattern also traverses symbolic links.  This project is small enough that it doesn't have to worry about that feature, but it's worthwhile to note it and find a safer alternative.&lt;/p&gt;
&lt;p&gt;Fortunately we can combine both solutions.  We'll use &lt;code&gt;find&lt;/code&gt; to generate a list of files, but plug that list into the for loop and submit each file for inspection as a separate shell command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; file &lt;span class="k"&gt;in&lt;/span&gt;  &lt;span class="k"&gt;$(&lt;/span&gt;find ./content -name &lt;span class="se"&gt;\*&lt;/span&gt;.md&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; markdown-link-check --verbose &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The extra bit of magic here is that we check the result of &lt;code&gt;markdown-link-check&lt;/code&gt; against the exit command with the short-circuit &lt;em&gt;or&lt;/em&gt; condition (&lt;code&gt;||&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;markdown-link-check&lt;/code&gt; is succesful, it returns &lt;code&gt;0&lt;/code&gt; which is the equivaleunt of True, which then satsifies the &lt;em&gt;or&lt;/em&gt; expressions, so it skips the &lt;code&gt;exit&lt;/code&gt; command, continuing on with the loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;markdown-link-check&lt;/code&gt; is not succesful, it returns the equivalent of False, so the shell evalutes the other side of the &lt;em&gt;or&lt;/em&gt; expression and exits the instance with the default error value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a fancy shell trick that makes the final travis job  nice and compact:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lint&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
    &lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g npm@latest&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g markdown-link-check&lt;/span&gt;
    &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;for file in  $(find ./content -name \*.md); do markdown-link-check --verbose &amp;quot;$file&amp;quot; || exit 1; done;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="about the blog"></category><category term="blog"></category><category term="markdown"></category><category term="travis"></category><category term="bash"></category></entry><entry><title>How this blog renders code samples</title><link href="https://dbarsam.github.io/blog/how-this-blog-renders-code-sample.html" rel="alternate"></link><published>2020-09-11T05:15:34+00:00</published><updated>2020-09-11T05:15:34+00:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-11:/blog/how-this-blog-renders-code-sample.html</id><summary type="html">&lt;p&gt;Notes from trying to get Pelican's code formatting feature properly configured.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican doesn't handle syntax highlighting out of the box.  You need to add that functionality, which means extending the blog with a collection of configurations, plugins, and Markdown extensions.&lt;/p&gt;
&lt;p&gt;This post is mainly a collection of notes taken from the first pass at enabling the feature.  And while that first pass really didn't conclude in a satisfying way, it did end up with this blog getting some basic code formatting functionality.  The whole exercise could be broken down into 4 different sub-topics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Markdown syntax to denote text as code blocks.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;codehilite&lt;/a&gt; extension to render the html with the correct colour.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; to extend Markdown with additional Markdown syntax features.&lt;/li&gt;
&lt;li&gt;Use the correct configuration to render line numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="handling-code-with-markdown"&gt;Handling Code with Markdown&lt;/h2&gt;
&lt;p&gt;The first part is to use the correct Markdown syntax.  The problem here is that most examples explaining how to do this are written for different flavours of Markdown and may not be applicable to our Pelican powered blog.&lt;/p&gt;
&lt;p&gt;Starting with the basics, Markdown handles code blocks with code fences, denoted by the 3 backticks (&lt;code&gt;```&lt;/code&gt;).  For example, consider the below Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="sb"&gt;This is a monospace code block&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gets rendered as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a monospace code block
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However that's the basic case and unfortunately, there's more needed to take that and make it display code sample in a Pelican blog.&lt;/p&gt;
&lt;h2 id="syntax-highlighting"&gt;Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;Markdown doesn't handle syntax highlighting.  Instead it passes the code-fence's attributes to the renderer and it interprets in some way.  In most cases, it adds it to the resulting html as a css class.  Consider this bit of Markdown describing Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;```python&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;python&lt;/code&gt; text there is just an text attribute is passed through to the html as a interpreted as css class for that particular scope.  &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; has a much better explanation about attributes and syntax highlighting in its &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Fenced Code&lt;/a&gt; section, so please refer to that for more information.&lt;/p&gt;
&lt;p&gt;The important thing to note is that in &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; it's actually the &lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;codehilite&lt;/a&gt; extension that is responsible for the syntax highlighting and the actual rendering of the text is controlled by its &lt;code&gt;css_class&lt;/code&gt; option, which by default is also set to &lt;code&gt;codehilite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The basic code fence and the syntax highlighting work pretty much out of the box so there's no need to tinker with the settings.  However, this blog does tinker with the settings because of requiring more specialized way of rendering code blocks.&lt;/p&gt;
&lt;h2 id="nested-code-blocks"&gt;Nested Code Blocks&lt;/h2&gt;
&lt;p&gt;Instructional steps are nice and having those steps point to fully rendered code blocks is even nicer.  This is one part where the standard Markdown specification doesn't really provide a definition and &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; doesn't seem to support it, so this a case where it's up to other groups provide a solution and implement this feature in their Markdown 'flavour'.&lt;/p&gt;
&lt;p&gt;Consider this this bit of Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; Step 1

&lt;span class="k"&gt;2.&lt;/span&gt; Step 2, but with Python code.

&lt;span class="sb"&gt;    ```&lt;/span&gt;
&lt;span class="sb"&gt;    print(&amp;quot;Hello world&amp;quot;)&lt;/span&gt;
&lt;span class="sb"&gt;    ```&lt;/span&gt;

&lt;span class="k"&gt;3.&lt;/span&gt; Step 3, but with syntax highlighted Python code.

&lt;span class="sb"&gt;    ```python&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sb"&gt;    ```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Markdown sample lists a series of steps and, in Step 2 and 3, adds a bit of sample Python code.  The code in Step 2 should render as monospace text, but the code in Step 3 should be rendered with syntax colouring appropriate for Python.  Unfortunately, this is somewhat fragile and only works in a very specific scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Indent your fenced block by an indent at your level (i.e. add extra 4 spaces).&lt;/li&gt;
&lt;li&gt;The fence requires a newline above and below the fenced block, so to be consistent, make the whole list double spaced.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And even then, this is only made possible by some behind the scenes work in our Pelican configuration file.  By default, Pelican is being powered by &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; and that will not render our example correctly.  Instead, we need to first install another package, &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt; and then enable its &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;superfences&lt;/a&gt; extension in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.superfences&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, the aboves renders as expected with the &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt;'s default settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2, but with Python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(&amp;quot;Hello world&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3, but with syntax highlighted Python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="adding-line-numbering"&gt;Adding line numbering&lt;/h2&gt;
&lt;p&gt;Line numbering is handles by &lt;a href="https://facelessuser.github.io/pymdown-extensions/extensions/superfences/"&gt;superfences&lt;/a&gt; and its help page is great at answering questions.  For this blog, it's important to note that out of the box, there are two options to rendering line numbers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Embedded&lt;/li&gt;
&lt;li&gt;Separate Table Column&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:  &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt; does add third option, &lt;code&gt;pymdownx-inline&lt;/code&gt;, but that's not working with this current theme. Incidentally, this seems to be part of a larger problem of non-working extensions, like &lt;code&gt;markdown.extensions.admonition&lt;/code&gt; and &lt;code&gt;pymdownx.tabbed&lt;/code&gt;, and it's not clear if the fault lies with the theme, Pelican, or something on the blog's configuration side.  As a result, this blog uses the separate table column as configured in thr &lt;code&gt;pelicanconf.py&lt;/code&gt;, under the &lt;code&gt;pymdownx.highlight&lt;/code&gt; extension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.highlight&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;linenums_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;pelicanconf.py&lt;/code&gt; configuration has line number disabled by default. Line numbers are enabled by adding the &lt;code&gt;linenums&lt;/code&gt; attribute to each individual code block with the starting line number as its argument.&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python linenums=&amp;quot;3&amp;quot;
for i in range(10):
    print(&amp;quot;Hello world!&amp;quot;)
print(&amp;quot;Goodbye&amp;quot;)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders this code, with line number starting on line 3.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;To highlight a specific lines use the &lt;code&gt;hl_lines&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python linenums=&amp;quot;5&amp;quot; hl_lines=&amp;quot;2-3&amp;quot;
for i in range(10):
    print(&amp;quot;Hello world!&amp;quot;)
print(&amp;quot;Goodbye&amp;quot;)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders this code, with line number starting on line 5, but highlighted code block lines 2 and 3:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Note that the &lt;code&gt;hl_lines&lt;/code&gt; refers to lines in the code block, not the lines as numbered by &lt;code&gt;linenums&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="line-numbering-and-line-wrapping"&gt;Line Numbering And Line Wrapping&lt;/h2&gt;
&lt;p&gt;There's one small problem with the theme and &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;pymdown-extensions&lt;/a&gt;.  If a line of code is too long, the theme will wrap the code but not update the line numbering accordingly.  The ends up with mis-aligned line numbering and breaks the feature.&lt;/p&gt;
&lt;p&gt;To work around this, this blog disables word wrapping for code blocks in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file with the &lt;code&gt;legacy_no_wrap_code&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;legacy_no_wrap_code&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pymdownx.highlight&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;linenums_style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;....&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, this Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python linenums=&amp;quot;5&amp;quot;
for i in range(10):
    print(&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;)
print(&amp;quot;Goodbye&amp;quot;)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renders the long line at line &lt;code&gt;6&lt;/code&gt; un-wrapped and preserves the alignment with the table columns:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;It's important to also note that this is behaving differently if there were no line numbering at all. For example, the above code block with the &lt;code&gt;linenums&lt;/code&gt; attribute removed renders this code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code block is not wrapped, but embedded in a scroll box to work around that.  The problem lies with the table mechanism used for the table column line numbering. Underneath the hood, the code block with &lt;code&gt;linenums&lt;/code&gt; renders this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlighttable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;linenos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;linenodiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;for&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;i&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;range&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;):&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;Goodbye&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the one without, renders this html (which is the same as the table cell containing the code in the above example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;for&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;i&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;range&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;):&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;Goodbye&lt;span class="ni"&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="about the blog"></category><category term="blog"></category><category term="markdown"></category><category term="codehilite"></category><category term="pelican"></category></entry><entry><title>How this blog is themed</title><link href="https://dbarsam.github.io/blog/how-this-blog-themes.html" rel="alternate"></link><published>2020-09-10T03:19:06+00:00</published><updated>2020-09-10T03:19:06+00:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-10:/blog/how-this-blog-themes.html</id><summary type="html">&lt;p&gt;The set-up of this blog's theme.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; is the tool that makes this static website from the markdown files in the repository.  But, while it has the power to theme the website out of the box, it's not that clear exactly how that is supposed to work.&lt;/p&gt;
&lt;h2 id="getting-the-theme"&gt;Getting the Theme&lt;/h2&gt;
&lt;p&gt;Pelican themes are packaged as a raw bundle of files, but if you're used to CI workflows this concept is rather challenging.  Instead of installing a theme through the Python package managed &lt;code&gt;pip&lt;/code&gt;, Pelican expects the files to be available somewhere on disk first and accesses them at run-time, either via a copy or symlink done with the Pelican utility &lt;a href="https://docs.getpelican.com/en/stable/pelican-themes.html"&gt;pelican-themes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up to this point in the blog set-up, we've been installing Pelican and its components as Python packages pinned at specific versions -- and pinning dependencies is such a basic requirement of pipeline automation that not having it feels like something is missing.  While some developers have made their theme available as packages (e.g. &lt;a href="https://pypi.org/project/plumage/"&gt;Plumage&lt;/a&gt;) most themes are collected as submodules of files in the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes GitHub Project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="embedding-the-theme"&gt;Embedding the Theme&lt;/h2&gt;
&lt;p&gt;There's different strategies to 'embedding' a theme.  This project has added it to the repo as a git submodule.  A git submodule is a git-specific way to embed one repo into another repo at a specific commit.  So instead of specifying a released version of the theme, the git submodule points to a specific code change in the repository.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://github.com/gilsondev/pelican-clean-blog"&gt;pelican-clean-blog&lt;/a&gt; as an example, we first add the submodule through git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git submodule add https://github.com/gilsondev/pelican-clean-blog pelican/themes/pelican-clean-blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're working on window you'll need to watch out for file paths with slashes.  If you have any error that's like this,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;fatal: No url found for submodule path &amp;#39;pelican/themes/pelican-clean-blog&amp;#39; in .gitmodules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the slashes from the escaped window slashes &lt;code&gt;pelican\\themes\\pelican-clean-blog&lt;/code&gt; to the unix slashes &lt;code&gt;pelican/themes/pelican-clean-blog&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="enabling-the-theme"&gt;Enabling the Theme&lt;/h2&gt;
&lt;p&gt;After the files are on disk Pelican expects the theme to be enabled in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file.  First you set the theme's relative path with the &lt;code&gt;THEME&lt;/code&gt; variable and then set any other auxillary theme setting with more variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="c1"&gt;# The Theme&lt;/span&gt;
&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pelican/themes.pelican-clean-blog&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="c1"&gt;# The Theme Specific Settings&lt;/span&gt;
&lt;span class="c1"&gt;# ####################################&lt;/span&gt;
&lt;span class="n"&gt;HEADER_COVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images/home-bg.png&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;HEADER_COLOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#004a59&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;COLOR_SCHEME_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tomorrow_night.css&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should now be visible if the build or run the live local server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;python -m pelican --autoreload --listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="theme-as-submodule"&gt;Theme as Submodule&lt;/h2&gt;
&lt;p&gt;Like a rug, a good theme really ties the whole website together.  So I appreciate the work that goes into making one; however, the one point I can't get over is use of copying and pasting files to install the theme.  While using submodules to embed the theme is a good step towards being modular, it feels dated and the wrong tool -- especially when we're already using Python packages.   Hopefully, this is just a transition.  It looks like Pelican 4.0 did start to push for better extension organization, but the current focus is on &lt;a href="https://github.com/pelican-plugins"&gt;Pelican Plugins&lt;/a&gt;.  Most of development for the themes in the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes GitHub Project&lt;/a&gt; appears to be stagnant, and only a few talk about supporting Pelican 4.0, and of those even fewer publish their themes as Python package.&lt;/p&gt;</content><category term="about the blog"></category><category term="blog"></category><category term="pipeline"></category><category term="travis-ci"></category><category term="github"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>How this blog works</title><link href="https://dbarsam.github.io/blog/how-this-blog-works.html" rel="alternate"></link><published>2020-09-08T01:29:08+00:00</published><updated>2020-09-08T01:29:08+00:00</updated><author><name>db</name></author><id>tag:dbarsam.github.io,2020-09-08:/blog/how-this-blog-works.html</id><summary type="html">&lt;p&gt;The pieces that make up this blog's backend.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This project is a blog with a pipeline.  The pipeline compiles the project's text files into static html pages and pushes them to a host which then displays it as a website.  The whole process is split along these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All content for this blog is stored as files in a project on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Articles (written in &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, a plain text mark up language) are submitted as files into the project via Git, the source control of the project.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.com"&gt;Travis-CI&lt;/a&gt;, which has been watching the source control, reacts to any change by Git by creating and launching a build pipeline on one of its servers.&lt;/li&gt;
&lt;li&gt;Part of the build pipeline launches &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and generates all html pages from the project markdown files.&lt;/li&gt;
&lt;li&gt;Another part &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;submits the html files&lt;/a&gt; to the &lt;code&gt;gh-pages&lt;/code&gt; branch back on GitHub, where Github displays anything on the &lt;code&gt;gh-pages&lt;/code&gt; branch a static web site.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="github"&gt;GitHub&lt;/h2&gt;
&lt;p&gt;This project and all of its content is stored and hosted on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.  There's already too much information about getting started with GitHub so this article assumes that that information is already known.  However, it is important to note that this project is using GitHub in a relatively simple way -- as a &lt;em&gt;static html site&lt;/em&gt;, hosted by &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;GitHub Pages&lt;/a&gt; -- and does not use any of the other features that it offers.  For example, this project does not use Jekyll so any mention of that can be ignored.&lt;/p&gt;
&lt;h2 id="markdown"&gt;Markdown&lt;/h2&gt;
&lt;p&gt;The actual content of the files is stored as &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; files all in the &lt;code&gt;content/&lt;/code&gt; folder in a flat listing.  Markdown is a markup language that is easy to read in plain text form and is popular enough that it just makes sense to use it instead of something else.&lt;/p&gt;
&lt;p&gt;However, the blog converts markdown to html with the &lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Python-Markdown&lt;/a&gt; library and uses some custom features provided by &lt;a href="https://facelessuser.github.io/pymdown-extensions/"&gt;PyMdown Extensions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="travis-ci"&gt;Travis CI&lt;/h2&gt;
&lt;p&gt;This project's automated actions are executed on &lt;a href="https://travis-ci.com"&gt;Travis-CI&lt;/a&gt;.  Like GitHub, there are almost too many tutorials about how to get started with Travis; services.  This project is using Travis in a relatively simple way and most of the work is handled by the built-in &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;support of GitHub Pages&lt;/a&gt;.  The &lt;code&gt;.travis-ci.yml&lt;/code&gt; file in this project defines two jobs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Markdown Linting with &lt;a href="https://github.com/DavidAnson/markdownlint"&gt;MarkdownLint&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lint&lt;/span&gt;
  &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;
  &lt;span class="nt"&gt;node_js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
  &lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g npm@latest&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install -g markdownlint-cli&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;markdownlint **/*.md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build with &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and publish to &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;
  &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.6&lt;/span&gt;
  &lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python -m pip install --upgrade pip&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python -m pip install -r requirements.txt&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make publish&lt;/span&gt;
  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pages&lt;/span&gt;
    &lt;span class="nt"&gt;skip_cleanup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git&lt;/span&gt;
    &lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$GITHUB_TOKEN&lt;/span&gt;  &lt;span class="c1"&gt;# Set in the settings page of your repository, as a secure variable&lt;/span&gt;
    &lt;span class="nt"&gt;keep_history&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
    &lt;span class="nt"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;
    &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pelican"&gt;Pelican&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; is the tool that generates the static website from the markdown files.  Pelican is a Python package and is installed by Python's package manager, &lt;code&gt;pip&lt;/code&gt;.  All dependency and their respective versions are listed in the project's &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pelican's configuration files are also written in Python and Pelican's default set-up splits the configuration into two files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; for local development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt; for publishing (which imports &lt;code&gt;pelicanconf.py&lt;/code&gt; and overrides any setting needed for publishing a website).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pelican's default set-up also simplifies the execution by providing a convenience &lt;code&gt;Makefile&lt;/code&gt;.  The &lt;code&gt;Makefile&lt;/code&gt; is an standard convention that contains pre-configured commands for various tasks.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.travis-ci.yml&lt;/code&gt; files executes all of the set-up and Pelican steps during the build and publish step.&lt;/p&gt;
&lt;h2 id="the-gh-pages-branch"&gt;The &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/h2&gt;
&lt;p&gt;GitHub Pages is one of the features that comes with every project and its only job is to display a collection of html files as a website.  Even with that scope, there's still a lot of the different ways to use that feature; a quick search on GitHub Pages will find tutorials that seem contradictory or mention seemly irrelevant or confusing configurations.  This project is creating a &lt;em&gt;project site&lt;/em&gt; (not a &lt;em&gt;user site&lt;/em&gt; or &lt;em&gt;organization&lt;/em&gt;) where the final url will be something like  &lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt;.  More information is available from the &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites"&gt;GitHub Pages Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gh-pages&lt;/code&gt; branch is a git branch named &lt;code&gt;gh-pages&lt;/code&gt;.  There is nothing special about the branch, except that &lt;code&gt;gh-pages&lt;/code&gt; is the default value for that branch that GitHub uses for as a &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites"&gt;publishing source&lt;/a&gt;.  Travis-Ci follows GitHub's lead and its publish commanded uses &lt;code&gt;gh-pages&lt;/code&gt; as a default value its &lt;code&gt;target_branch&lt;/code&gt; setting.&lt;/p&gt;</content><category term="about the blog"></category><category term="blog"></category><category term="pipeline"></category><category term="travis-ci"></category><category term="github"></category><category term="markdown"></category><category term="python"></category><category term="pelican"></category></entry></feed>